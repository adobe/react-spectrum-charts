{"version":3,"file":"vega-projection.js","sources":["../src/projections.js"],"sourcesContent":["import {\n  geoAlbers,\n  geoAlbersUsa,\n  geoAzimuthalEqualArea,\n  geoAzimuthalEquidistant,\n  geoConicConformal,\n  geoConicEqualArea,\n  geoConicEquidistant,\n  geoEqualEarth,\n  geoEquirectangular,\n  geoGnomonic,\n  geoIdentity,\n  geoMercator,\n  geoNaturalEarth1,\n  geoOrthographic,\n  geoPath,\n  geoStereographic,\n  geoTransverseMercator\n} from 'd3-geo';\n\nimport {\n  geoMollweide\n} from 'd3-geo-projection';\n\nimport {\n  registerScale\n} from 'vega-scale';\n\nconst defaultPath = geoPath();\n\nexport const projectionProperties = [\n  // standard properties in d3-geo\n  'clipAngle',\n  'clipExtent',\n  'scale',\n  'translate',\n  'center',\n  'rotate',\n  'parallels',\n  'precision',\n  'reflectX',\n  'reflectY',\n\n  // extended properties in d3-geo-projections\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n\n/**\n * Augment projections with their type and a copy method.\n */\nfunction create(type, constructor) {\n  return function projection() {\n    const p = constructor();\n\n    p.type = type;\n\n    p.path = geoPath().projection(p);\n\n    p.copy = p.copy || function() {\n      const c = projection();\n      projectionProperties.forEach(prop => {\n        if (p[prop]) c[prop](p[prop]());\n      });\n      c.path.pointRadius(p.path.pointRadius());\n      return c;\n    };\n\n    return registerScale(p);\n  };\n}\n\nexport function projection(type, proj) {\n  if (!type || typeof type !== 'string') {\n    throw new Error('Projection type must be a name string.');\n  }\n  type = type.toLowerCase();\n  if (arguments.length > 1) {\n    projections[type] = create(type, proj);\n    return this;\n  } else {\n    return projections[type] || null;\n  }\n}\n\nexport function getProjectionPath(proj) {\n  return (proj && proj.path) || defaultPath;\n}\n\nconst projections = {\n  // base d3-geo projection types\n  albers:               geoAlbers,\n  albersusa:            geoAlbersUsa,\n  azimuthalequalarea:   geoAzimuthalEqualArea,\n  azimuthalequidistant: geoAzimuthalEquidistant,\n  conicconformal:       geoConicConformal,\n  conicequalarea:       geoConicEqualArea,\n  conicequidistant:     geoConicEquidistant,\n  equalEarth:           geoEqualEarth,\n  equirectangular:      geoEquirectangular,\n  gnomonic:             geoGnomonic,\n  identity:             geoIdentity,\n  mercator:             geoMercator,\n  mollweide:            geoMollweide,\n  naturalEarth1:        geoNaturalEarth1,\n  orthographic:         geoOrthographic,\n  stereographic:        geoStereographic,\n  transversemercator:   geoTransverseMercator\n};\n\nfor (const key in projections) {\n  projection(key, projections[key]);\n}\n"],"names":["defaultPath","geoPath","projectionProperties","create","type","constructor","projection","p","path","copy","c","forEach","prop","pointRadius","registerScale","proj","Error","toLowerCase","arguments","length","projections","getProjectionPath","albers","geoAlbers","albersusa","geoAlbersUsa","azimuthalequalarea","geoAzimuthalEqualArea","azimuthalequidistant","geoAzimuthalEquidistant","conicconformal","geoConicConformal","conicequalarea","geoConicEqualArea","conicequidistant","geoConicEquidistant","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","gnomonic","geoGnomonic","identity","geoIdentity","mercator","geoMercator","mollweide","geoMollweide","naturalEarth1","geoNaturalEarth1","orthographic","geoOrthographic","stereographic","geoStereographic","transversemercator","geoTransverseMercator","key"],"mappings":"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"}