{"version":3,"file":"vega-regression.js","sources":["../src/partition.js","../src/Loess.js","../src/Regression.js"],"sourcesContent":["export default function(data, groupby) {\n  var groups = [],\n      get = function(f) { return f(t); },\n      map, i, n, t, k, g;\n\n  // partition data points into stack groups\n  if (groupby == null) {\n    groups.push(data);\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = (g = []);\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(t);\n    }\n  }\n\n  return groups;\n}\n","import partition from './partition.js';\nimport {regressionLoess} from 'vega-statistics';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {accessorName, inherits} from 'vega-util';\n\n/**\n * Compute locally-weighted regression fits for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.x - An accessor for the predictor data field.\n * @param {function(object): *} params.y - An accessor for the predicted data field.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.bandwidth=0.3] - The loess bandwidth.\n */\nexport default function Loess(params) {\n  Transform.call(this, null, params);\n}\n\nLoess.Definition = {\n  'type': 'Loess',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'x', 'type': 'field', 'required': true },\n    { 'name': 'y', 'type': 'field', 'required': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'bandwidth', 'type': 'number', 'default': 0.3 },\n    { 'name': 'as', 'type': 'string', 'array': true }\n  ]\n};\n\ninherits(Loess, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby),\n            names = (_.groupby || []).map(accessorName),\n            m = names.length,\n            as = _.as || [accessorName(_.x), accessorName(_.y)],\n            values = [];\n\n      groups.forEach(g => {\n        regressionLoess(g, _.x, _.y, _.bandwidth || 0.3).forEach(p => {\n          const t = {};\n          for (let i=0; i<m; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n          t[as[0]] = p[0];\n          t[as[1]] = p[1];\n          values.push(ingest(t));\n        });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n","import partition from './partition.js';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {\n  regressionConstant, regressionExp, regressionLinear, regressionLog,\n  regressionPoly, regressionPow, regressionQuad, sampleCurve\n} from 'vega-statistics';\nimport {accessorName, error, extent, hasOwnProperty, inherits} from 'vega-util';\n\nconst Methods = {\n  constant: regressionConstant,\n  linear:   regressionLinear,\n  log:      regressionLog,\n  exp:      regressionExp,\n  pow:      regressionPow,\n  quad:     regressionQuad,\n  poly:     regressionPoly\n};\n\nconst degreesOfFreedom = (method, order) =>\n  method === 'poly' ? order : method === 'quad' ? 2 : 1;\n\n/**\n * Compute regression fits for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.x - An accessor for the predictor data field.\n * @param {function(object): *} params.y - An accessor for the predicted data field.\n * @param {string} [params.method='linear'] - The regression method to apply.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {Array<number>} [params.extent] - The domain extent over which to plot the regression line.\n * @param {number} [params.order=3] - The polynomial order. Only applies to the 'poly' method.\n */\nexport default function Regression(params) {\n  Transform.call(this, null, params);\n}\n\nRegression.Definition = {\n  'type': 'Regression',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'x', 'type': 'field', 'required': true },\n    { 'name': 'y', 'type': 'field', 'required': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'method', 'type': 'string', 'default': 'linear', 'values': Object.keys(Methods) },\n    { 'name': 'order', 'type': 'number', 'default': 3 },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'params', 'type': 'boolean', 'default': false },\n    { 'name': 'as', 'type': 'string', 'array': true }\n  ]\n};\n\ninherits(Regression, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby),\n            names = (_.groupby || []).map(accessorName),\n            method = _.method || 'linear',\n            order = _.order == null ? 3 : _.order,\n            dof = degreesOfFreedom(method, order),\n            as = _.as || [accessorName(_.x), accessorName(_.y)],\n            fit = Methods[method],\n            values = [];\n\n      let domain = _.extent;\n\n      if (!hasOwnProperty(Methods, method)) {\n        error('Invalid regression method: ' + method);\n      }\n\n      if (domain != null) {\n        if (method === 'log' && domain[0] <= 0) {\n          pulse.dataflow.warn('Ignoring extent with values <= 0 for log regression.');\n          domain = null;\n        }\n      }\n\n      groups.forEach(g => {\n        const n = g.length;\n        if (n <= dof) {\n          pulse.dataflow.warn('Skipping regression with more parameters than data points.');\n          return;\n        }\n\n        const model = fit(g, _.x, _.y, order);\n\n        if (_.params) {\n          // if parameter vectors requested return those\n          values.push(ingest({\n            keys: g.dims,\n            coef: model.coef,\n            rSquared: model.rSquared\n          }));\n          return;\n        }\n\n        const dom = domain || extent(g, _.x),\n              add = p => {\n                const t = {};\n                for (let i=0; i<names.length; ++i) {\n                  t[names[i]] = g.dims[i];\n                }\n                t[as[0]] = p[0];\n                t[as[1]] = p[1];\n                values.push(ingest(t));\n              };\n\n        if (method === 'linear' || method === 'constant') {\n          // for linear or constant regression we only need the end points\n          dom.forEach(x => add([x, model.predict(x)]));\n        } else {\n          // otherwise return trend line sample points\n          sampleCurve(model.predict, dom, 25, 200).forEach(add);\n        }\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n"],"names":["data","groupby","groups","get","f","t","map","i","n","k","g","push","length","dims","Loess","params","Transform","call","Definition","inherits","transform","_","pulse","out","fork","NO_SOURCE","NO_FIELDS","value","changed","modified","source","materialize","SOURCE","partition","names","accessorName","m","as","x","y","values","forEach","regressionLoess","bandwidth","p","ingest","rem","add","Methods","constant","regressionConstant","linear","regressionLinear","log","regressionLog","exp","regressionExp","pow","regressionPow","quad","regressionQuad","poly","regressionPoly","degreesOfFreedom","method","order","Regression","Object","keys","dof","fit","domain","extent","hasOwnProperty","error","dataflow","warn","model","coef","rSquared","dom","predict","sampleCurve"],"mappings":"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"}