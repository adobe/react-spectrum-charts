{"version":3,"file":"vega-dataflow.js","sources":["../src/util/UniqueList.js","../src/util/asyncCallback.js","../src/Tuple.js","../src/ChangeSet.js","../src/Parameters.js","../src/Operator.js","../src/dataflow/add.js","../src/dataflow/connect.js","../src/EventStream.js","../src/dataflow/events.js","../src/dataflow/load.js","../src/dataflow/on.js","../src/dataflow/rank.js","../src/Pulse.js","../src/MultiPulse.js","../src/dataflow/run.js","../src/dataflow/update.js","../src/util/Heap.js","../src/dataflow/Dataflow.js","../src/Transform.js","../src/register.js"],"sourcesContent":["import {identity} from 'vega-util';\n\nexport default function UniqueList(idFunc) {\n  const $ = idFunc || identity,\n        list = [],\n        ids = {};\n\n  list.add = _ => {\n    const id = $(_);\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n    return list;\n  };\n\n  list.remove = _ => {\n    const id = $(_);\n    if (ids[id]) {\n      ids[id] = 0;\n      const idx = list.indexOf(_);\n      if (idx >= 0) list.splice(idx, 1);\n    }\n    return list;\n  };\n\n  return list;\n}\n","/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nexport default async function(df, callback) {\n  try { await callback(df); } catch (err) { df.error(err); }\n}\n","const TUPLE_ID_KEY = Symbol('vega_id');\nlet TUPLE_ID = 1;\n\n/**\n * Resets the internal tuple id counter to one.\n */\nexport function reset() {\n  TUPLE_ID = 1;\n}\n\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\nexport function isTuple(t) {\n  return !!(t && tupleid(t));\n}\n\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\nexport function tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\nexport function ingest(datum) {\n  const t = (datum === Object(datum)) ? datum : {data: datum};\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\nexport function derive(t) {\n  return rederive(t, ingest({}));\n}\n\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\nexport function rederive(t, d) {\n  for (const k in t) d[k] = t[k];\n  return d;\n}\n\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\nexport function replace(t, d) {\n  return setid(d, tupleid(t));\n}\n\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\nexport function stableCompare(cmp, f) {\n  return !cmp ? null\n    : f ? (a, b) => cmp(a, b) || (tupleid(f(a)) - tupleid(f(b)))\n    : (a, b) => cmp(a, b) || (tupleid(a) - tupleid(b));\n}\n","import {ingest, tupleid} from './Tuple.js';\nimport {array, constant, isFunction} from 'vega-util';\n\nexport function isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\n\nexport default function changeset() {\n  const add = [],  // insert tuples\n        rem = [],  // remove tuples\n        mod = [],  // modify tuples\n        remp = [], // remove by predicate\n        modp = []; // modify by predicate\n  let clean = null,\n      reflow = false;\n\n  return {\n    constructor: changeset,\n    insert(t) {\n      const d = array(t), n = d.length;\n      for (let i = 0; i < n; ++i) add.push(d[i]);\n      return this;\n    },\n    remove(t) {\n      const a = isFunction(t) ? remp : rem,\n            d = array(t),\n            n = d.length;\n      for (let i = 0; i < n; ++i) a.push(d[i]);\n      return this;\n    },\n    modify(t, field, value) {\n      const m = {field: field, value: constant(value)};\n      if (isFunction(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n      return this;\n    },\n    encode(t, set) {\n      if (isFunction(t)) modp.push({filter: t, field: set});\n      else mod.push({tuple: t, field: set});\n      return this;\n    },\n    clean(value) {\n      clean = value;\n      return this;\n    },\n    reflow() {\n      reflow = true;\n      return this;\n    },\n    pulse(pulse, tuples) {\n      const cur = {}, out = {};\n      let i, n, m, f, t, id;\n\n      // build lookup table of current tuples\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        cur[tupleid(tuples[i])] = 1;\n      }\n\n      // process individual tuples to remove\n      for (i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        cur[tupleid(t)] = -1;\n      }\n\n      // process predicate-based removals\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(t => {\n          if (f(t)) cur[tupleid(t)] = -1;\n        });\n      }\n\n      // process all add tuples\n      for (i = 0, n = add.length; i < n; ++i) {\n        t = add[i];\n        id = tupleid(t);\n        if (cur[id]) {\n          // tuple already resides in dataset\n          // if flagged for both add and remove, cancel\n          cur[id] = 1;\n        } else {\n          // tuple does not reside in dataset, add\n          pulse.add.push(ingest(add[i]));\n        }\n      }\n\n      // populate pulse rem list\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        t = tuples[i];\n        if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n      }\n\n      // modify helper method\n      function modify(t, f, v) {\n        if (v) {\n          t[f] = v(t);\n        } else {\n          pulse.encode = f;\n        }\n        if (!reflow) out[tupleid(t)] = t;\n      }\n\n      // process individual tuples to modify\n      for (i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        t = m.tuple;\n        f = m.field;\n        id = cur[tupleid(t)];\n        if (id > 0) {\n          modify(t, f, m.value);\n          pulse.modifies(f);\n        }\n      }\n\n      // process predicate-based modifications\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(t => {\n          if (f(t) && cur[tupleid(t)] > 0) {\n            modify(t, m.field, m.value);\n          }\n        });\n        pulse.modifies(m.field);\n      }\n\n      // upon reflow request, populate mod with all non-removed tuples\n      // otherwise, populate mod with modified tuples only\n      if (reflow) {\n        pulse.mod = rem.length || remp.length\n          ? tuples.filter(t => cur[tupleid(t)] > 0)\n          : tuples.slice();\n      } else {\n        for (id in out) pulse.mod.push(out[id]);\n      }\n\n      // set pulse garbage collection request\n      if (clean || clean == null && (rem.length || remp.length)) {\n        pulse.clean(true);\n      }\n\n      return pulse;\n    }\n  };\n}\n","import {isArray} from 'vega-util';\n\nconst CACHE = '_:mod:_';\n\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\nexport default function Parameters() {\n  Object.defineProperty(this, CACHE, {writable: true, value: {}});\n}\n\nParameters.prototype = {\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  set(name, index, value, force) {\n    const o = this,\n          v = o[name],\n          mod = o[CACHE];\n\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n\n    return o;\n  },\n\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  modified(name, index) {\n    const mod = this[CACHE];\n    if (!arguments.length) {\n      for (const k in mod) { if (mod[k]) return true; }\n      return false;\n    } else if (isArray(name)) {\n      for (let k = 0; k < name.length; ++k) {\n        if (mod[name[k]]) return true;\n      }\n      return false;\n    }\n    return (index != null && index >= 0)\n      ? (index + 1 < mod[name] || !!mod[index + ':' + name])\n      : !!mod[name];\n  },\n\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  clear() {\n    this[CACHE] = {};\n    return this;\n  }\n};\n","import Parameters from './Parameters.js';\nimport UniqueList from './util/UniqueList.js';\nimport {array, error, id, isArray} from 'vega-util';\n\nlet OP_ID = 0;\n\nconst PULSE = 'pulse',\n      NO_PARAMS = new Parameters();\n\n// Boolean Flags\nconst SKIP     = 1,\n      MODIFIED = 2;\n\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\nexport default function Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n\n  if (update) {\n    this._update = update;\n  }\n  if (params) this.parameters(params, react);\n}\n\nfunction flag(bit) {\n  return function(state) {\n    const f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? (f | bit) : (f & ~bit);\n    return this;\n  };\n}\n\nOperator.prototype = {\n\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  set(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  skip: flag(SKIP),\n\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  modified: flag(MODIFIED),\n\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initial evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  parameters(params, react, initonly) {\n    react = react !== false;\n    const argval = (this._argval = this._argval || new Parameters()),\n          argops = (this._argops = this._argops || []),\n          deps = [];\n    let name, value, n, i;\n\n    const add = (name, index, value) => {\n      if (value instanceof Operator) {\n        if (value !== this) {\n          if (react) value.targets().add(this);\n          deps.push(value);\n        }\n        argops.push({op:value, name:name, index:index});\n      } else {\n        argval.set(name, index, value);\n      }\n    };\n\n    for (name in params) {\n      value = params[name];\n\n      if (name === PULSE) {\n        array(value).forEach(op => {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== this) {\n            op.targets().add(this);\n            deps.push(op);\n          }\n        });\n        this.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n        for (i = 0; i < n; ++i) add(name, i, value[i]);\n      } else {\n        add(name, -1, value);\n      }\n    }\n\n    this.marshall().clear(); // initialize values\n    if (initonly) argops.initonly = true;\n\n    return deps;\n  },\n\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  marshall(stamp) {\n    const argval = this._argval || NO_PARAMS,\n          argops = this._argops;\n    let item, i, op, mod;\n\n    if (argops) {\n      const n = argops.length;\n      for (i = 0; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n\n      if (argops.initonly) {\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n        this._argops = null;\n        this._update = null;\n      }\n    }\n    return argval;\n  },\n\n  /**\n   * Detach this operator from the dataflow.\n   * Unregisters listeners on upstream dependencies.\n   */\n  detach() {\n    const argops = this._argops;\n    let i, n, item, op;\n\n    if (argops) {\n      for (i = 0, n = argops.length; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        if (op._targets) {\n          op._targets.remove(this);\n        }\n      }\n    }\n\n    // remove references to the source and pulse object,\n    // if present, to prevent memory leaks of old data.\n    this.pulse = null;\n    this.source = null;\n  },\n\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  evaluate(pulse) {\n    const update = this._update;\n    if (update) {\n      const params = this.marshall(pulse.stamp),\n            v = update.call(this, params, pulse);\n\n      params.clear();\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  },\n\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    let rv;\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    return (this.pulse = rv || pulse);\n  }\n};\n","import Operator from '../Operator.js';\nimport {isFunction} from 'vega-util';\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\nexport default function(init, update, params, react) {\n  let shift = 1,\n      op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n  if (shift) {\n    react = params;\n    params = update;\n  }\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n\n  return op;\n}\n","/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\nexport default function(target, sources) {\n  const targetRank = target.rank,\n        n = sources.length;\n\n  for (let i = 0; i < n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\n","import UniqueList from './util/UniqueList.js';\nimport {debounce, id, identity, truthy} from 'vega-util';\n\nlet STREAM_ID = 0;\n\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\nexport default function EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\nexport function stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\n\nEventStream.prototype = {\n  _filter: truthy,\n\n  _apply: identity,\n\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  consume(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  },\n\n  receive(evt) {\n    if (this._filter(evt)) {\n      const val = (this.value = this._apply(evt)),\n          trg = this._targets,\n          n = trg ? trg.length : 0;\n\n      for (let i = 0; i < n; ++i) trg[i].receive(val);\n\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  },\n\n  filter(filter) {\n    const s = stream(filter);\n    this.targets().add(s);\n    return s;\n  },\n\n  apply(apply) {\n    const s = stream(null, apply);\n    this.targets().add(s);\n    return s;\n  },\n\n  merge() {\n    const s = stream();\n\n    this.targets().add(s);\n    for (let i=0, n=arguments.length; i<n; ++i) {\n      arguments[i].targets().add(s);\n    }\n\n    return s;\n  },\n\n  throttle(pause) {\n    let t = -1;\n    return this.filter(() => {\n      const now = Date.now();\n      if ((now - t) > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  },\n\n  debounce(delay) {\n    const s = stream();\n\n    this.targets().add(stream(null, null,\n      debounce(delay, e => {\n        const df = e.dataflow;\n        s.receive(e);\n        if (df && df.run) df.run();\n      })\n    ));\n\n    return s;\n  },\n\n  between(a, b) {\n    let active = false;\n    a.targets().add(stream(null, null, () => active = true));\n    b.targets().add(stream(null, null, () => active = false));\n    return this.filter(() => active);\n  },\n\n  detach() {\n    // ensures compatibility with operators (#2753)\n    // remove references to other streams and filter functions that may\n    // be bound to subcontexts that need to be garbage collected.\n    this._filter = truthy;\n    this._targets = null;\n  }\n};\n","import {stream} from '../EventStream.js';\nimport {array} from 'vega-util';\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\nexport default function(source, type, filter, apply) {\n  const df = this,\n        s = stream(filter, apply),\n        send = function(e) {\n          e.dataflow = df;\n          try {\n            s.receive(e);\n          } catch (error) {\n            df.error(error);\n          } finally {\n            df.run();\n          }\n        };\n\n  let sources;\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  const n = sources.length;\n  for (let i = 0; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n","import {read, responseType} from 'vega-loader';\nimport {truthy} from 'vega-util';\n\nexport function parse(data, format) {\n  const locale = this.locale();\n  return read(data, format, locale.timeParse, locale.utcParse);\n}\n\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\nexport function ingest(target, data, format) {\n  data = this.parse(data, format);\n  return this.pulse(target, this.changeset().insert(data));\n}\n\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\nexport async function request(url, format) {\n  const df = this;\n  let status = 0, data;\n\n  try {\n    data = await df.loader().load(url, {\n      context: 'dataflow',\n      response: responseType(format && format.type)\n    });\n    try {\n      data = df.parse(data, format);\n    } catch (err) {\n      status = -2;\n      df.warn('Data ingestion failed', url, err);\n    }\n  } catch (err) {\n    status = -1;\n    df.warn('Loading failed', url, err);\n  }\n\n  return {data, status};\n}\n\nexport async function preload(target, url, format) {\n  const df = this,\n        pending = df._pending || loadPending(df);\n\n  pending.requests += 1;\n\n  const res = await df.request(url, format);\n  df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n\n  pending.done();\n  return res;\n}\n\nfunction loadPending(df) {\n  let accept;\n  const pending = new Promise(a => accept = a);\n\n  pending.requests = 0;\n\n  pending.done = () => {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n\n  return (df._pending = pending);\n}\n","import Operator from '../Operator.js';\nimport {isChangeSet} from '../ChangeSet.js';\nimport {constant, extend, isFunction} from 'vega-util';\n\nconst SKIP = {skip: true};\n\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\nexport default function(source, target, update, params, options) {\n  const fn = source instanceof Operator ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n}\n\nfunction onStream(df, stream, target, update, params, options) {\n  const opt = extend({}, options, SKIP);\n  let func, op;\n\n  if (!isFunction(target)) target = constant(target);\n\n  if (update === undefined) {\n    func = e => df.touch(target(e));\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n    func = e => {\n      op.evaluate(e);\n      const t = target(e), v = op.value;\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = e => df.update(target(e), update, opt);\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  if (update === undefined) {\n    source.targets().add(target);\n  } else {\n    const opt = options || {},\n          op = new Operator(null, updater(target, update), params, false);\n    op.modified(opt.force);\n    op.rank = source.rank;       // immediately follow source\n    source.targets().add(op);    // add dependency\n\n    if (target) {\n      op.skip(true);             // skip first invocation\n      op.value = target.value;   // initialize value\n      op.targets().add(target);  // chain dependencies\n      df.connect(target, [op]);  // rerank as needed, #1672\n    }\n  }\n}\n\nfunction updater(target, update) {\n  update = isFunction(update) ? update : constant(update);\n  return target\n    ? function(_, pulse) {\n        const value = update(_, pulse);\n        if (!target.skip()) {\n          target.skip(value !== this.value).value = value;\n        }\n        return value;\n      }\n    : update;\n}\n","import {error} from 'vega-util';\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\nexport function rank(op) {\n  op.rank = ++this._rank;\n}\n\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\nexport function rerank(op) {\n  const queue = [op];\n  let cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n    if (list = cur._targets) {\n      for (i=list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n","import {tupleid} from './Tuple.js';\nimport {isArray, visitArray} from 'vega-util';\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\nexport const StopPropagation = {};\n\n// Pulse visit type flags\nconst ADD       = (1 << 0),\n      REM       = (1 << 1),\n      MOD       = (1 << 2),\n      ADD_REM   = ADD | REM,\n      ADD_MOD   = ADD | MOD,\n      ALL       = ADD | REM | MOD,\n      REFLOW    = (1 << 3),\n      SOURCE    = (1 << 4),\n      NO_SOURCE = (1 << 5),\n      NO_FIELDS = (1 << 6);\n\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\nexport default function Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\n\nfunction materialize(data, filter) {\n  const out = [];\n  visitArray(data, filter, _ => out.push(_));\n  return out;\n}\n\nfunction filter(pulse, flags) {\n  const map = {};\n  pulse.visit(flags, t => { map[tupleid(t)] = 1; });\n  return t => map[tupleid(t)] ? null : t;\n}\n\nfunction addFilter(a, b) {\n  return a\n    ? (t, i) => a(t, i) && b(t, i)\n    : b;\n}\n\nPulse.prototype = {\n\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  StopPropagation,\n\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  ADD,\n\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  REM,\n\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  MOD,\n\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  ADD_REM,\n\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  ADD_MOD,\n\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  ALL,\n\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  REFLOW,\n\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  SOURCE,\n\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_SOURCE,\n\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_FIELDS,\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  fork(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  },\n\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  clone() {\n    const p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  },\n\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  addAll() {\n    let p = this;\n    const reuse = !p.source\n      || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n      || (!p.rem.length && p.source.length === p.add.length);\n\n    if (reuse) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      p.rem = []; // new operators can ignore rem #2769\n      return p;\n    }\n  },\n\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  init(src, flags) {\n    const p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n      if (src.cleans) p.cleans = src.cleans;\n    }\n\n    return p;\n  },\n\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  runAfter(func) {\n    this.dataflow.runAfter(func);\n  },\n\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  changed(flags) {\n    const f = flags || ALL;\n    return ((f & ADD) && this.add.length)\n        || ((f & REM) && this.rem.length)\n        || ((f & MOD) && this.mod.length);\n  },\n\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  reflow(fork) {\n    if (fork) return this.fork(ALL).reflow();\n\n    const len = this.add.length,\n          src = this.source && this.source.length;\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n    return this;\n  },\n\n  /**\n   * Get/set metadata to pulse requesting garbage collection\n   * to reclaim currently unused resources.\n   */\n  clean(value) {\n    if (arguments.length) {\n      this.cleans = !!value;\n      return this;\n    } else {\n      return this.cleans;\n    }\n  },\n\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  modifies(_) {\n    const hash = this.fields || (this.fields = {});\n    if (isArray(_)) {\n      _.forEach(f => hash[f] = true);\n    } else {\n      hash[_] = true;\n    }\n    return this;\n  },\n\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  modified(_, nomod) {\n    const fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false\n      : !arguments.length ? !!fields\n      : isArray(_) ? _.some(f => fields[f])\n      : fields[_];\n  },\n\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  filter(flags, filter) {\n    const p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, filter);\n    if (flags & REM) p.remF = addFilter(p.remF, filter);\n    if (flags & MOD) p.modF = addFilter(p.modF, filter);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n    return p;\n  },\n\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  materialize(flags) {\n    flags = flags || ALL;\n    const p = this;\n    if ((flags & ADD) && p.addF) {\n      p.add = materialize(p.add, p.addF);\n      p.addF = null;\n    }\n    if ((flags & REM) && p.remF) {\n      p.rem = materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n    if ((flags & MOD) && p.modF) {\n      p.mod = materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n    if ((flags & SOURCE) && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n    return p;\n  },\n\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  visit(flags, visitor) {\n    const p = this, v = visitor;\n\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n\n    const src = p.source;\n    if ((flags & REFLOW) && src) {\n      const sum = p.add.length + p.mod.length;\n      if (sum === src.length) {\n        // do nothing\n      } else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n\n    return p;\n  }\n};\n","import Pulse from './Pulse.js';\nimport {error, inherits, isArray} from 'vega-util';\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\nexport default function MultiPulse(dataflow, stamp, pulses, encode) {\n  const p = this;\n  let c = 0;\n\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (const pulse of pulses) {\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      const hash = p.fields || (p.fields = {});\n      for (const f in pulse.fields) { hash[f] = 1; }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\n\ninherits(MultiPulse, Pulse, {\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  fork(flags) {\n    const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n    if (flags !== undefined) {\n      if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));\n      if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));\n      if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));\n    }\n    return p;\n  },\n\n  changed(flags) {\n    return this.changes & flags;\n  },\n\n  modified(_) {\n    const p = this, fields = p.fields;\n    return !(fields && (p.changes & p.MOD)) ? 0\n      : isArray(_) ? _.some(f => fields[f])\n      : fields[_];\n  },\n\n  filter() {\n    error('MultiPulse does not support filtering.');\n  },\n\n  materialize() {\n    error('MultiPulse does not support materialization.');\n  },\n\n  visit(flags, visitor) {\n    const p = this,\n          pulses = p.pulses,\n          n = pulses.length;\n    let i = 0;\n\n    if (flags & p.SOURCE) {\n      for (; i < n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i < n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n\n    return p;\n  }\n});\n","import {default as Pulse, StopPropagation} from '../Pulse.js';\nimport MultiPulse from '../MultiPulse.js';\nimport asyncCallback from '../util/asyncCallback.js';\nimport UniqueList from '../util/UniqueList.js';\nimport {id, isArray} from 'vega-util';\n\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\nexport async function evaluate(encode, prerun, postrun) {\n  const df = this,\n        async = [];\n\n  // if the pulse value is set, this is a re-entrant call\n  if (df._pulse) return reentrant(df);\n\n  // wait for pending datasets to load\n  if (df._pending) await df._pending;\n\n  // invoke prerun function, if provided\n  if (prerun) await asyncCallback(df, prerun);\n\n  // exit early if there are no updates\n  if (!df._touched.length) {\n    df.debug('Dataflow invoked, but nothing to do.');\n    return df;\n  }\n\n  // increment timestamp clock\n  const stamp = ++df._clock;\n\n  // set the current pulse\n  df._pulse = new Pulse(df, stamp, encode);\n\n  // initialize priority queue, reset touched operators\n  df._touched.forEach(op => df._enqueue(op, true));\n  df._touched = UniqueList(id);\n\n  let count = 0, op, next, error;\n\n  try {\n    while (df._heap.size() > 0) {\n      // dequeue operator with highest priority\n      op = df._heap.pop();\n\n      // re-queue if rank changed\n      if (op.rank !== op.qrank) {\n        df._enqueue(op, true);\n        continue;\n      }\n\n      // otherwise, evaluate the operator\n      next = op.run(df._getPulse(op, encode));\n\n      if (next.then) {\n        // await if operator returns a promise directly\n        next = await next;\n      } else if (next.async) {\n        // queue parallel asynchronous execution\n        async.push(next.async);\n        next = StopPropagation;\n      }\n\n      // propagate evaluation, enqueue dependent operators\n      if (next !== StopPropagation) {\n        if (op._targets) op._targets.forEach(op => df._enqueue(op));\n      }\n\n      // increment visit counter\n      ++count;\n    }\n  } catch (err) {\n    df._heap.clear();\n    error = err;\n  }\n\n  // reset pulse map\n  df._input = {};\n  df._pulse = null;\n\n  df.debug(`Pulse ${stamp}: ${count} operators`);\n\n  if (error) {\n    df._postrun = [];\n    df.error(error);\n  }\n\n  // invoke callbacks queued via runAfter\n  if (df._postrun.length) {\n    const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n    df._postrun = [];\n    for (let i=0; i<pr.length; ++i) {\n      await asyncCallback(df, pr[i].callback);\n    }\n  }\n\n  // invoke postrun function, if provided\n  if (postrun) await asyncCallback(df, postrun);\n\n  // handle non-blocking asynchronous callbacks\n  if (async.length) {\n    Promise.all(async)\n      .then(cb => df.runAsync(null, () => {\n        cb.forEach(f => { try { f(df); } catch (err) { df.error(err); } });\n      }));\n  }\n\n  return df;\n}\n\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\nexport async function runAsync(encode, prerun, postrun) {\n  // await previously queued functions\n  while (this._running) await this._running;\n\n  // run dataflow, manage running promise\n  const clear = () => this._running = null;\n  (this._running = this.evaluate(encode, prerun, postrun))\n    .then(clear, clear);\n\n  return this._running;\n}\n\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\nexport function run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this)\n    : (this.evaluate(encode, prerun, postrun), this);\n}\n\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\nexport function runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try { callback(this); } catch (err) { this.error(err); }\n  }\n}\n\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\nexport function enqueue(op, force) {\n  const q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n  if (q || force) {\n    op.qrank = op.rank;\n    this._heap.push(op);\n  }\n}\n\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\nexport function getPulse(op, encode) {\n  const s = op.source,\n        stamp = this._clock;\n\n  return s && isArray(s)\n    ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode)\n    : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\n\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n\n  p = p.fork();\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n  return p;\n}\n","import Pulse from '../Pulse.js';\n\nconst NO_OPT = {skip: false, force: false};\n\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function touch(op, options) {\n  const opt = options || NO_OPT;\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n  if (opt.skip) op.skip(true);\n  return this;\n}\n\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function update(op, value, options) {\n  const opt = options || NO_OPT;\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n  return this;\n}\n\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n\n  const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n        t = op.pulse && op.pulse.source || [];\n\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n\n  return this;\n}\n","export default function Heap(cmp) {\n  let nodes = [];\n  return {\n    clear: () => nodes = [],\n    size: () => nodes.length,\n    peek: () => nodes[0],\n    push: x => {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: () => {\n      const last = nodes.pop();\n      let item;\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  let parent, pidx;\n\n  const item = array[idx];\n  while (idx > start) {\n    pidx = (idx - 1) >> 1;\n    parent = array[pidx];\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n    break;\n  }\n  return (array[idx] = item);\n}\n\nfunction siftup(array, idx, cmp) {\n  const start = idx,\n        end = array.length,\n        item = array[idx];\n  let cidx = (idx << 1) + 1, ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n","import add from './add.js';\nimport connect from './connect.js';\nimport events from './events.js';\nimport {ingest, parse, preload, request} from './load.js';\nimport on from './on.js';\nimport {rank, rerank} from './rank.js';\nimport {enqueue, evaluate, getPulse, run, runAfter, runAsync} from './run.js';\nimport {pulse, touch, update} from './update.js';\nimport changeset from '../ChangeSet.js';\nimport Heap from '../util/Heap.js';\nimport UniqueList from '../util/UniqueList.js';\nimport {defaultLocale} from 'vega-format';\nimport {loader} from 'vega-loader';\nimport {Error, id, logger} from 'vega-util';\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\nexport default function Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n\n  this._clock = 0;\n  this._rank = 0;\n  this._locale = defaultLocale();\n  try {\n    this._loader = loader();\n  } catch (e) {\n    // do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n\n  this._heap = Heap((a, b) => a.qrank - b.qrank);\n  this._postrun = [];\n}\n\nfunction logMethod(method) {\n  return function() {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\nDataflow.prototype = {\n\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  stamp() {\n    return this._clock;\n  },\n\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  loader(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  },\n\n  /**\n   * Gets or sets the locale instance to use for formatting and parsing\n   * string values. The locale object should be provided by the\n   * vega-format library, and include methods such as format, timeFormat,\n   * utcFormat, timeParse, and utcParse.\n   * @param {object} _ - The locale instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current locale instance. Otherwise returns this Dataflow instance.\n   */\n  locale(_) {\n    if (arguments.length) {\n      this._locale = _;\n      return this;\n    } else {\n      return this._locale;\n    }\n  },\n\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  logger(logger) {\n    if (arguments.length) {\n      this._log = logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  },\n\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  error: logMethod('error'),\n\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  warn: logMethod('warn'),\n\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  info: logMethod('info'),\n\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  debug: logMethod('debug'),\n\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  logLevel: logMethod('level'),\n\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  cleanThreshold: 1e4,\n\n  // OPERATOR REGISTRATION\n  add,\n  connect,\n  rank,\n  rerank,\n\n  // OPERATOR UPDATES\n  pulse,\n  touch,\n  update,\n  changeset,\n\n  // DATA LOADING\n  ingest,\n  parse,\n  preload,\n  request,\n\n  // EVENT HANDLING\n  events,\n  on,\n\n  // PULSE PROPAGATION\n  evaluate,\n  run,\n  runAsync,\n  runAfter,\n  _enqueue: enqueue,\n  _getPulse: getPulse\n};\n","import Operator from './Operator.js';\nimport {inherits} from 'vega-util';\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\nexport default function Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\n\ninherits(Transform, Operator, {\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n\n    let rv;\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    rv = rv || pulse;\n\n    if (rv.then) {\n      rv = rv.then(_ => this.pulse =_);\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n\n    return rv;\n  },\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n  */\n  evaluate(pulse) {\n    const params = this.marshall(pulse.stamp),\n          out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  },\n\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  transform() {}\n});\n","import {hasOwnProperty} from 'vega-util';\n\nexport const transforms = {};\n\nexport function definition(type) {\n  const t = transform(type);\n  return t && t.Definition || null;\n}\n\nexport function transform(type) {\n  type = type && type.toLowerCase();\n  return hasOwnProperty(transforms, type) ? transforms[type] : null;\n}\n"],"names":["UniqueList","idFunc","$","identity","list","ids","add","_","id","push","remove","idx","indexOf","splice","df","callback","err","error","TUPLE_ID_KEY","Symbol","TUPLE_ID","isTuple","t","tupleid","setid","ingest","datum","Object","data","derive","rederive","d","k","replace","stableCompare","cmp","f","a","b","isChangeSet","v","constructor","changeset","rem","mod","remp","modp","clean","reflow","insert","array","n","length","i","isFunction","modify","field","value","m","constant","filter","tuple","encode","set","pulse","tuples","cur","out","forEach","modifies","slice","CACHE","Parameters","defineProperty","writable","prototype","name","index","force","o","isArray","modified","arguments","clear","OP_ID","PULSE","NO_PARAMS","SKIP","MODIFIED","Operator","init","update","params","react","stamp","rank","qrank","flags","_update","parameters","flag","bit","state","targets","_targets","skip","initonly","argval","_argval","argops","_argops","deps","op","source","Array","marshall","item","detach","evaluate","call","StopPropagation","run","rv","shift","connect","touch","target","sources","targetRank","rerank","STREAM_ID","EventStream","apply","receive","_filter","_apply","stream","truthy","consume","_consume","evt","val","trg","preventDefault","stopPropagation","s","merge","throttle","pause","now","Date","debounce","delay","e","dataflow","between","active","type","send","document","querySelectorAll","addEventListener","parse","format","locale","read","timeParse","utcParse","request","url","status","loader","load","context","response","responseType","warn","preload","pending","_pending","loadPending","requests","res","done","accept","Promise","options","fn","onOperator","onStream","opt","extend","func","undefined","updater","_rank","queue","pop","ADD","REM","MOD","ADD_REM","ADD_MOD","ALL","REFLOW","SOURCE","NO_SOURCE","NO_FIELDS","Pulse","fields","materialize","visitArray","map","visit","addFilter","fork","clone","p","addAll","reuse","src","addF","remF","modF","srcF","cleans","runAfter","changed","len","hash","nomod","some","visitor","sum","MultiPulse","pulses","c","changes","inherits","prerun","postrun","async","_pulse","reentrant","asyncCallback","_touched","debug","_clock","_enqueue","count","next","_heap","size","_getPulse","then","_input","_postrun","pr","sort","priority","all","cb","runAsync","_running","enqueue","q","getPulse","singlePulse","NO_OPT","Heap","nodes","peek","x","siftdown","last","siftup","start","parent","pidx","end","cidx","ridx","Dataflow","logger","logLevel","Error","_locale","defaultLocale","_loader","logMethod","method","_log","info","cleanThreshold","events","on","Transform","transform","transforms","definition","Definition","toLowerCase","hasOwnProperty"],"mappings":"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"}