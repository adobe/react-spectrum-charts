{"version":3,"file":"vega-selection.js","sources":["../src/util.js","../src/selectionTest.js","../src/selectionTuples.js","../src/selectionResolve.js","../src/selectionVisitor.js"],"sourcesContent":["import {field} from 'vega-util';\n\n// Registers vega-util field accessors to protect against XSS attacks\nconst SELECTION_GETTER = Symbol('vega_selection_getter');\nexport function getter(f) {\n  if (!f.getter || !f.getter[SELECTION_GETTER]) {\n    f.getter = field(f.field);\n    f.getter[SELECTION_GETTER] = true;\n  }\n\n  return f.getter;\n}\n\nexport const Intersect = 'intersect';\nexport const Union = 'union';\nexport const VlMulti = 'vlMulti';\nexport const VlPoint = 'vlPoint';\nexport const Or = 'or';\nexport const And = 'and';\n\nexport const SelectionId = '_vgsid_';\nexport const $selectionId = field(SelectionId);\n","import {bisector} from 'd3-array';\nimport {inrange, isArray, isDate, toNumber} from 'vega-util';\nimport {$selectionId, Intersect, getter} from './util.js';\n\nconst TYPE_ENUM = 'E',\n    TYPE_RANGE_INC = 'R',\n    TYPE_RANGE_EXC = 'R-E',\n    TYPE_RANGE_LE = 'R-LE',\n    TYPE_RANGE_RE = 'R-RE',\n    TYPE_PRED_LT = 'E-LT',\n    TYPE_PRED_LTE = 'E-LTE',\n    TYPE_PRED_GT = 'E-GT',\n    TYPE_PRED_GTE = 'E-GTE',\n    TYPE_PRED_VALID = 'E-VALID',\n    TYPE_PRED_ONE_OF = 'E-ONE',\n    UNIT_INDEX = 'index:unit';\n\n// TODO: revisit date coercion?\nfunction testPoint(datum, entry) {\n  var fields = entry.fields,\n      values = entry.values,\n      n = fields.length,\n      i = 0, dval, f;\n\n  for (; i<n; ++i) {\n    f = fields[i];\n    dval = getter(f)(datum);\n\n    if (isDate(dval)) dval = toNumber(dval);\n    if (isDate(values[i])) values[i] = toNumber(values[i]);\n    if (isArray(values[i]) && isDate(values[i][0])) values[i] = values[i].map(toNumber);\n\n    if (f.type === TYPE_ENUM) {\n      // Enumerated fields can either specify individual values (single/multi selections)\n      // or an array of values (interval selections).\n      if(isArray(values[i]) ? !values[i].includes(dval) : dval !== values[i]) {\n        return false;\n      }\n    } else {\n      if (f.type === TYPE_RANGE_INC) {\n        if (!inrange(dval, values[i])) return false;\n      } else if (f.type === TYPE_RANGE_RE) {\n        // Discrete selection of bins test within the range [bin_start, bin_end).\n        if (!inrange(dval, values[i], true, false)) return false;\n      } else if (f.type === TYPE_RANGE_EXC) { // 'R-E'/'R-LE' included for completeness.\n        if (!inrange(dval, values[i], false, false)) return false;\n      } else if (f.type === TYPE_RANGE_LE) {\n        if (!inrange(dval, values[i], false, true)) return false;\n      } else if (f.type === TYPE_PRED_LT) {\n        if (dval >= values[i]) return false;\n      } else if (f.type === TYPE_PRED_LTE) {\n        if (dval > values[i]) return false;\n      } else if (f.type === TYPE_PRED_GT) {\n        if (dval <= values[i]) return false;\n      } else if (f.type === TYPE_PRED_GTE) {\n        if (dval < values[i]) return false;\n      } else if (f.type === TYPE_PRED_VALID) {\n        if (dval === null || isNaN(dval)) return false;\n      } else if (f.type === TYPE_PRED_ONE_OF) {\n        if (values[i].indexOf(dval) === -1) return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if a tuple is contained within an interactive selection.\n * @param {string} name - The name of the data set representing the selection.\n *  Tuples in the dataset are of the form\n *  {unit: string, fields: array<fielddef>, values: array<*>}.\n *  Fielddef is of the form\n *  {field: string, channel: string, type: 'E' | 'R'} where\n *  'type' identifies whether tuples in the dataset enumerate\n *  values for the field, or specify a continuous range.\n * @param {object} datum - The tuple to test for inclusion.\n * @param {string} op - The set operation for combining selections.\n *   One of 'intersect' or 'union' (default).\n * @return {boolean} - True if the datum is in the selection, false otherwise.\n */\nexport function selectionTest(name, datum, op) {\n  var data = this.context.data[name],\n      entries = data ? data.values.value : [],\n      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n      intersect = op === Intersect,\n      n = entries.length,\n      i = 0,\n      entry, miss, count, unit, b;\n\n  for (; i<n; ++i) {\n    entry = entries[i];\n\n    if (unitIdx && intersect) {\n      // multi selections union within the same unit and intersect across units.\n      miss = miss || {};\n      count = miss[unit=entry.unit] || 0;\n\n      // if we've already matched this unit, skip.\n      if (count === -1) continue;\n\n      b = testPoint(datum, entry);\n      miss[unit] = b ? -1 : ++count;\n\n      // if we match and there are no other units return true\n      // if we've missed against all tuples in this unit return false\n      if (b && unitIdx.size === 1) return true;\n      if (!b && count === unitIdx.get(unit).count) return false;\n    } else {\n      b = testPoint(datum, entry);\n\n      // if we find a miss and we do require intersection return false\n      // if we find a match and we don't require intersection return true\n      if (intersect ^ b) return b;\n    }\n  }\n\n  // if intersecting and we made it here, then we saw no misses\n  // if not intersecting, then we saw no matches\n  // if no active selections, return false\n  return n && intersect;\n}\n\nconst bisect = bisector($selectionId),\n  bisectLeft = bisect.left,\n  bisectRight = bisect.right;\n\nexport function selectionIdTest(name, datum, op) {\n  const data = this.context.data[name],\n      entries = data ? data.values.value : [],\n      unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,\n      intersect = op === Intersect,\n      value = $selectionId(datum),\n      index = bisectLeft(entries, value);\n\n  if (index === entries.length) return false;\n  if ($selectionId(entries[index]) !== value) return false;\n\n  if (unitIdx && intersect) {\n    if (unitIdx.size === 1) return true;\n    if (bisectRight(entries, value) - index < unitIdx.size) return false;\n  }\n\n  return true;\n}\n","import {extend} from 'vega-util';\nimport {$selectionId, SelectionId, getter} from './util.js';\n\n/**\n * Maps an array of scene graph items to an array of selection tuples.\n * @param {string} name  - The name of the dataset representing the selection.\n * @param {string} base  - The base object that generated tuples extend.\n *\n * @returns {array} An array of selection entries for the given unit.\n */\nexport function selectionTuples(array, base) {\n  return array.map(x => extend(\n    base.fields ? {\n      values: base.fields.map(f => getter(f)(x.datum))\n    } : {\n      [SelectionId]: $selectionId(x.datum)\n    }, base));\n}\n","import {intersection, union} from 'd3-array';\nimport {array, toNumber} from 'vega-util';\nimport {$selectionId, And, Or, SelectionId, Union, VlMulti, VlPoint} from './util.js';\n\n/**\n * Resolves selection for use as a scale domain or reads via the API.\n * @param {string} name - The name of the dataset representing the selection\n * @param {string} [op='union'] - The set operation for combining selections.\n *                 One of 'intersect' or 'union' (default).\n * @param {boolean} isMulti - Identifies a \"multi\" selection to perform more\n *                 expensive resolution computation.\n * @param {boolean} vl5 - With Vega-Lite v5, \"multi\" selections are now called \"point\"\n *                 selections, and thus the resolved tuple should reflect this name.\n *                 This parameter allows us to reflect this change without triggering\n *                 a major version bump for Vega.\n * @returns {object} An object of selected fields and values.\n */\nexport function selectionResolve(name, op, isMulti, vl5) {\n  var data = this.context.data[name],\n    entries = data ? data.values.value : [],\n    resolved = {}, multiRes = {}, types = {},\n    entry, fields, values, unit, field, value, res, resUnit, type, union,\n    n = entries.length, i = 0, j, m;\n\n  // First union all entries within the same unit.\n  for (; i < n; ++i) {\n    entry = entries[i];\n    unit = entry.unit;\n    fields = entry.fields;\n    values = entry.values;\n\n    if (fields && values) { // Intentional selection stores\n      for (j = 0, m = fields.length; j < m; ++j) {\n        field = fields[j];\n        res = resolved[field.field] || (resolved[field.field] = {});\n        resUnit = res[unit] || (res[unit] = []);\n        types[field.field] = type = field.type.charAt(0);\n        union = ops[`${type}_union`];\n        res[unit] = union(resUnit, array(values[j]));\n      }\n\n      // If the same multi-selection is repeated over views and projected over\n      // an encoding, it may operate over different fields making it especially\n      // tricky to reliably resolve it. At best, we can de-dupe identical entries\n      // but doing so may be more computationally expensive than it is worth.\n      // Instead, for now, we simply transform our store representation into\n      // a more human-friendly one.\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push(array(values).reduce((obj, curr, j) => (obj[fields[j].field] = curr, obj), {}));\n      }\n    } else {  // Short circuit extensional selectionId stores which hold sorted IDs unique to each unit.\n      field = SelectionId;\n      value = $selectionId(entry);\n      res = resolved[field] || (resolved[field] = {});\n      resUnit = res[unit] || (res[unit] = []);\n      resUnit.push(value);\n\n      if (isMulti) {\n        resUnit = multiRes[unit] || (multiRes[unit] = []);\n        resUnit.push({[SelectionId]: value});\n      }\n    }\n  }\n\n  // Then resolve fields across units as per the op.\n  op = op || Union;\n  if (resolved[SelectionId]) {\n    resolved[SelectionId] = ops[`${SelectionId}_${op}`](...Object.values(resolved[SelectionId]));\n  } else {\n    Object.keys(resolved).forEach(field => {\n      resolved[field] = Object.keys(resolved[field])\n        .map(unit => resolved[field][unit])\n        .reduce((acc, curr) => acc === undefined ? curr : ops[`${types[field]}_${op}`](acc, curr));\n    });\n  }\n\n  entries = Object.keys(multiRes);\n  if (isMulti && entries.length) {\n    const key = vl5 ? VlPoint : VlMulti;\n    resolved[key] = op === Union\n      ? {[Or]: entries.reduce((acc, k) => (acc.push(...multiRes[k]), acc), [])}\n      : {[And]: entries.map(k => ({[Or]: multiRes[k]}))};\n  }\n\n  return resolved;\n}\n\nvar ops = {\n  [`${SelectionId}_union`]: union,\n  [`${SelectionId}_intersect`]: intersection,\n\n  E_union: function(base, value) {\n    if (!base.length) return value;\n\n    var i = 0, n = value.length;\n    for (; i<n; ++i) if (!base.includes(value[i])) base.push(value[i]);\n    return base;\n  },\n\n  E_intersect: function(base, value) {\n    return !base.length ? value :\n      base.filter(v => value.includes(v));\n  },\n\n  R_union: function(base, value) {\n    var lo = toNumber(value[0]), hi = toNumber(value[1]);\n    if (lo > hi) {\n      lo = value[1];\n      hi = value[0];\n    }\n\n    if (!base.length) return [lo, hi];\n    if (base[0] > lo) base[0] = lo;\n    if (base[1] < hi) base[1] = hi;\n    return base;\n  },\n\n  R_intersect: function(base, value) {\n    var lo = toNumber(value[0]), hi = toNumber(value[1]);\n    if (lo > hi) {\n      lo = value[1];\n      hi = value[0];\n    }\n\n    if (!base.length) return [lo, hi];\n    if (hi < base[0] || base[1] < lo) {\n      return [];\n    } else {\n      if (base[0] < lo) base[0] = lo;\n      if (base[1] > hi) base[1] = hi;\n    }\n    return base;\n  }\n};\n","import {Literal} from 'vega-expression';\nimport {error, hasOwnProperty, peek} from 'vega-util';\nimport {Intersect} from './util.js';\n\nconst DataPrefix = ':',\n      IndexPrefix = '@';\n\nexport function selectionVisitor(name, args, scope, params) {\n  if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');\n\n  const data = args[0].value,\n        op = args.length >= 2 && peek(args).value,\n        field = 'unit',\n        indexName = IndexPrefix + field,\n        dataName = DataPrefix + data;\n\n  if (op === Intersect && !hasOwnProperty(params, indexName)) {\n    params[indexName] = scope.getData(data).indataRef(scope, field);\n  }\n\n  if (!hasOwnProperty(params, dataName)) {\n    params[dataName] = scope.getData(data).tuplesRef();\n  }\n}\n"],"names":["SELECTION_GETTER","Symbol","getter","f","field","Intersect","Union","VlMulti","VlPoint","Or","And","SelectionId","$selectionId","TYPE_ENUM","TYPE_RANGE_INC","TYPE_RANGE_EXC","TYPE_RANGE_LE","TYPE_RANGE_RE","TYPE_PRED_LT","TYPE_PRED_LTE","TYPE_PRED_GT","TYPE_PRED_GTE","TYPE_PRED_VALID","TYPE_PRED_ONE_OF","UNIT_INDEX","testPoint","datum","entry","fields","values","n","length","i","dval","isDate","toNumber","isArray","map","type","includes","inrange","isNaN","indexOf","selectionTest","name","op","data","context","entries","value","unitIdx","undefined","intersect","miss","count","unit","b","size","get","bisect","bisector","bisectLeft","left","bisectRight","right","selectionIdTest","index","selectionTuples","array","base","x","extend","selectionResolve","isMulti","vl5","resolved","multiRes","types","res","resUnit","union","j","m","charAt","ops","push","reduce","obj","curr","Object","keys","forEach","acc","key","k","intersection","E_union","E_intersect","filter","v","R_union","lo","hi","R_intersect","DataPrefix","IndexPrefix","selectionVisitor","args","scope","params","Literal","error","peek","indexName","dataName","hasOwnProperty","getData","indataRef","tuplesRef"],"mappings":"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"}