{"version":3,"file":"vega-statistics.js","sources":["../src/numbers.js","../src/quantiles.js","../src/quartiles.js","../src/bandwidth.js","../src/bin.js","../src/random.js","../src/bootstrapCI.js","../src/dotbin.js","../src/lcg.js","../src/integer.js","../src/constants.js","../src/normal.js","../src/kde.js","../src/lognormal.js","../src/mixture.js","../src/uniform.js","../src/regression/constant.js","../src/regression/ols.js","../src/regression/points.js","../src/regression/r-squared.js","../src/regression/linear.js","../src/regression/log.js","../src/regression/exp.js","../src/regression/pow.js","../src/regression/quad.js","../src/regression/poly.js","../src/regression/loess.js","../src/sampleCurve.js"],"sourcesContent":["export default function*(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import numbers from './numbers.js';\nimport {ascending, quantileSorted} from 'd3-array';\n\nexport default function(array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n\n  return p.map(_ => quantileSorted(values, _));\n}\n","import quantiles from './quantiles.js';\n\nexport default function(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n","import quartiles from './quartiles.js';\nimport {deviation} from 'd3-array';\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nexport default function(array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n","export default function(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2];\n\n  let min  = _.extent[0],\n      max  = _.extent[1],\n      step, level, minstep, v, i, n;\n\n  const span = _.span || (max - min) || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i-1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span/step) > maxb) { step *= base; }\n\n    // decrease step size if allowed\n    for (i=0, n=div.length; i<n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop:  max === min ? min + step : max,\n    step:  step\n  };\n}\n","export var random = Math.random;\n\nexport function setRandom(r) {\n  random = r;\n}\n","import numbers from './numbers.js';\nimport {random} from './random.js';\nimport {ascending, quantile} from 'd3-array';\n\nexport default function(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j=0, mu=Array(m); j<m; ++j) {\n    for (a=0, i=0; i<n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n\n  return [\n    quantile(mu, alpha/2),\n    quantile(mu, 1-(alpha/2))\n  ];\n}\n","// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nexport default function(array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n\n  let i = 0, j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j<n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i<j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n\n  b = (a + b) / 2;\n  for (; i<j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c, d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b-1] < thresh) {\n      d = b + ((a + c - b - b) >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n","export default function(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function() {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n","import {random} from './random.js';\n\nexport default function(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n\n  return dist.min(min).max(max);\n}\n","export const SQRT2PI = Math.sqrt(2 * Math.PI);\nexport const SQRT2 = Math.SQRT2;","import {SQRT2, SQRT2PI} from './constants.js';\nimport {random} from './random.js';\n\nlet nextSample = NaN;\n\nexport function sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  let x = 0, y = 0, rds, c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\n\nexport function densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nexport function cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nexport function quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = - Math.log((1 - x) * (1 + x)), p;\n\n  if (w < 6.25) {\n      w -= 3.125;\n      p =  -3.6444120640178196996e-21;\n      p =   -1.685059138182016589e-19 + p * w;\n      p =   1.2858480715256400167e-18 + p * w;\n      p =    1.115787767802518096e-17 + p * w;\n      p =   -1.333171662854620906e-16 + p * w;\n      p =   2.0972767875968561637e-17 + p * w;\n      p =   6.6376381343583238325e-15 + p * w;\n      p =  -4.0545662729752068639e-14 + p * w;\n      p =  -8.1519341976054721522e-14 + p * w;\n      p =   2.6335093153082322977e-12 + p * w;\n      p =  -1.2975133253453532498e-11 + p * w;\n      p =  -5.4154120542946279317e-11 + p * w;\n      p =    1.051212273321532285e-09 + p * w;\n      p =  -4.1126339803469836976e-09 + p * w;\n      p =  -2.9070369957882005086e-08 + p * w;\n      p =   4.2347877827932403518e-07 + p * w;\n      p =  -1.3654692000834678645e-06 + p * w;\n      p =  -1.3882523362786468719e-05 + p * w;\n      p =    0.0001867342080340571352 + p * w;\n      p =  -0.00074070253416626697512 + p * w;\n      p =   -0.0060336708714301490533 + p * w;\n      p =      0.24015818242558961693 + p * w;\n      p =       1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p =   2.2137376921775787049e-09;\n      p =   9.0756561938885390979e-08 + p * w;\n      p =  -2.7517406297064545428e-07 + p * w;\n      p =   1.8239629214389227755e-08 + p * w;\n      p =   1.5027403968909827627e-06 + p * w;\n      p =   -4.013867526981545969e-06 + p * w;\n      p =   2.9234449089955446044e-06 + p * w;\n      p =   1.2475304481671778723e-05 + p * w;\n      p =  -4.7318229009055733981e-05 + p * w;\n      p =   6.8284851459573175448e-05 + p * w;\n      p =   2.4031110387097893999e-05 + p * w;\n      p =   -0.0003550375203628474796 + p * w;\n      p =   0.00095328937973738049703 + p * w;\n      p =   -0.0016882755560235047313 + p * w;\n      p =    0.0024914420961078508066 + p * w;\n      p =   -0.0037512085075692412107 + p * w;\n      p =     0.005370914553590063617 + p * w;\n      p =       1.0052589676941592334 + p * w;\n      p =       3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p =  -2.7109920616438573243e-11;\n      p =  -2.5556418169965252055e-10 + p * w;\n      p =   1.5076572693500548083e-09 + p * w;\n      p =  -3.7894654401267369937e-09 + p * w;\n      p =   7.6157012080783393804e-09 + p * w;\n      p =  -1.4960026627149240478e-08 + p * w;\n      p =   2.9147953450901080826e-08 + p * w;\n      p =  -6.7711997758452339498e-08 + p * w;\n      p =   2.2900482228026654717e-07 + p * w;\n      p =  -9.9298272942317002539e-07 + p * w;\n      p =   4.5260625972231537039e-06 + p * w;\n      p =  -1.9681778105531670567e-05 + p * w;\n      p =   7.5995277030017761139e-05 + p * w;\n      p =  -0.00021503011930044477347 + p * w;\n      p =  -0.00013871931833623122026 + p * w;\n      p =       1.0103004648645343977 + p * w;\n      p =       4.8499064014085844221 + p * w;\n  } else {\n      p = Infinity;\n  }\n\n  return p * x;\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import estimateBandwidth from './bandwidth.js';\nimport gaussian from './normal.js';\nimport {random} from './random.js';\n\nexport default function(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n\n  return dist.data(support);\n}\n","import {cumulativeNormal, quantileNormal, sampleNormal} from './normal.js';\nimport {SQRT2PI} from './constants.js';\n\nexport function sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\n\nexport function densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\n\nexport function cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\n\nexport function quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {random} from './random.js';\n\nexport default function(dists, weights) {\n  let m = 0, w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0, i;\n    for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n    for (i = 0; i < m; ++i) { w[i] /= sum; }\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n\n  return dist.distributions(dists).weights(weights);\n}\n","import {random} from './random.js';\n\nexport function sampleUniform(min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\n\nexport function densityUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (value >= min && value <= max) ? 1 / (max - min) : 0;\n}\n\nexport function cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\n\nexport function quantileUniform(p, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n}\n\nexport default function(min, max) {\n  let a, b;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\n","export default function(data, x, y) {\n  let mean = 0, n = 0;\n\n  for (const d of data) {\n    const val = y(d);\n    if (x(d) == null || val == null || isNaN(val)) continue;\n    mean += (val - mean) / ++n;\n  }\n\n  return {\n    coef: [mean],\n    predict: () => mean,\n    rSquared: 0\n  };\n}\n","// Ordinary Least Squares\nexport default function(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n\n  return [intercept, slope];\n}\n","export function points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d), v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0, ux = 0, uy = 0, xv, yv, d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i=0; i<n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\n\nexport function visitPoints(data, x, y, callback) {\n  let i = -1, u, v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n","import {visitPoints} from './points.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y, uY, predict) {\n  let SSE = 0, SST = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n\n  return 1 - SSE / SST;\n}\n","import ols from './ols.js';\nimport {visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import ols from './ols.js';\nimport {visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import ols from './ols.js';\nimport {points, visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import ols from './ols.js';\nimport {visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}","import {points} from './points.js';\nimport rSquared from './r-squared.js';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n\n  let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n      i, dx, dy, x2;\n\n  for (i=0; i<n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - (X2 * X2),\n        d = (X2 * X2X2 - X3 * X3),\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n          x = x - ux;\n          return a * x * x + b * x + c + uy;\n        };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [\n      c - b * ux + a * ux * ux + uy,\n      b - 2 * a * ux,\n      a\n    ],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import constant from './constant.js';\nimport linear from './linear.js';\nimport {points} from './points.js';\nimport quad from './quad.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nexport default function(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 0) return constant(data, x, y);\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n  let i, j, l, v, c;\n\n  for (i=0; i<k; ++i) {\n    for (l=0, v=0; l<n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n\n    c = new Float64Array(k);\n    for (j=0; j<k; ++j) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n          x -= ux;\n          let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n          for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n          return y;\n        };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i=0; i<k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i=k-1; i>=0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j=1; j<=i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}","import ols from './ols.js';\nimport {points} from './points.js';\nimport {median} from 'd3-array';\n\nconst maxiters = 2,\n      epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nexport default function(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n        yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters; ) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n      let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i){\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}\n","// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nexport default function(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + (i / minSteps) * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + (i / minSteps) * span));\n    }\n  }\n\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n\n  const n = points.length;\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  return 1 / (ymax - ymin);\n}\n\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n        a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n"],"names":["values","valueof","value","index","array","p","f","Float64Array","from","numbers","sort","ascending","map","_","quantileSorted","quantiles","n","length","d","deviation","q","quartiles","h","v","Math","min","abs","pow","maxb","maxbins","base","logb","log","div","divide","extent","max","step","level","minstep","i","span","steps","ceil","round","precision","eps","nice","undefined","floor","start","stop","random","setRandom","r","samples","alpha","m","a","j","mu","Array","quantile","smooth","b","w","x","smoothing","thresh","c","seed","dist","arguments","sample","pdf","cdf","icdf","NaN","SQRT2PI","sqrt","PI","SQRT2","nextSample","sampleNormal","mean","stdev","y","rds","densityNormal","z","exp","cumulativeNormal","Z","cd","sum","quantileNormal","erfinv","Number","isFinite","Infinity","sigma","support","bandwidth","kernel","gaussian","data","estimateBandwidth","Error","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","dists","weights","normalize","distributions","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","val","isNaN","coef","predict","rSquared","uX","uY","uXY","uX2","delta","slope","intercept","points","filter","u","X","Y","ux","uy","xv","yv","visitPoints","callback","SSE","SST","dx","dy","sse","sst","XY","X2","ols","YL","XYL","X2Y","ly","xy","c0","c1","YS","lx","X3","X4","x2","X2X2","order","constant","linear","quad","lhs","rhs","k","l","push","gaussianElimination","uncenter","matrix","t","maxiters","epsilon","bw","yhat","residuals","robustWeights","fill","iter","interval","i0","i1","edge","W","denom","xk","yk","tricube","xkw","updateInterval","medianResidual","median","arg","output","left","right","out","cnt","prev","MIN_RADIANS","minSteps","maxSteps","point","minX","maxX","next","p0","p1","sx","sy","scaleY","pm","angleDelta","pop","init","ymin","ymax","a0","atan2","a1"],"mappings":"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"}