{"version":3,"file":"vega-hierarchy.js","sources":["../src/lookup.js","../src/Nest.js","../src/HierarchyLayout.js","../src/Pack.js","../src/Partition.js","../src/Stratify.js","../src/Tree.js","../src/TreeLinks.js","../src/Treemap.js"],"sourcesContent":["// Build lookup table mapping tuple keys to tree node instances\nexport default function(tree, key, filter) {\n  const map = {};\n  tree.each(node => {\n    const t = node.data;\n    if (filter(t)) map[key(t)] = node;\n  });\n  tree.lookup = map;\n  return tree;\n}\n","import lookup from './lookup.js';\nimport {Transform, ingest, isTuple, tupleid} from 'vega-dataflow';\nimport {array, error, inherits} from 'vega-util';\nimport {hierarchy} from 'd3-hierarchy';\n\n /**\n  * Nest tuples into a tree structure, grouped by key values.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n  * @param {boolean} [params.generate=false] - A boolean flag indicating if\n  *   non-leaf nodes generated by this transform should be included in the\n  *   output. The default (false) includes only the input data (leaf nodes)\n  *   in the data stream.\n  */\nexport default function Nest(params) {\n  Transform.call(this, null, params);\n}\n\nNest.Definition = {\n  'type': 'Nest',\n  'metadata': {'treesource': true, 'changes': true},\n  'params': [\n    { 'name': 'keys', 'type': 'field', 'array': true },\n    { 'name': 'generate', 'type': 'boolean' }\n  ]\n};\n\nconst children = n => n.values;\n\ninherits(Nest, Transform, {\n  transform(_, pulse) {\n    if (!pulse.source) {\n      error('Nest transform requires an upstream data source.');\n    }\n\n    var gen = _.generate,\n        mod = _.modified(),\n        out = pulse.clone(),\n        tree = this.value;\n\n    if (!tree || mod || pulse.changed()) {\n      // collect nodes to remove\n      if (tree) {\n        tree.each(node => {\n          if (node.children && isTuple(node.data)) {\n            out.rem.push(node.data);\n          }\n        });\n      }\n\n      // generate new tree structure\n      this.value = tree = hierarchy({\n        values: array(_.keys)\n          .reduce((n, k) => { n.key(k); return n; }, nest())\n          .entries(out.source)\n      }, children);\n\n      // collect nodes to add\n      if (gen) {\n        tree.each(node => {\n          if (node.children) {\n            node = ingest(node.data);\n            out.add.push(node);\n            out.source.push(node);\n          }\n        });\n      }\n\n      // build lookup table\n      lookup(tree, tupleid, tupleid);\n    }\n\n    out.source.root = tree;\n    return out;\n  }\n});\n\nfunction nest() {\n  const keys = [],\n        nest = {\n          entries: array => entries(apply(array, 0), 0),\n          key: d => (keys.push(d), nest)\n        };\n\n  function apply(array, depth) {\n    if (depth >= keys.length) {\n      return array;\n    }\n\n    const n = array.length,\n          key = keys[depth++],\n          valuesByKey = {},\n          result = {};\n\n    let i = -1, keyValue, value, values;\n\n    while (++i < n) {\n      keyValue = key(value = array[i]) + '';\n      if (values = valuesByKey[keyValue]) {\n        values.push(value);\n      } else {\n        valuesByKey[keyValue] = [value];\n      }\n    }\n\n    for (keyValue in valuesByKey) {\n      result[keyValue] = apply(valuesByKey[keyValue], depth);\n    }\n\n    return result;\n  }\n\n  function entries(map, depth) {\n    if (++depth > keys.length) return map;\n    const array = [];\n    for (const key in map) {\n      array.push({\n        key,\n        values: entries(map[key], depth)\n      });\n    }\n    return array;\n  }\n\n  return nest;\n}\n","import {Transform, stableCompare} from 'vega-dataflow';\nimport {error, inherits, one} from 'vega-util';\n\n/**\n * Abstract class for tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function HierarchyLayout(params) {\n  Transform.call(this, null, params);\n}\n\nconst defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n\ninherits(HierarchyLayout, Transform, {\n  transform(_, pulse) {\n    if (!pulse.source || !pulse.source.root) {\n      error(this.constructor.name\n        + ' transform requires a backing tree data source.');\n    }\n\n    const layout = this.layout(_.method),\n          fields = this.fields,\n          root = pulse.source.root,\n          as = _.as || fields;\n\n    if (_.field) root.sum(_.field); else root.count();\n    if (_.sort) root.sort(stableCompare(_.sort, d => d.data));\n\n    setParams(layout, this.params, _);\n    if (layout.separation) {\n      layout.separation(_.separation !== false ? defaultSeparation : one);\n    }\n\n    try {\n      this.value = layout(root);\n    } catch (err) {\n      error(err);\n    }\n    root.each(node => setFields(node, fields, as));\n\n    return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n  }\n});\n\nfunction setParams(layout, params, _) {\n  for (let p, i=0, n=params.length; i<n; ++i) {\n    p = params[i];\n    if (p in _) layout[p](_[p]);\n  }\n}\n\nfunction setFields(node, fields, as) {\n  const t = node.data,\n        n = fields.length - 1;\n  for (let i=0; i<n; ++i) {\n    t[as[i]] = node[fields[i]];\n  }\n  t[as[n]] = node.children ? node.children.length : 0;\n}\n","import HierarchyLayout from './HierarchyLayout.js';\nimport {inherits} from 'vega-util';\nimport {pack} from 'd3-hierarchy';\n\nconst Output = ['x', 'y', 'r', 'depth', 'children'];\n\n/**\n * Packed circle tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Pack(params) {\n  HierarchyLayout.call(this, params);\n}\n\nPack.Definition = {\n  'type': 'Pack',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'padding', 'type': 'number', 'default': 0 },\n    { 'name': 'radius', 'type': 'field', 'default': null },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Pack, HierarchyLayout, {\n  layout: pack,\n  params: ['radius', 'size', 'padding'],\n  fields: Output\n});\n","import HierarchyLayout from './HierarchyLayout.js';\nimport {inherits} from 'vega-util';\nimport {partition} from 'd3-hierarchy';\n\nconst Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n/**\n * Partition tree layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Partition(params) {\n  HierarchyLayout.call(this, params);\n}\n\nPartition.Definition = {\n  'type': 'Partition',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'padding', 'type': 'number', 'default': 0 },\n    { 'name': 'round', 'type': 'boolean', 'default': false },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Partition, HierarchyLayout, {\n  layout: partition,\n  params: ['size', 'round', 'padding'],\n  fields: Output\n});\n","import lookup from './lookup.js';\nimport {Transform} from 'vega-dataflow';\nimport {error, inherits, truthy} from 'vega-util';\nimport {stratify} from 'd3-hierarchy';\n\n /**\n  * Stratify a collection of tuples into a tree structure based on\n  * id and parent id fields.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  * @param {function(object): *} params.key - Unique key field for each tuple.\n  * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n  */\nexport default function Stratify(params) {\n  Transform.call(this, null, params);\n}\n\nStratify.Definition = {\n  'type': 'Stratify',\n  'metadata': {'treesource': true},\n  'params': [\n    { 'name': 'key', 'type': 'field', 'required': true },\n    { 'name': 'parentKey', 'type': 'field', 'required': true  }\n  ]\n};\n\ninherits(Stratify, Transform, {\n  transform(_, pulse) {\n    if (!pulse.source) {\n      error('Stratify transform requires an upstream data source.');\n    }\n\n    let tree = this.value;\n\n    const mod = _.modified(),\n          out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n          run = !tree\n            || mod\n            || pulse.changed(pulse.ADD_REM)\n            || pulse.modified(_.key.fields)\n            || pulse.modified(_.parentKey.fields);\n\n    // prevent upstream source pollution\n    out.source = out.source.slice();\n\n    if (run) {\n      tree = out.source.length\n        ? lookup(\n            stratify().id(_.key).parentId(_.parentKey)(out.source),\n            _.key,\n            truthy\n          )\n        : lookup(stratify()([{}]), _.key, _.key);\n    }\n\n    out.source.root = this.value = tree;\n    return out;\n  }\n});\n","import HierarchyLayout from './HierarchyLayout.js';\nimport {error, hasOwnProperty, inherits} from 'vega-util';\nimport {cluster, tree} from 'd3-hierarchy';\n\nconst Layouts = {\n  tidy: tree,\n  cluster: cluster\n};\n\nconst Output = ['x', 'y', 'depth', 'children'];\n\n/**\n * Tree layout. Depending on the method parameter, performs either\n * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Tree(params) {\n  HierarchyLayout.call(this, params);\n}\n\nTree.Definition = {\n  'type': 'Tree',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'method', 'type': 'enum', 'default': 'tidy', 'values': ['tidy', 'cluster'] },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'nodeSize', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'separation', 'type': 'boolean', 'default': true },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Tree, HierarchyLayout, {\n  /**\n   * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n   */\n  layout(method) {\n    const m = method || 'tidy';\n    if (hasOwnProperty(Layouts, m)) return Layouts[m]();\n    else error('Unrecognized Tree layout method: ' + m);\n  },\n  params: ['size', 'nodeSize'],\n  fields: Output\n});\n","import {Transform, ingest, tupleid} from 'vega-dataflow';\nimport {error, inherits} from 'vega-util';\n\n /**\n  * Generate tuples representing links between tree nodes.\n  * The resulting tuples will contain 'source' and 'target' fields,\n  * which point to parent and child node tuples, respectively.\n  * @constructor\n  * @param {object} params - The parameters for this operator.\n  */\nexport default function TreeLinks(params) {\n  Transform.call(this, [], params);\n}\n\nTreeLinks.Definition = {\n  'type': 'TreeLinks',\n  'metadata': {'tree': true, 'generates': true, 'changes': true},\n  'params': []\n};\n\ninherits(TreeLinks, Transform, {\n  transform(_, pulse) {\n    const links = this.value,\n          tree = pulse.source && pulse.source.root,\n          out = pulse.fork(pulse.NO_SOURCE),\n          lut = {};\n\n    if (!tree) error('TreeLinks transform requires a tree data source.');\n\n    if (pulse.changed(pulse.ADD_REM)) {\n      // remove previous links\n      out.rem = links;\n\n      // build lookup table of valid tuples\n      pulse.visit(pulse.SOURCE, t => lut[tupleid(t)] = 1);\n\n      // generate links for all edges incident on valid tuples\n      tree.each(node => {\n        const t = node.data,\n              p = node.parent && node.parent.data;\n        if (p && lut[tupleid(t)] && lut[tupleid(p)]) {\n          out.add.push(ingest({source: p, target: t}));\n        }\n      });\n      this.value = out.add;\n    }\n\n    else if (pulse.changed(pulse.MOD)) {\n      // build lookup table of modified tuples\n      pulse.visit(pulse.MOD, t => lut[tupleid(t)] = 1);\n\n      // gather links incident on modified tuples\n      links.forEach(link => {\n        if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {\n          out.mod.push(link);\n        }\n      });\n    }\n\n    return out;\n  }\n});\n","import HierarchyLayout from './HierarchyLayout.js';\nimport {error, hasOwnProperty, inherits} from 'vega-util';\nimport {\n  treemap,\n  treemapBinary,\n  treemapDice,\n  treemapResquarify,\n  treemapSlice,\n  treemapSliceDice,\n  treemapSquarify\n} from 'd3-hierarchy';\n\nconst Tiles = {\n  binary: treemapBinary,\n  dice: treemapDice,\n  slice: treemapSlice,\n  slicedice: treemapSliceDice,\n  squarify: treemapSquarify,\n  resquarify: treemapResquarify\n};\n\nconst Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n\n/**\n * Treemap layout.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to size nodes.\n */\nexport default function Treemap(params) {\n  HierarchyLayout.call(this, params);\n}\n\nTreemap.Definition = {\n  'type': 'Treemap',\n  'metadata': {'tree': true, 'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'method', 'type': 'enum', 'default': 'squarify',\n      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice'] },\n    { 'name': 'padding', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingInner', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingOuter', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingTop', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingRight', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingBottom', 'type': 'number', 'default': 0 },\n    { 'name': 'paddingLeft', 'type': 'number', 'default': 0 },\n    { 'name': 'ratio', 'type': 'number', 'default': 1.618033988749895 },\n    { 'name': 'round', 'type': 'boolean', 'default': false },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': Output.length, 'default': Output }\n  ]\n};\n\ninherits(Treemap, HierarchyLayout, {\n  /**\n   * Treemap layout generator. Adds 'method' and 'ratio' parameters\n   * to configure the underlying tile method.\n   */\n  layout() {\n    const x = treemap();\n\n    x.ratio = _ => {\n      const t = x.tile();\n      if (t.ratio) x.tile(t.ratio(_));\n    };\n\n    x.method = _ => {\n      if (hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);\n      else error('Unrecognized Treemap layout method: ' + _);\n    };\n\n    return x;\n  },\n\n  params: [\n    'method', 'ratio', 'size', 'round',\n    'padding', 'paddingInner', 'paddingOuter',\n    'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'\n  ],\n\n  fields: Output\n});\n"],"names":["tree","key","filter","map","each","node","t","data","lookup","Nest","params","Transform","call","Definition","children","n","values","inherits","transform","_","pulse","source","error","gen","generate","mod","modified","out","clone","value","changed","isTuple","rem","push","hierarchy","array","keys","reduce","k","nest","entries","ingest","add","tupleid","root","apply","d","depth","length","valuesByKey","result","i","keyValue","HierarchyLayout","defaultSeparation","a","b","parent","constructor","name","layout","method","fields","as","field","sum","count","sort","stableCompare","setParams","separation","one","err","setFields","reflow","modifies","p","Output","Pack","pack","Partition","partition","Stratify","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","slice","stratify","id","parentId","truthy","Layouts","tidy","cluster","Tree","m","hasOwnProperty","TreeLinks","links","NO_SOURCE","lut","visit","target","MOD","forEach","link","Tiles","binary","treemapBinary","dice","treemapDice","treemapSlice","slicedice","treemapSliceDice","squarify","treemapSquarify","resquarify","treemapResquarify","Treemap","x","treemap","ratio","tile"],"mappings":"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"}