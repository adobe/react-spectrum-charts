{"version":3,"file":"vega-scale.js","sources":["../src/scales/bandSpace.js","../src/scales/types.js","../src/scales/invertRange.js","../src/scales/invertRangeExtent.js","../src/scales/scaleBand.js","../src/scales/numbers.js","../src/scales/slice.js","../src/scales/scaleBinOrdinal.js","../src/scales.js","../src/interpolate.js","../src/palettes.js","../src/schemes.js","../src/legend-types.js","../src/ticks.js","../src/labels.js","../src/caption.js"],"sourcesContent":["export default function(count, paddingInner, paddingOuter) {\n  const space = count - paddingInner + paddingOuter * 2;\n  return count ? (space > 0 ? space : 1) : 0;\n}\n","export const Identity = 'identity';\n\nexport const Linear = 'linear';\nexport const Log = 'log';\nexport const Pow = 'pow';\nexport const Sqrt = 'sqrt';\nexport const Symlog = 'symlog';\n\nexport const Time = 'time';\nexport const UTC = 'utc';\n\nexport const Sequential = 'sequential';\nexport const Diverging = 'diverging';\n\nexport const Quantile = 'quantile';\nexport const Quantize = 'quantize';\nexport const Threshold = 'threshold';\n\nexport const Ordinal = 'ordinal';\nexport const Point = 'point';\nexport const Band = 'band';\nexport const BinOrdinal = 'bin-ordinal';\n\n// categories\nexport const Continuous = 'continuous';\nexport const Discrete = 'discrete';\nexport const Discretizing = 'discretizing';\nexport const Interpolating = 'interpolating';\nexport const Temporal = 'temporal';\n","export default function(scale) {\n  return function(_) {\n    let lo = _[0],\n        hi = _[1],\n        t;\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    return [\n      scale.invert(lo),\n      scale.invert(hi)\n    ];\n  };\n}\n","export default function(scale) {\n  return function(_) {\n    const range = scale.range();\n    let lo = _[0],\n        hi = _[1],\n        min = -1, max, t, i, n;\n\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n\n    for (i=0, n=range.length; i<n; ++i) {\n      if (range[i] >= lo && range[i] <= hi) {\n        if (min < 0) min = i;\n        max = i;\n      }\n    }\n\n    if (min < 0) return undefined;\n\n    lo = scale.invertExtent(range[min]);\n    hi = scale.invertExtent(range[max]);\n\n    return [\n      lo[0] === undefined ? lo[1] : lo[0],\n      hi[1] === undefined ? hi[0] : hi[1]\n    ];\n  };\n}\n","import bandSpace from './bandSpace.js';\nimport {bisectRight, range as sequence} from 'd3-array';\nimport {scaleOrdinal as ordinal} from 'd3-scale';\n\nexport function band() {\n  const scale = ordinal().unknown(undefined),\n        domain = scale.domain,\n        ordinalRange = scale.range;\n  let range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    const n = domain().length,\n          reverse = range[1] < range[0],\n          stop = range[1 - reverse],\n          space = bandSpace(n, paddingInner, paddingOuter);\n\n    let start = range[reverse - 0];\n\n    step = (stop - start) / (space || 1);\n    if (round) {\n      step = Math.floor(step);\n    }\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) {\n      start = Math.round(start);\n      bandwidth = Math.round(bandwidth);\n    }\n    const values = sequence(n).map(i => start + step * i);\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    if (arguments.length) {\n      domain(_);\n      return rescale();\n    } else {\n      return domain();\n    }\n  };\n\n  scale.range = function(_) {\n    if (arguments.length) {\n      range = [+_[0], +_[1]];\n      return rescale();\n    } else {\n      return range.slice();\n    }\n  };\n\n  scale.rangeRound = function(_) {\n    range = [+_[0], +_[1]];\n    round = true;\n    return rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    if (arguments.length) {\n      round = !!_;\n      return rescale();\n    } else {\n      return round;\n    }\n  };\n\n  scale.padding = function(_) {\n    if (arguments.length) {\n      paddingOuter = Math.max(0, Math.min(1, _));\n      paddingInner = paddingOuter;\n      return rescale();\n    } else {\n      return paddingInner;\n    }\n  };\n\n  scale.paddingInner = function(_) {\n    if (arguments.length) {\n      paddingInner = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return paddingInner;\n    }\n  };\n\n  scale.paddingOuter = function(_) {\n    if (arguments.length) {\n      paddingOuter = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return paddingOuter;\n    }\n  };\n\n  scale.align = function(_) {\n    if (arguments.length) {\n      align = Math.max(0, Math.min(1, _));\n      return rescale();\n    } else {\n      return align;\n    }\n  };\n\n  scale.invertRange = function(_) {\n    // bail if range has null or undefined values\n    if (_[0] == null || _[1] == null) return;\n\n    const reverse = range[1] < range[0],\n          values = reverse ? ordinalRange().reverse() : ordinalRange(),\n          n = values.length - 1;\n\n    let lo = +_[0],\n        hi = +_[1],\n        a, b, t;\n\n    // bail if either range endpoint is invalid\n    if (lo !== lo || hi !== hi) return;\n\n    // order range inputs, bail if outside of scale range\n    if (hi < lo) {\n      t = lo;\n      lo = hi;\n      hi = t;\n    }\n    if (hi < values[0] || lo > range[1-reverse]) return;\n\n    // binary search to index into scale range\n    a = Math.max(0, bisectRight(values, lo) - 1);\n    b = lo===hi ? a : bisectRight(values, hi) - 1;\n\n    // increment index a if lo is within padding gap\n    if (lo - values[a] > bandwidth + 1e-10) ++a;\n\n    if (reverse) {\n      // map + swap\n      t = a;\n      a = n - b;\n      b = n - t;\n    }\n    return (a > b) ? undefined : domain().slice(a, b+1);\n  };\n\n  scale.invert = function(_) {\n    const value = scale.invertRange([_, _]);\n    return value ? value[0] : value;\n  };\n\n  scale.copy = function() {\n    return band()\n        .domain(domain())\n        .range(range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return rescale();\n}\n\nfunction pointish(scale) {\n  const copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band().paddingInner(1));\n}\n","import {toNumber} from 'vega-util';\n\nvar map = Array.prototype.map;\n\nexport function numbers(_) {\n  return map.call(_, toNumber);\n}\n","export const slice = Array.prototype.slice;\n","import {bisect} from 'd3-array';\nimport {tickFormat} from 'd3-scale';\nimport {peek} from 'vega-util';\nimport {numbers} from './numbers.js';\nimport {slice} from './slice.js';\n\nexport function scaleBinOrdinal() {\n  let domain = [],\n      range = [];\n\n  function scale(x) {\n    return x == null || x !== x\n      ? undefined\n      : range[(bisect(domain, x) - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (arguments.length) {\n      domain = numbers(_);\n      return scale;\n    } else {\n      return domain.slice();\n    }\n  };\n\n  scale.range = function(_) {\n    if (arguments.length) {\n      range = slice.call(_);\n      return scale;\n    } else {\n      return range.slice();\n    }\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return tickFormat(domain[0], peek(domain), count == null ? 10 : count, specifier);\n  };\n\n  scale.copy = function() {\n    return scaleBinOrdinal().domain(scale.domain()).range(scale.range());\n  };\n\n  return scale;\n}","import { array, toSet } from 'vega-util';\nimport invertRange from './scales/invertRange.js';\nimport invertRangeExtent from './scales/invertRangeExtent.js';\n\nimport {\n  Band,\n  BinOrdinal, Continuous as C, Discrete as D, Diverging, Interpolating as I,\n  Identity, Linear, Log, Ordinal,\n  Point, Pow, Quantile,\n  Quantize, Sequential, Sqrt, Symlog,\n  Temporal as T,\n  Threshold,\n  Time,\n  UTC,\n  Discretizing as Z\n} from './scales/types.js';\n\nimport {\n  band as scaleBand,\n  point as scalePoint\n} from './scales/scaleBand.js';\n\nimport {\n  scaleBinOrdinal\n} from './scales/scaleBinOrdinal.js';\n\nimport * as $ from 'd3-scale';\n\n/** Private scale registry: should not be exported */\nconst scales = new Map();\n\nconst VEGA_SCALE = Symbol('vega_scale');\n\nexport function registerScale(scale) {\n  scale[VEGA_SCALE] = true;\n  return scale;\n}\n\n/**\n * Return true if object was created by a constructor from the vega-scale `scale` function.\n */\nexport function isRegisteredScale(scale) {\n  return scale && scale[VEGA_SCALE] === true;\n}\n\n/**\n * Augment scales with their type and needed inverse methods.\n */\nfunction create(type, constructor, metadata) {\n  const ctr = function scale() {\n    const s = constructor();\n\n    if (!s.invertRange) {\n      s.invertRange = s.invert ? invertRange(s)\n        : s.invertExtent ? invertRangeExtent(s)\n        : undefined;\n    }\n\n    s.type = type;\n    return registerScale(s);\n  };\n\n  ctr.metadata = toSet(array(metadata));\n\n  return ctr;\n}\n\n/**\n * Registry function for adding and accessing scale constructor functions.\n * The *type* argument is a String indicating the name of the scale type.\n *\n * If the *scale* argument is not specified, this method returns the matching scale constructor in the registry, or `null` if not found.\n * If the *scale* argument is provided, it must be a scale constructor function to add to the registry under the given *type* name.\n * The *metadata* argument provides additional information to guide appropriate use of scales within Vega.\n *\n *  *metadata* can be either a string or string array. The valid string values are:\n * - `\"continuous\"` - the scale is defined over a continuous-valued domain.\n * - `\"discrete\"` - the scale is defined over a discrete domain and range.\n * - `\"discretizing\"` - the scale discretizes a continuous domain to a discrete range.\n * - `\"interpolating\"` - the scale range is defined using a color interpolator.\n * - `\"log\"` - the scale performs a logarithmic transform of the continuous domain.\n * - `\"temporal\"` - the scale domain is defined over date-time values.\n */\nexport function scale(type, scale, metadata) {\n  if (arguments.length > 1) {\n    scales.set(type, create(type, scale, metadata));\n    return this;\n  } else {\n    return isValidScaleType(type) ? scales.get(type) : undefined;\n  }\n}\n\n// identity scale\nscale(Identity, $.scaleIdentity);\n\n// continuous scales\nscale(Linear, $.scaleLinear, C);\nscale(Log, $.scaleLog, [C, Log]);\nscale(Pow, $.scalePow, C);\nscale(Sqrt, $.scaleSqrt, C);\nscale(Symlog, $.scaleSymlog, C);\nscale(Time, $.scaleTime, [C, T]);\nscale(UTC, $.scaleUtc, [C, T]);\n\n// sequential scales\nscale(Sequential, $.scaleSequential, [C, I]); // backwards compat\nscale(`${Sequential}-${Linear}`, $.scaleSequential, [C, I]);\nscale(`${Sequential}-${Log}`, $.scaleSequentialLog, [C, I, Log]);\nscale(`${Sequential}-${Pow}`, $.scaleSequentialPow, [C, I]);\nscale(`${Sequential}-${Sqrt}`, $.scaleSequentialSqrt, [C, I]);\nscale(`${Sequential}-${Symlog}`, $.scaleSequentialSymlog, [C, I]);\n\n// diverging scales\nscale(`${Diverging}-${Linear}`, $.scaleDiverging, [C, I]);\nscale(`${Diverging}-${Log}`, $.scaleDivergingLog, [C, I, Log]);\nscale(`${Diverging}-${Pow}`, $.scaleDivergingPow, [C, I]);\nscale(`${Diverging}-${Sqrt}`, $.scaleDivergingSqrt, [C, I]);\nscale(`${Diverging}-${Symlog}`, $.scaleDivergingSymlog, [C, I]);\n\n// discretizing scales\nscale(Quantile, $.scaleQuantile, [Z, Quantile]);\nscale(Quantize, $.scaleQuantize, Z);\nscale(Threshold, $.scaleThreshold, Z);\n\n// discrete scales\nscale(BinOrdinal, scaleBinOrdinal, [D, Z]);\nscale(Ordinal, $.scaleOrdinal, D);\nscale(Band, scaleBand, D);\nscale(Point, scalePoint, D);\n\nexport function isValidScaleType(type) {\n  return scales.has(type);\n}\n\nfunction hasType(key, type) {\n  const s = scales.get(key);\n  return s && s.metadata[type];\n}\n\nexport function isContinuous(key) {\n  return hasType(key, C);\n}\n\nexport function isDiscrete(key) {\n  return hasType(key, D);\n}\n\nexport function isDiscretizing(key) {\n  return hasType(key, Z);\n}\n\nexport function isLogarithmic(key) {\n  return hasType(key, Log);\n}\n\nexport function isTemporal(key) {\n  return hasType(key, T);\n}\n\nexport function isInterpolating(key) {\n  return hasType(key, I);\n}\n\nexport function isQuantile(key) {\n  return hasType(key, Quantile);\n}\n","import {scale as getScale} from './scales.js';\nimport {constant, peek} from 'vega-util';\nimport * as $ from 'd3-interpolate';\n\nconst scaleProps = ['clamp', 'base', 'constant', 'exponent'];\n\nexport function interpolateRange(interpolator, range) {\n  const start = range[0],\n        span = peek(range) - start;\n  return function(i) { return interpolator(start + i * span); };\n}\n\nexport function interpolateColors(colors, type, gamma) {\n  return $.piecewise(interpolate(type || 'rgb', gamma), colors);\n}\n\nexport function quantizeInterpolator(interpolator, count) {\n  const samples = new Array(count),\n        n = count + 1;\n  for (let i = 0; i < count;) samples[i] = interpolator(++i / n);\n  return samples;\n}\n\nexport function scaleCopy(scale) {\n  const t = scale.type,\n        s = scale.copy();\n  s.type = t;\n  return s;\n}\n\nexport function scaleFraction(scale, min, max) {\n  const delta = max - min;\n  let i, t, s;\n\n  if (!delta || !Number.isFinite(delta)) {\n    return constant(0.5);\n  } else {\n    i = (t = scale.type).indexOf('-');\n    t = i < 0 ? t : t.slice(i + 1);\n    s = getScale(t)().domain([min, max]).range([0, 1]);\n    scaleProps.forEach(m => scale[m] ? s[m](scale[m]()) : 0);\n    return s;\n  }\n}\n\nexport function interpolate(type, gamma) {\n  const interp = $[method(type)];\n  return (gamma != null && interp && interp.gamma)\n    ? interp.gamma(gamma)\n    : interp;\n}\n\nfunction method(type) {\n  return 'interpolate' + type.toLowerCase()\n    .split('-')\n    .map(s => s[0].toUpperCase() + s.slice(1))\n    .join('');\n}\n","import {\n  schemeAccent,\n  schemeCategory10,\n  schemeDark2,\n  schemeObservable10,\n  schemePaired,\n  schemePastel1,\n  schemePastel2,\n  schemeSet1,\n  schemeSet2,\n  schemeSet3\n} from 'd3-scale-chromatic';\n\nexport const continuous = {\n  blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',\n  greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',\n  greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',\n  oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',\n  purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',\n  reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',\n\n  blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',\n  bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',\n  greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',\n  orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',\n  purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',\n  purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',\n  purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',\n  redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',\n  yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',\n  yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',\n  yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',\n\n  blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',\n  brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',\n  purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',\n  purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',\n  redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',\n  redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',\n  yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',\n  redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',\n  redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',\n  pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',\n  spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',\n\n  viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',\n  magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',\n  inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',\n  plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',\n  cividis: '00205100235800265d002961012b65042e670831690d346b11366c16396d1c3c6e213f6e26426e2c456e31476e374a6e3c4d6e42506e47536d4c566d51586e555b6e5a5e6e5e616e62646f66676f6a6a706e6d717270717573727976737c79747f7c75827f758682768985778c8877908b78938e789691789a94789e9778a19b78a59e77a9a177aea575b2a874b6ab73bbaf71c0b26fc5b66dc9b96acebd68d3c065d8c462ddc85fe2cb5ce7cf58ebd355f0d652f3da4ff7de4cfae249fce647',\n\n  rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',\n  sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',\n  turbo: '23171b32204a3e2a71453493493eae4b49c54a53d7485ee44569ee4074f53c7ff8378af93295f72e9ff42ba9ef28b3e926bce125c5d925cdcf27d5c629dcbc2de3b232e9a738ee9d3ff39347f68950f9805afc7765fd6e70fe667cfd5e88fc5795fb51a1f84badf545b9f140c5ec3cd0e637dae034e4d931ecd12ef4c92bfac029ffb626ffad24ffa223ff9821ff8d1fff821dff771cfd6c1af76118f05616e84b14df4111d5380fcb2f0dc0260ab61f07ac1805a313029b0f00950c00910b00',\n\n  browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',\n  tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',\n  teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',\n  warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',\n\n  goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',\n  goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',\n  goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',\n\n  lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',\n  lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',\n  lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',\n  lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',\n  lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',\n\n  darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',\n  darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',\n  darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',\n  darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',\n  darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'\n};\n\nexport const discrete = {\n  accent: schemeAccent,\n  category10: schemeCategory10,\n  category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',\n  category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',\n  category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',\n  dark2: schemeDark2,\n  observable10: schemeObservable10,\n  paired: schemePaired,\n  pastel1: schemePastel1,\n  pastel2: schemePastel2,\n  set1: schemeSet1,\n  set2: schemeSet2,\n  set3: schemeSet3,\n  tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',\n  tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5'\n};\n","import {continuous, discrete} from './palettes.js';\nimport {interpolateColors} from './interpolate.js';\nimport {isArray} from 'vega-util';\n\nfunction colors(palette) {\n  if (isArray(palette)) return palette;\n  const n = palette.length / 6 | 0,\n        c = new Array(n);\n\n  for (let i = 0; i < n;) {\n    c[i] = '#' + palette.slice(i * 6, ++i * 6);\n  }\n  return c;\n}\n\nfunction apply(_, f) {\n  for (const k in _) scheme(k, f(_[k]));\n}\n\nconst schemes = {};\napply(discrete, colors);\napply(continuous, _ => interpolateColors(colors(_)));\n\nexport function scheme(name, scheme) {\n  name = name && name.toLowerCase();\n  if (arguments.length > 1) {\n    schemes[name] = scheme;\n    return this;\n  } else {\n    return schemes[name];\n  }\n}\n","export const SymbolLegend  = 'symbol';\nexport const DiscreteLegend = 'discrete';\nexport const GradientLegend = 'gradient';\n","import {isLogarithmic} from './scales.js';\nimport {Time, UTC} from './scales/types.js';\nimport {timeInterval, utcInterval} from 'vega-time';\nimport {error, isArray, isNumber, isObject, isString, peek, span} from 'vega-util';\n\nconst defaultFormatter = value => isArray(value)\n  ? value.map(v => String(v))\n  : String(value);\n\nconst ascending = (a, b) => a[1] - b[1];\nconst descending = (a, b) => b[1] - a[1];\n\n/**\n * Determine the tick count or interval function.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} count - The desired tick count or interval specifier.\n * @param {number} minStep - The desired minimum step between tick values.\n * @return {*} - The tick count or interval function.\n */\nexport function tickCount(scale, count, minStep) {\n  let step;\n\n  if (isNumber(count)) {\n    if (scale.bins) {\n      count = Math.max(count, scale.bins.length);\n    }\n    if (minStep != null) {\n      count = Math.min(\n        count,\n        Math.floor((span(scale.domain()) / minStep) || 1) + 1\n      );\n    }\n  }\n\n  if (isObject(count)) {\n    step = count.step;\n    count = count.interval;\n  }\n\n  if (isString(count)) {\n    count = scale.type === Time ? timeInterval(count)\n      : scale.type == UTC ? utcInterval(count)\n      : error('Only time and utc scales accept interval strings.');\n    if (step) count = count.every(step);\n  }\n\n  return count;\n}\n\n/**\n * Filter a set of candidate tick values, ensuring that only tick values\n * that lie within the scale range are included.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {Array<*>} ticks - The candidate tick values.\n * @param {*} count - The tick count or interval function.\n * @return {Array<*>} - The filtered tick values.\n */\nexport function validTicks(scale, ticks, count) {\n  let range = scale.range(),\n      lo = range[0],\n      hi = peek(range),\n      cmp = ascending;\n\n  if (lo > hi) {\n    range = hi;\n    hi = lo;\n    lo = range;\n    cmp = descending;\n  }\n\n  lo = Math.floor(lo);\n  hi = Math.ceil(hi);\n\n  // filter ticks to valid values within the range\n  // additionally sort ticks in range order (#2579)\n  ticks = ticks.map(v => [v, scale(v)])\n    .filter(_ => lo <= _[1] && _[1] <= hi)\n    .sort(cmp)\n    .map(_ => _[0]);\n\n  if (count > 0 && ticks.length > 1) {\n    const endpoints = [ticks[0], peek(ticks)];\n    while (ticks.length > count && ticks.length >= 3) {\n      ticks = ticks.filter((_, i) => !(i % 2));\n    }\n    if (ticks.length < 3) {\n      ticks = endpoints;\n    }\n  }\n\n  return ticks;\n}\n\n/**\n * Generate tick values for the given scale and approximate tick count or\n * interval value. If the scale has a 'ticks' method, it will be used to\n * generate the ticks, with the count argument passed as a parameter. If the\n * scale lacks a 'ticks' method, the full scale domain will be returned.\n * @param {Scale} scale - The scale for which to generate tick values.\n * @param {*} [count] - The approximate number of desired ticks.\n * @return {Array<*>} - The generated tick values.\n */\nexport function tickValues(scale, count) {\n  return scale.bins ? validTicks(scale, scale.bins, count)\n    : scale.ticks ? scale.ticks(count)\n    : scale.domain();\n}\n\n/**\n * Generate a label format function for a scale. If the scale has a\n * 'tickFormat' method, it will be used to generate the formatter, with the\n * count and specifier arguments passed as parameters. If the scale lacks a\n * 'tickFormat' method, the returned formatter performs simple string coercion.\n * If the input scale is a logarithmic scale and the format specifier does not\n * indicate a desired decimal precision, a special variable precision formatter\n * that automatically trims trailing zeroes will be generated.\n * @param {Scale} scale - The scale for which to generate the label formatter.\n * @param {*} [count] - The approximate number of desired ticks.\n * @param {string} [specifier] - The format specifier. Must be a legal d3\n *   specifier string (see https://github.com/d3/d3-format#formatSpecifier) or\n *   time multi-format specifier object.\n * @return {function(*):string} - The generated label formatter.\n */\nexport function tickFormat(locale, scale, count, specifier, formatType, noSkip) {\n  const type = scale.type;\n  let format = defaultFormatter;\n\n  if (type === Time || formatType === Time) {\n    format = locale.timeFormat(specifier);\n  }\n  else if (type === UTC || formatType === UTC) {\n    format = locale.utcFormat(specifier);\n  }\n  else if (isLogarithmic(type)) {\n    const varfmt = locale.formatFloat(specifier);\n    if (noSkip || scale.bins) {\n      format = varfmt;\n    } else {\n      const test = tickLog(scale, count, false);\n      format = _ => test(_) ? varfmt(_) : '';\n    }\n  }\n  else if (scale.tickFormat) {\n    // if d3 scale has tickFormat, it must be continuous\n    const d = scale.domain();\n    format = locale.formatSpan(d[0], d[d.length - 1], count, specifier);\n  }\n  else if (specifier) {\n    format = locale.format(specifier);\n  }\n\n  return format;\n}\n\nexport function tickLog(scale, count, values) {\n  const ticks = tickValues(scale, count),\n        base = scale.base(),\n        logb = Math.log(base),\n        k = Math.max(1, base * count / ticks.length);\n\n  // apply d3-scale's log format filter criteria\n  const test = d => {\n    let i = d / Math.pow(base, Math.round(Math.log(d) / logb));\n    if (i * base < base - 0.5) i *= base;\n    return i <= k;\n  };\n\n  return values ? ticks.filter(test) : test;\n}\n","import {DiscreteLegend, SymbolLegend} from './legend-types.js';\nimport {Log, Quantile, Quantize, Threshold, Time, UTC} from './scales/types.js';\nimport {tickFormat, tickLog, tickValues} from './ticks.js';\nimport {peek} from 'vega-util';\n\nconst symbols = {\n  [Quantile]:  'quantiles',\n  [Quantize]:  'thresholds',\n  [Threshold]: 'domain'\n};\n\nconst formats = {\n  [Quantile]:  'quantiles',\n  [Quantize]:  'domain'\n};\n\nexport function labelValues(scale, count) {\n  return scale.bins ? binValues(scale.bins)\n    : scale.type === Log ? tickLog(scale, count, true)\n    : symbols[scale.type] ? thresholdValues(scale[symbols[scale.type]]())\n    : tickValues(scale, count);\n}\n\nexport function thresholdFormat(locale, scale, specifier) {\n  const _ = scale[formats[scale.type]](),\n        n = _.length;\n\n  let d = n > 1 ? _[1] - _[0] : _[0], i;\n\n  for (i=1; i<n; ++i) {\n    d = Math.min(d, _[i] - _[i-1]);\n  }\n\n  // tickCount = 3 ticks times 10 for increased resolution\n  return locale.formatSpan(0, d, 3 * 10, specifier);\n}\n\nfunction thresholdValues(thresholds) {\n  const values = [-Infinity].concat(thresholds);\n  values.max = +Infinity;\n  return values;\n}\n\nfunction binValues(bins) {\n  const values = bins.slice(0, -1);\n  values.max = peek(bins);\n  return values;\n}\n\nconst isDiscreteRange = scale =>\n  symbols[scale.type] || scale.bins;\n\nexport function labelFormat(locale, scale, count, type, specifier, formatType, noSkip) {\n  const format = formats[scale.type] && formatType !== Time && formatType !== UTC\n    ? thresholdFormat(locale, scale, specifier)\n    : tickFormat(locale, scale, count, specifier, formatType, noSkip);\n\n  return type === SymbolLegend && isDiscreteRange(scale) ? formatRange(format)\n    : type === DiscreteLegend ? formatDiscrete(format)\n    : formatPoint(format);\n}\n\nconst formatRange = format =>\n  (value, index, array) => {\n    const limit = get(array[index + 1], get(array.max, +Infinity)),\n          lo = formatValue(value, format),\n          hi = formatValue(limit, format);\n    return lo && hi ? lo + ' \\u2013 ' + hi : hi ? '< ' + hi : '\\u2265 ' + lo;\n  };\n\nconst get = (value, dflt) =>\n  value != null ? value : dflt;\n\nconst formatDiscrete = format =>\n  (value, index) => index ? format(value) : null;\n\nconst formatPoint = format =>\n  value => format(value);\n\nconst formatValue = (value, format) =>\n  Number.isFinite(value) ? format(value) : null;\n\nexport function labelFraction(scale) {\n  const domain = scale.domain(),\n        count = domain.length - 1;\n\n  let lo = +domain[0],\n      hi = +peek(domain),\n      span = hi - lo;\n\n  if (scale.type === Threshold) {\n    const adjust = count ? span / count : 0.1;\n    lo -= adjust;\n    hi += adjust;\n    span = hi - lo;\n  }\n\n  return value => (value - lo) / span;\n}\n","import {labelFormat, labelValues} from './labels.js';\nimport {Time, UTC} from './scales/types.js';\nimport {isDiscrete, isDiscretizing, isTemporal} from './scales.js';\nimport {isString, peek} from 'vega-util';\n\nfunction format(locale, scale, specifier, formatType) {\n  const type = formatType || scale.type;\n\n  // replace abbreviated time specifiers to improve screen reader experience\n  if (isString(specifier) && isTemporal(type)) {\n    specifier = specifier.replace(/%a/g, '%A').replace(/%b/g, '%B');\n  }\n\n  return !specifier && type === Time  ? locale.timeFormat('%A, %d %B %Y, %X')\n    : !specifier && type === UTC ? locale.utcFormat('%A, %d %B %Y, %X UTC')\n    : labelFormat(locale, scale, 5, null, specifier, formatType, true);\n}\n\nexport function domainCaption(locale, scale, opt) {\n  opt = opt || {};\n  const max = Math.max(3, opt.maxlen || 7),\n        fmt = format(locale, scale, opt.format, opt.formatType);\n\n  // if scale breaks domain into bins, describe boundaries\n  if (isDiscretizing(scale.type)) {\n    const v = labelValues(scale).slice(1).map(fmt),\n          n = v.length;\n    return `${n} boundar${n === 1 ? 'y' : 'ies'}: ${v.join(', ')}`;\n  }\n\n  // if scale domain is discrete, list values\n  else if (isDiscrete(scale.type)) {\n    const d = scale.domain(),\n          n = d.length,\n          v = n > max\n            ? d.slice(0, max - 2).map(fmt).join(', ')\n              + ', ending with ' + d.slice(-1).map(fmt)\n            : d.map(fmt).join(', ');\n    return `${n} value${n === 1 ? '' : 's'}: ${v}`;\n  }\n\n  // if scale domain is continuous, describe value range\n  else {\n    const d = scale.domain();\n    return `values from ${fmt(d[0])} to ${fmt(peek(d))}`;\n  }\n}\n"],"names":["count","paddingInner","paddingOuter","space","Identity","Linear","Log","Pow","Sqrt","Symlog","Time","UTC","Sequential","Diverging","Quantile","Quantize","Threshold","Ordinal","Point","Band","BinOrdinal","Continuous","Discrete","Discretizing","Interpolating","Temporal","scale","_","lo","hi","t","invert","range","min","max","i","n","length","undefined","invertExtent","band","ordinal","unknown","domain","ordinalRange","step","bandwidth","round","align","rescale","reverse","stop","bandSpace","start","Math","floor","values","sequence","map","arguments","slice","rangeRound","padding","invertRange","a","b","bisectRight","value","copy","pointish","point","Array","prototype","numbers","call","toNumber","scaleBinOrdinal","x","bisect","tickFormat","specifier","peek","scales","Map","VEGA_SCALE","Symbol","registerScale","isRegisteredScale","create","type","constructor","metadata","ctr","s","invertRangeExtent","toSet","array","set","isValidScaleType","get","$","scaleIdentity","scaleLinear","C","scaleLog","scalePow","scaleSqrt","scaleSymlog","scaleTime","T","scaleUtc","scaleSequential","I","scaleSequentialLog","scaleSequentialPow","scaleSequentialSqrt","scaleSequentialSymlog","scaleDiverging","scaleDivergingLog","scaleDivergingPow","scaleDivergingSqrt","scaleDivergingSymlog","scaleQuantile","Z","scaleQuantize","scaleThreshold","D","scaleOrdinal","scaleBand","scalePoint","has","hasType","key","isContinuous","isDiscrete","isDiscretizing","isLogarithmic","isTemporal","isInterpolating","isQuantile","scaleProps","interpolateRange","interpolator","span","interpolateColors","colors","gamma","piecewise","interpolate","quantizeInterpolator","samples","scaleCopy","scaleFraction","delta","Number","isFinite","constant","indexOf","getScale","forEach","m","interp","method","toLowerCase","split","toUpperCase","join","continuous","blues","greens","greys","oranges","purples","reds","blueGreen","bluePurple","greenBlue","orangeRed","purpleBlue","purpleBlueGreen","purpleRed","redPurple","yellowGreen","yellowOrangeBrown","yellowOrangeRed","blueOrange","brownBlueGreen","purpleGreen","purpleOrange","redBlue","redGrey","yellowGreenBlue","redYellowBlue","redYellowGreen","pinkYellowGreen","spectral","viridis","magma","inferno","plasma","cividis","rainbow","sinebow","turbo","browns","tealBlues","teals","warmGreys","goldGreen","goldOrange","goldRed","lightGreyRed","lightGreyTeal","lightMulti","lightOrange","lightTealBlue","darkBlue","darkGold","darkGreen","darkMulti","darkRed","discrete","accent","schemeAccent","category10","schemeCategory10","category20","category20b","category20c","dark2","schemeDark2","observable10","schemeObservable10","paired","schemePaired","pastel1","schemePastel1","pastel2","schemePastel2","set1","schemeSet1","set2","schemeSet2","set3","schemeSet3","tableau10","tableau20","palette","isArray","c","apply","f","k","scheme","schemes","name","SymbolLegend","DiscreteLegend","GradientLegend","defaultFormatter","v","String","ascending","descending","tickCount","minStep","isNumber","bins","isObject","interval","isString","timeInterval","utcInterval","error","every","validTicks","ticks","cmp","ceil","filter","sort","endpoints","tickValues","locale","formatType","noSkip","format","timeFormat","utcFormat","varfmt","formatFloat","test","tickLog","d","formatSpan","base","logb","log","pow","symbols","formats","labelValues","binValues","thresholdValues","thresholdFormat","thresholds","Infinity","concat","isDiscreteRange","labelFormat","formatRange","formatDiscrete","formatPoint","index","limit","formatValue","dflt","labelFraction","adjust","replace","domainCaption","opt","maxlen","fmt"],"mappings":"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"}