{"version":3,"file":"vega-crossfilter.js","sources":["../src/arrays.js","../src/Bitmaps.js","../src/Dimension.js","../src/SortedIndex.js","../src/CrossFilter.js","../src/ResolveFilter.js"],"sourcesContent":["export const array8 = n => new Uint8Array(n);\n\nexport const array16 = n => new Uint16Array(n);\n\nexport const array32 = n => new Uint32Array(n);\n","import {array16, array32, array8} from './arrays.js';\n\n/**\n * Maintains CrossFilter state.\n */\nexport default function Bitmaps() {\n\n  let width = 8,\n      data = [],\n      seen = array32(0),\n      curr = array(0, width),\n      prev = array(0, width);\n\n  return {\n    data: () => data,\n\n    seen: () => (seen = lengthen(seen, data.length)),\n\n    add(array) {\n      for (let i=0, j=data.length, n=array.length, t; i<n; ++i) {\n        t = array[i];\n        t._index = j++;\n        data.push(t);\n      }\n    },\n\n    remove(num, map) { // map: index -> boolean (true => remove)\n      const n = data.length,\n            copy = Array(n - num),\n            reindex = data; // reuse old data array for index map\n      let t, i, j;\n\n      // seek forward to first removal\n      for (i=0; !map[i] && i<n; ++i) {\n        copy[i] = data[i];\n        reindex[i] = i;\n      }\n\n      // condense arrays\n      for (j=i; i<n; ++i) {\n        t = data[i];\n        if (!map[i]) {\n          reindex[i] = j;\n          curr[j] = curr[i];\n          prev[j] = prev[i];\n          copy[j] = t;\n          t._index = j++;\n        } else {\n          reindex[i] = -1;\n        }\n        curr[i] = 0; // clear unused bits\n      }\n\n      data = copy;\n      return reindex;\n    },\n\n    size: () => data.length,\n\n    curr: () => curr,\n\n    prev: () => prev,\n\n    reset: k => prev[k] = curr[k],\n\n    all: () =>\n      width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,\n\n    set(k, one) { curr[k] |= one; },\n\n    clear(k, one) { curr[k] &= ~one; },\n\n    resize(n, m) {\n      const k = curr.length;\n      if (n > k || m > width) {\n        width = Math.max(m, width);\n        curr = array(n, width, curr);\n        prev = array(n, width);\n      }\n    }\n  };\n}\n\nfunction lengthen(array, length, copy) {\n  if (array.length >= length) return array;\n  copy = copy || new array.constructor(length);\n  copy.set(array);\n  return copy;\n}\n\nfunction array(n, m, array) {\n  const copy = (m < 0x101 ? array8\n      : m < 0x10001 ? array16\n      : array32)(n);\n  if (array) copy.set(array);\n  return copy;\n}\n","export default function(index, i, query) {\n  const bit = (1 << i);\n\n  return {\n    one:     bit,\n    zero:    ~bit,\n    range:   query.slice(),\n    bisect:  index.bisect,\n    index:   index.index,\n    size:    index.size,\n\n    onAdd(added, curr) {\n      const dim = this,\n            range = dim.bisect(dim.range, added.value),\n            idx = added.index,\n            lo = range[0],\n            hi = range[1],\n            n1 = idx.length;\n      let i;\n\n      for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;\n      for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;\n      return dim;\n    }\n  };\n}\n","import {array32} from './arrays.js';\nimport {bisectLeft, bisectRight, permute} from 'd3-array';\n\n/**\n * Maintains a list of values, sorted by key.\n */\nexport default function SortedIndex() {\n  let index = array32(0),\n      value = [],\n      size = 0;\n\n  function insert(key, data, base) {\n    if (!data.length) return [];\n\n    const n0 = size,\n        n1 = data.length,\n        addi = array32(n1);\n    let addv = Array(n1),\n        oldv, oldi, i;\n\n    for (i=0; i<n1; ++i) {\n      addv[i] = key(data[i]);\n      addi[i] = i;\n    }\n    addv = sort(addv, addi);\n\n    if (n0) {\n      oldv = value;\n      oldi = index;\n      value = Array(n0 + n1);\n      index = array32(n0 + n1);\n      merge(base, oldv, oldi, n0, addv, addi, n1, value, index);\n    } else {\n      if (base > 0) for (i=0; i<n1; ++i) {\n        addi[i] += base;\n      }\n      value = addv;\n      index = addi;\n    }\n    size = n0 + n1;\n\n    return {index: addi, value: addv};\n  }\n\n  function remove(num, map) {\n    // map: index -> remove\n    const n = size;\n    let idx, i, j;\n\n    // seek forward to first removal\n    for (i=0; !map[index[i]] && i<n; ++i);\n\n    // condense index and value arrays\n    for (j=i; i<n; ++i) {\n      if (!map[idx=index[i]]) {\n        index[j] = idx;\n        value[j] = value[i];\n        ++j;\n      }\n    }\n\n    size = n - num;\n  }\n\n  function reindex(map) {\n    for (let i=0, n=size; i<n; ++i) {\n      index[i] = map[index[i]];\n    }\n  }\n\n  function bisect(range, array) {\n    let n;\n    if (array) {\n      n = array.length;\n    } else {\n      array = value;\n      n = size;\n    }\n    return [\n      bisectLeft(array, range[0], 0, n),\n      bisectRight(array, range[1], 0, n)\n    ];\n  }\n\n  return {\n    insert:  insert,\n    remove:  remove,\n    bisect:  bisect,\n    reindex: reindex,\n    index:   () => index,\n    size:    () => size\n  };\n}\n\nfunction sort(values, index) {\n  values.sort.call(index, (a, b) => {\n    const x = values[a],\n          y = values[b];\n    return x < y ? -1 : x > y ? 1 : 0;\n  });\n  return permute(values, index);\n}\n\nfunction merge(base, value0, index0, n0, value1, index1, n1, value, index) {\n  let i0 = 0, i1 = 0, i;\n\n  for (i=0; i0 < n0 && i1 < n1; ++i) {\n    if (value0[i0] < value1[i1]) {\n      value[i] = value0[i0];\n      index[i] = index0[i0++];\n    } else {\n      value[i] = value1[i1];\n      index[i] = index1[i1++] + base;\n    }\n  }\n\n  for (; i0 < n0; ++i0, ++i) {\n    value[i] = value0[i0];\n    index[i] = index0[i0];\n  }\n\n  for (; i1 < n1; ++i1, ++i) {\n    value[i] = value1[i1];\n    index[i] = index1[i1] + base;\n  }\n}\n","import Bitmaps from './Bitmaps.js';\nimport Dimension from './Dimension.js';\nimport SortedIndex from './SortedIndex.js';\nimport {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * An indexed multi-dimensional filter.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n * @param {Array} params.query - An array of per-dimension range queries.\n */\nexport default function CrossFilter(params) {\n  Transform.call(this, Bitmaps(), params);\n  this._indices = null;\n  this._dims = null;\n}\n\nCrossFilter.Definition = {\n  'type': 'CrossFilter',\n  'metadata': {},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'query', 'type': 'array', 'array': true, 'required': true,\n      'content': {'type': 'number', 'array': true, 'length': 2} }\n  ]\n};\n\ninherits(CrossFilter, Transform, {\n  transform(_, pulse) {\n    if (!this._dims) {\n      return this.init(_, pulse);\n    } else {\n      var init = _.modified('fields')\n            || _.fields.some(f => pulse.modified(f.fields));\n\n      return init\n        ? this.reinit(_, pulse)\n        : this.eval(_, pulse);\n    }\n  },\n\n  init(_, pulse) {\n    const fields = _.fields,\n          query = _.query,\n          indices = this._indices = {},\n          dims = this._dims = [],\n          m = query.length;\n    let i = 0, key, index;\n\n    // instantiate indices and dimensions\n    for (; i<m; ++i) {\n      key = fields[i].fname;\n      index = indices[key] || (indices[key] = SortedIndex());\n      dims.push(Dimension(index, i, query[i]));\n    }\n\n    return this.eval(_, pulse);\n  },\n\n  reinit(_, pulse) {\n    const output = pulse.materialize().fork(),\n          fields = _.fields,\n          query = _.query,\n          indices = this._indices,\n          dims = this._dims,\n          bits = this.value,\n          curr = bits.curr(),\n          prev = bits.prev(),\n          all = bits.all(),\n          out = (output.rem = output.add),\n          mod = output.mod,\n          m = query.length,\n          adds = {};\n    let add, index, key, mods, remMap, modMap, i, n, f;\n\n    // set prev to current state\n    prev.set(curr);\n\n    // if pulse has remove tuples, process them first\n    if (pulse.rem.length) {\n      remMap = this.remove(_, pulse, output);\n    }\n\n    // if pulse has added tuples, add them to state\n    if (pulse.add.length) {\n      bits.add(pulse.add);\n    }\n\n    // if pulse has modified tuples, create an index map\n    if (pulse.mod.length) {\n      modMap = {};\n      for (mods=pulse.mod, i=0, n=mods.length; i<n; ++i) {\n        modMap[mods[i]._index] = 1;\n      }\n    }\n\n    // re-initialize indices as needed, update curr bitmap\n    for (i=0; i<m; ++i) {\n      f = fields[i];\n      if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n        key = f.fname;\n        if (!(add = adds[key])) {\n          indices[key] = index = SortedIndex();\n          adds[key] = add = index.insert(f, pulse.source, 0);\n        }\n        dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n      }\n    }\n\n    // visit each tuple\n    // if filter state changed, push index to add/rem\n    // else if in mod and passes a filter, push index to mod\n    for (i=0, n=bits.data().length; i<n; ++i) {\n      if (remMap[i]) { // skip if removed tuple\n        continue;\n      } else if (prev[i] !== curr[i]) { // add if state changed\n        out.push(i);\n      } else if (modMap[i] && curr[i] !== all) { // otherwise, pass mods through\n        mod.push(i);\n      }\n    }\n\n    bits.mask = (1 << m) - 1;\n    return output;\n  },\n\n  eval(_, pulse) {\n    const output = pulse.materialize().fork(),\n          m = this._dims.length;\n    let mask = 0;\n\n    if (pulse.rem.length) {\n      this.remove(_, pulse, output);\n      mask |= (1 << m) - 1;\n    }\n\n    if (_.modified('query') && !_.modified('fields')) {\n      mask |= this.update(_, pulse, output);\n    }\n\n    if (pulse.add.length) {\n      this.insert(_, pulse, output);\n      mask |= (1 << m) - 1;\n    }\n\n    if (pulse.mod.length) {\n      this.modify(pulse, output);\n      mask |= (1 << m) - 1;\n    }\n\n    this.value.mask = mask;\n    return output;\n  },\n\n  insert(_, pulse, output) {\n    const tuples = pulse.add,\n          bits = this.value,\n          dims = this._dims,\n          indices = this._indices,\n          fields = _.fields,\n          adds = {},\n          out = output.add,\n          n = bits.size() + tuples.length,\n          m = dims.length;\n    let k = bits.size(), j, key, add;\n\n    // resize bitmaps and add tuples as needed\n    bits.resize(n, m);\n    bits.add(tuples);\n\n    const curr = bits.curr(),\n          prev = bits.prev(),\n          all  = bits.all();\n\n    // add to dimensional indices\n    for (j=0; j<m; ++j) {\n      key = fields[j].fname;\n      add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n      dims[j].onAdd(add, curr);\n    }\n\n    // set previous filters, output if passes at least one filter\n    for (; k < n; ++k) {\n      prev[k] = all;\n      if (curr[k] !== all) out.push(k);\n    }\n  },\n\n  modify(pulse, output) {\n    const out = output.mod,\n          bits = this.value,\n          curr = bits.curr(),\n          all  = bits.all(),\n          tuples = pulse.mod;\n    let i, n, k;\n\n    for (i=0, n=tuples.length; i<n; ++i) {\n      k = tuples[i]._index;\n      if (curr[k] !== all) out.push(k);\n    }\n  },\n\n  remove(_, pulse, output) {\n    const indices = this._indices,\n          bits = this.value,\n          curr = bits.curr(),\n          prev = bits.prev(),\n          all  = bits.all(),\n          map = {},\n          out = output.rem,\n          tuples = pulse.rem;\n    let i, n, k, f;\n\n    // process tuples, output if passes at least one filter\n    for (i=0, n=tuples.length; i<n; ++i) {\n      k = tuples[i]._index;\n      map[k] = 1; // build index map\n      prev[k] = (f = curr[k]);\n      curr[k] = all;\n      if (f !== all) out.push(k);\n    }\n\n    // remove from dimensional indices\n    for (k in indices) {\n      indices[k].remove(n, map);\n    }\n\n    this.reindex(pulse, n, map);\n    return map;\n  },\n\n  // reindex filters and indices after propagation completes\n  reindex(pulse, num, map) {\n    const indices = this._indices,\n          bits = this.value;\n\n    pulse.runAfter(() => {\n      const indexMap = bits.remove(num, map);\n      for (const key in indices) indices[key].reindex(indexMap);\n    });\n  },\n\n  update(_, pulse, output) {\n    const dims = this._dims,\n          query = _.query,\n          stamp = pulse.stamp,\n          m = dims.length;\n    let mask = 0, i, q;\n\n    // survey how many queries have changed\n    output.filters = 0;\n    for (q=0; q<m; ++q) {\n      if (_.modified('query', q)) { i = q; ++mask; }\n    }\n\n    if (mask === 1) {\n      // only one query changed, use more efficient update\n      mask = dims[i].one;\n      this.incrementOne(dims[i], query[i], output.add, output.rem);\n    } else {\n      // multiple queries changed, perform full record keeping\n      for (q=0, mask=0; q<m; ++q) {\n        if (!_.modified('query', q)) continue;\n        mask |= dims[q].one;\n        this.incrementAll(dims[q], query[q], stamp, output.add);\n        output.rem = output.add; // duplicate add/rem for downstream resolve\n      }\n    }\n\n    return mask;\n  },\n\n  incrementAll(dim, query, stamp, out) {\n    const bits = this.value,\n          seen = bits.seen(),\n          curr = bits.curr(),\n          prev = bits.prev(),\n          index = dim.index(),\n          old = dim.bisect(dim.range),\n          range = dim.bisect(query),\n          lo1 = range[0],\n          hi1 = range[1],\n          lo0 = old[0],\n          hi0 = old[1],\n          one = dim.one;\n    let i, j, k;\n\n    // Fast incremental update based on previous lo index.\n    if (lo1 < lo0) {\n      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    } else if (lo1 > lo0) {\n      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    }\n\n    // Fast incremental update based on previous hi index.\n    if (hi1 > hi0) {\n      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    } else if (hi1 < hi0) {\n      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n        k = index[i];\n        if (seen[k] !== stamp) {\n          prev[k] = curr[k];\n          seen[k] = stamp;\n          out.push(k);\n        }\n        curr[k] ^= one;\n      }\n    }\n\n    dim.range = query.slice();\n  },\n\n  incrementOne(dim, query, add, rem) {\n    const bits = this.value,\n          curr = bits.curr(),\n          index = dim.index(),\n          old = dim.bisect(dim.range),\n          range = dim.bisect(query),\n          lo1 = range[0],\n          hi1 = range[1],\n          lo0 = old[0],\n          hi0 = old[1],\n          one = dim.one;\n    let i, j, k;\n\n    // Fast incremental update based on previous lo index.\n    if (lo1 < lo0) {\n      for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        add.push(k);\n      }\n    } else if (lo1 > lo0) {\n      for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        rem.push(k);\n      }\n    }\n\n    // Fast incremental update based on previous hi index.\n    if (hi1 > hi0) {\n      for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        add.push(k);\n      }\n    } else if (hi1 < hi0) {\n      for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n        k = index[i];\n        curr[k] ^= one;\n        rem.push(k);\n      }\n    }\n\n    dim.range = query.slice();\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Selectively filters tuples by resolving against a filter bitmap.\n * Useful for processing the output of a cross-filter transform.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n *   parameter value is a reference to a {@link CrossFilter} transform.\n */\nexport default function ResolveFilter(params) {\n  Transform.call(this, null, params);\n}\n\nResolveFilter.Definition = {\n  'type': 'ResolveFilter',\n  'metadata': {},\n  'params': [\n    { 'name': 'ignore', 'type': 'number', 'required': true,\n      'description': 'A bit mask indicating which filters to ignore.' },\n    { 'name': 'filter', 'type': 'object', 'required': true,\n      'description': 'Per-tuple filter bitmaps from a CrossFilter transform.' }\n  ]\n};\n\ninherits(ResolveFilter, Transform, {\n  transform(_, pulse) {\n    const ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore\n          bitmap = _.filter,\n          mask = bitmap.mask;\n\n    // exit early if no relevant filter changes\n    if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n    const output = pulse.fork(pulse.ALL),\n          data = bitmap.data(),\n          curr = bitmap.curr(),\n          prev = bitmap.prev(),\n          pass = k => !(curr[k] & ignore) ? data[k] : null;\n\n    // propagate all mod tuples that pass the filter\n    output.filter(output.MOD, pass);\n\n    // determine add & rem tuples via filter functions\n    // for efficiency, we do *not* populate new arrays,\n    // instead we add filter functions applied downstream\n\n    if (!(mask & (mask-1))) { // only one filter changed\n      output.filter(output.ADD, pass);\n      output.filter(output.REM, k =>\n        (curr[k] & ignore) === mask ? data[k] : null);\n\n    } else { // multiple filters changed\n      output.filter(output.ADD, k => {\n        const c = curr[k] & ignore,\n              f = !c && (c ^ (prev[k] & ignore));\n        return f ? data[k] : null;\n      });\n      output.filter(output.REM, k => {\n        const c = curr[k] & ignore,\n              f = c && !(c ^ (c ^ (prev[k] & ignore)));\n        return f ? data[k] : null;\n      });\n    }\n\n    // add filter to source data in case of reflow...\n    return output.filter(output.SOURCE, t => pass(t._index));\n  }\n});\n"],"names":["array8","n","Uint8Array","array16","Uint16Array","array32","Uint32Array","Bitmaps","width","data","seen","curr","array","prev","lengthen","length","add","i","j","t","_index","push","remove","num","map","copy","Array","reindex","size","reset","k","all","set","one","clear","resize","m","Math","max","constructor","index","query","bit","zero","range","slice","bisect","onAdd","added","dim","value","idx","lo","hi","n1","SortedIndex","insert","key","base","n0","addi","addv","oldv","oldi","sort","merge","bisectLeft","bisectRight","values","call","a","b","x","y","permute","value0","index0","value1","index1","i0","i1","CrossFilter","params","Transform","_indices","_dims","Definition","inherits","transform","_","pulse","init","modified","fields","some","f","reinit","eval","indices","dims","fname","Dimension","output","materialize","fork","bits","out","rem","mod","adds","mods","remMap","modMap","source","mask","update","modify","tuples","runAfter","indexMap","stamp","q","filters","incrementOne","incrementAll","old","lo1","hi1","lo0","hi0","min","ResolveFilter","ignore","bitmap","filter","StopPropagation","ALL","pass","MOD","ADD","REM","c","SOURCE"],"mappings":"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"}