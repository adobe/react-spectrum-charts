{"version":3,"file":"vega-transforms.js","sources":["../src/util/AggregateKeys.js","../src/util/AggregateOps.js","../src/util/TupleStore.js","../src/Aggregate.js","../src/Bin.js","../src/util/SortedList.js","../src/Collect.js","../src/Compare.js","../src/CountPattern.js","../src/Cross.js","../src/util/Distributions.js","../src/Density.js","../src/util/util.js","../src/DotBin.js","../src/Expression.js","../src/Extent.js","../src/Subflow.js","../src/Facet.js","../src/Field.js","../src/Filter.js","../src/Flatten.js","../src/Fold.js","../src/Formula.js","../src/Generate.js","../src/Impute.js","../src/JoinAggregate.js","../src/KDE.js","../src/Key.js","../src/Load.js","../src/Lookup.js","../src/MultiExtent.js","../src/MultiValues.js","../src/Params.js","../src/Pivot.js","../src/PreFacet.js","../src/Project.js","../src/Proxy.js","../src/Quantile.js","../src/Relay.js","../src/Sample.js","../src/Sequence.js","../src/Sieve.js","../src/TimeUnit.js","../src/TupleIndex.js","../src/Values.js","../src/util/WindowOps.js","../src/util/WindowState.js","../src/Window.js"],"sourcesContent":["export function multikey(f) {\n  return x => {\n    const n = f.length;\n    let i = 1,\n        k = String(f[0](x));\n\n    for (; i<n; ++i) {\n      k += '|' + f[i](x);\n    }\n\n    return k;\n  };\n}\n\nexport function groupkey(fields) {\n  return !fields || !fields.length ? function() { return ''; }\n    : fields.length === 1 ? fields[0]\n    : multikey(fields);\n}\n","import {extend, identity} from 'vega-util';\n\nexport function measureName(op, field, as) {\n  return as || (op + (!field ? '' : '_' + field));\n}\n\nconst noop = () => {};\n\nconst base_op = {\n  init: noop,\n  add:  noop,\n  rem:  noop,\n  idx:  0\n};\n\nexport const AggregateOps = {\n  values: {\n    init:  m => m.cell.store = true,\n    value: m => m.cell.data.values(),\n    idx:  -1\n  },\n  count: {\n    value: m => m.cell.num\n  },\n  __count__: {\n    value: m => m.missing + m.valid\n  },\n  missing: {\n    value: m => m.missing\n  },\n  valid: {\n    value: m => m.valid\n  },\n  sum: {\n    init:  m => m.sum = 0,\n    value: m => m.valid ? m.sum : undefined,\n    add:  (m, v) => m.sum += +v,\n    rem:  (m, v) => m.sum -= v\n  },\n  product: {\n    init:  m => m.product = 1,\n    value: m => m.valid ? m.product : undefined,\n    add:  (m, v) => m.product *= v,\n    rem:  (m, v) => m.product /= v\n  },\n  mean: {\n    init:  m => m.mean = 0,\n    value: m => m.valid ? m.mean : undefined,\n    add:  (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n    rem:  (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n  },\n  average: {\n    value: m => m.valid ? m.mean : undefined,\n    req:  ['mean'], idx: 1\n  },\n  variance: {\n    init:  m => m.dev = 0,\n    value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n    add:  (m, v) => m.dev += m.mean_d * (v - m.mean),\n    rem:  (m, v) => m.dev -= m.mean_d * (v - m.mean),\n    req:  ['mean'], idx: 1\n  },\n  variancep: {\n    value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stdev: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stdevp: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  stderr: {\n    value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n    req:  ['variance'], idx: 2\n  },\n  distinct: {\n    value: m => m.cell.data.distinct(m.get),\n    req:  ['values'], idx: 3\n  },\n  ci0: {\n    value: m => m.cell.data.ci0(m.get),\n    req:  ['values'], idx: 3\n  },\n  ci1: {\n    value: m => m.cell.data.ci1(m.get),\n    req:  ['values'], idx: 3\n  },\n  median: {\n    value: m => m.cell.data.q2(m.get),\n    req:  ['values'], idx: 3\n  },\n  q1: {\n    value: m => m.cell.data.q1(m.get),\n    req: ['values'], idx: 3\n  },\n  q3: {\n    value: m => m.cell.data.q3(m.get),\n    req:  ['values'], idx: 3\n  },\n  min: {\n    init:  m => m.min = undefined,\n    value: m => m.min = (Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min),\n    add:  (m, v) => { if (v < m.min || m.min === undefined) m.min = v; },\n    rem:  (m, v) => { if (v <= m.min) m.min = NaN; },\n    req:  ['values'], idx: 4\n  },\n  max: {\n    init:  m => m.max = undefined,\n    value: m => m.max = (Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max),\n    add:  (m, v) => { if (v > m.max || m.max === undefined) m.max = v; },\n    rem:  (m, v) => { if (v >= m.max) m.max = NaN; },\n    req:  ['values'], idx: 4\n  },\n  argmin: {\n    init:  m => m.argmin = undefined,\n    value: m => m.argmin || m.cell.data.argmin(m.get),\n    add:  (m, v, t) => { if (v < m.min) m.argmin = t; },\n    rem:  (m, v) => { if (v <= m.min) m.argmin = undefined; },\n    req:  ['min', 'values'], idx: 3\n  },\n  argmax: {\n    init:  m => m.argmax = undefined,\n    value: m => m.argmax || m.cell.data.argmax(m.get),\n    add:  (m, v, t) => { if (v > m.max) m.argmax = t; },\n    rem:  (m, v) => { if (v >= m.max) m.argmax = undefined; },\n    req:  ['max', 'values'], idx: 3\n  },\n  exponential: {\n    init: (m, r) => { m.exp = 0; m.exp_r = r; },\n    value: m => m.valid ? (m.exp * (1 - m.exp_r) / (1 - m.exp_r ** m.valid)) : undefined,\n    add:  (m, v) => m.exp = m.exp_r * m.exp + v,\n    rem:  (m, v) => m.exp = (m.exp - v / m.exp_r ** (m.valid - 1)) / m.exp_r\n  },\n  exponentialb: {\n    value: m => m.valid ? (m.exp * (1 - m.exp_r)) : undefined,\n    req:  ['exponential'], idx: 1\n  }\n};\n\nexport const ValidAggregateOps = Object.keys(AggregateOps).filter(d => d !== '__count__');\n\nfunction measure(key, value) {\n  return (out, aggregate_param) => extend({\n    name: key,\n    aggregate_param: aggregate_param,\n    out: out || key\n  }, base_op, value);\n}\n\n[...ValidAggregateOps, '__count__'].forEach(key => {\n  AggregateOps[key] = measure(key, AggregateOps[key]);\n});\n\nexport function createMeasure(op, param, name) {\n  return AggregateOps[op](name, param);\n}\n\nfunction compareIndex(a, b) {\n  return a.idx - b.idx;\n}\n\nfunction resolve(agg) {\n  const map = {};\n  agg.forEach(a => map[a.name] = a);\n\n  const getreqs = a => {\n    if (!a.req) return;\n    a.req.forEach(key => {\n      if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n    });\n  };\n  agg.forEach(getreqs);\n\n  return Object.values(map).sort(compareIndex);\n}\n\nfunction init() {\n  this.valid = 0;\n  this.missing = 0;\n  this._ops.forEach(op => (op.aggregate_param == null) ? op.init(this) : op.init(this, op.aggregate_param));\n}\n\nfunction add(v, t) {\n  if (v == null || v === '') { ++this.missing; return; }\n  if (v !== v) return;\n  ++this.valid;\n  this._ops.forEach(op => op.add(this, v, t));\n}\n\nfunction rem(v, t) {\n  if (v == null || v === '') { --this.missing; return; }\n  if (v !== v) return;\n  --this.valid;\n  this._ops.forEach(op => op.rem(this, v, t));\n}\n\nfunction set(t) {\n  this._out.forEach(op => t[op.out] = op.value(this));\n  return t;\n}\n\nexport function compileMeasures(agg, field) {\n  const get = field || identity,\n        ops = resolve(agg),\n        out = agg.slice().sort(compareIndex);\n\n  function ctr(cell) {\n    this._ops = ops;\n    this._out = out;\n    this.cell = cell;\n    this.init();\n  }\n\n  ctr.prototype.init = init;\n  ctr.prototype.add = add;\n  ctr.prototype.rem = rem;\n  ctr.prototype.set = set;\n  ctr.prototype.get = get;\n  ctr.fields = agg.map(op => op.out);\n\n  return ctr;\n}\n","import {tupleid} from 'vega-dataflow';\nimport {bootstrapCI, quartiles} from 'vega-statistics';\nimport {extentIndex, field, hasOwnProperty} from 'vega-util';\n\nexport default function TupleStore(key) {\n  this._key = key ? field(key) : tupleid;\n  this.reset();\n}\n\nconst prototype = TupleStore.prototype;\n\nprototype.reset = function() {\n  this._add = [];\n  this._rem = [];\n  this._ext = null;\n  this._get = null;\n  this._q = null;\n};\n\nprototype.add = function(v) {\n  this._add.push(v);\n};\n\nprototype.rem = function(v) {\n  this._rem.push(v);\n};\n\nprototype.values = function() {\n  this._get = null;\n  if (this._rem.length === 0) return this._add;\n\n  const a = this._add,\n        r = this._rem,\n        k = this._key,\n        n = a.length,\n        m = r.length,\n        x = Array(n - m),\n        map = {};\n  let i, j, v;\n\n  // use unique key field to clear removed values\n  for (i=0; i<m; ++i) {\n    map[k(r[i])] = 1;\n  }\n  for (i=0, j=0; i<n; ++i) {\n    if (map[k(v = a[i])]) {\n      map[k(v)] = 0;\n    } else {\n      x[j++] = v;\n    }\n  }\n\n  this._rem = [];\n  return (this._add = x);\n};\n\n// memoizing statistics methods\n\nprototype.distinct = function(get) {\n  const v = this.values(),\n        map = {};\n\n  let n = v.length,\n      count = 0, s;\n\n  while (--n >= 0) {\n    s = get(v[n]) + '';\n    if (!hasOwnProperty(map, s)) {\n      map[s] = 1;\n      ++count;\n    }\n  }\n\n  return count;\n};\n\nprototype.extent = function(get) {\n  if (this._get !== get || !this._ext) {\n    const v = this.values(),\n          i = extentIndex(v, get);\n    this._ext = [v[i[0]], v[i[1]]];\n    this._get = get;\n  }\n  return this._ext;\n};\n\nprototype.argmin = function(get) {\n  return this.extent(get)[0] || {};\n};\n\nprototype.argmax = function(get) {\n  return this.extent(get)[1] || {};\n};\n\nprototype.min = function(get) {\n  const m = this.extent(get)[0];\n  return m != null ? get(m) : undefined;\n};\n\nprototype.max = function(get) {\n  const m = this.extent(get)[1];\n  return m != null ? get(m) : undefined;\n};\n\nprototype.quartile = function(get) {\n  if (this._get !== get || !this._q) {\n    this._q = quartiles(this.values(), get);\n    this._get = get;\n  }\n  return this._q;\n};\n\nprototype.q1 = function(get) {\n  return this.quartile(get)[0];\n};\n\nprototype.q2 = function(get) {\n  return this.quartile(get)[1];\n};\n\nprototype.q3 = function(get) {\n  return this.quartile(get)[2];\n};\n\nprototype.ci = function(get) {\n  if (this._get !== get || !this._ci) {\n    this._ci = bootstrapCI(this.values(), 1000, 0.05, get);\n    this._get = get;\n  }\n  return this._ci;\n};\n\nprototype.ci0 = function(get) {\n  return this.ci(get)[0];\n};\n\nprototype.ci1 = function(get) {\n  return this.ci(get)[1];\n};\n","import {groupkey} from './util/AggregateKeys.js';\nimport {ValidAggregateOps, compileMeasures, createMeasure, measureName} from './util/AggregateOps.js';\nimport TupleStore from './util/TupleStore.js';\nimport {Transform, ingest, replace} from 'vega-dataflow';\nimport {accessorFields, accessorName, array, error, inherits} from 'vega-util';\n\n/**\n * Group-by aggregation operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n * @param {Array<number>} [params.aggregate_params] - An optional array of parameters for aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n * @param {boolean} [params.cross=false] - A flag indicating that the full\n *   cross-product of groupby values should be generated, including empty cells.\n *   If true, the drop parameter is ignored and empty cells are retained.\n * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n */\nexport default function Aggregate(params) {\n  Transform.call(this, null, params);\n\n  this._adds = []; // array of added output tuples\n  this._mods = []; // array of modified output tuples\n  this._alen = 0;  // number of active added tuples\n  this._mlen = 0;  // number of active modified tuples\n  this._drop = true;   // should empty aggregation cells be removed\n  this._cross = false; // produce full cross-product of group-by values\n\n  this._dims = [];   // group-by dimension accessors\n  this._dnames = []; // group-by dimension names\n\n  this._measures = []; // collection of aggregation monoids\n  this._countOnly = false; // flag indicating only count aggregation\n  this._counts = null; // collection of count fields\n  this._prev = null;   // previous aggregation cells\n\n  this._inputs = null;  // array of dependent input tuple field names\n  this._outputs = null; // array of output tuple field names\n}\n\nAggregate.Definition = {\n  'type': 'Aggregate',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n    { 'name': 'aggregate_params', 'type': 'number', 'null': true, 'array': true },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'drop', 'type': 'boolean', 'default': true },\n    { 'name': 'cross', 'type': 'boolean', 'default': false },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(Aggregate, Transform, {\n  transform(_, pulse) {\n    const aggr = this,\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          mod = _.modified();\n\n    aggr.stamp = out.stamp;\n\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      aggr._prev = aggr.value;\n      aggr.value = mod ? aggr.init(_) : Object.create(null);\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      aggr.value = aggr.value || aggr.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // Indicate output fields and return aggregate tuples.\n    out.modifies(aggr._outputs);\n\n    // Should empty cells be dropped?\n    aggr._drop = _.drop !== false;\n\n    // If domain cross-product requested, generate empty cells as needed\n    // and ensure that empty cells are not dropped\n    if (_.cross && aggr._dims.length > 1) {\n      aggr._drop = false;\n      aggr.cross();\n    }\n\n    if (pulse.clean() && aggr._drop) {\n      out.clean(true).runAfter(() => this.clean());\n    }\n\n    return aggr.changes(out);\n  },\n\n  cross() {\n    const aggr = this,\n          curr = aggr.value,\n          dims = aggr._dnames,\n          vals = dims.map(() => ({})),\n          n = dims.length;\n\n    // collect all group-by domain values\n    function collect(cells) {\n      let key, i, t, v;\n      for (key in cells) {\n        t = cells[key].tuple;\n        for (i=0; i<n; ++i) {\n          vals[i][(v = t[dims[i]])] = v;\n        }\n      }\n    }\n    collect(aggr._prev);\n    collect(curr);\n\n    // iterate over key cross-product, create cells as needed\n    function generate(base, tuple, index) {\n      const name = dims[index],\n          v = vals[index++];\n\n      for (const k in v) {\n        const key = base ? base + '|' + k : k;\n        tuple[name] = v[k];\n        if (index < n) generate(key, tuple, index);\n        else if (!curr[key]) aggr.cell(key, tuple);\n      }\n    }\n    generate('', {}, 0);\n  },\n\n  init(_) {\n    // initialize input and output fields\n    const inputs = (this._inputs = []),\n          outputs = (this._outputs = []),\n          inputMap = {};\n\n    function inputVisit(get) {\n      const fields = array(accessorFields(get)),\n            n = fields.length;\n      let i = 0, f;\n      for (; i<n; ++i) {\n        if (!inputMap[f=fields[i]]) {\n          inputMap[f] = 1;\n          inputs.push(f);\n        }\n      }\n    }\n\n    // initialize group-by dimensions\n    this._dims = array(_.groupby);\n    this._dnames = this._dims.map(d => {\n      const dname = accessorName(d);\n      inputVisit(d);\n      outputs.push(dname);\n      return dname;\n    });\n    this.cellkey = _.key ? _.key : groupkey(this._dims);\n\n    // initialize aggregate measures\n    this._countOnly = true;\n    this._counts = [];\n    this._measures = [];\n\n    const fields = _.fields || [null],\n          ops = _.ops || ['count'],\n          aggregate_params = _.aggregate_params || [null],\n          as = _.as || [],\n          n = fields.length,\n          map = {};\n    let field, op, aggregate_param, m, mname, outname, i;\n\n    if (n !== ops.length) {\n      error('Unmatched number of fields and aggregate ops.');\n    }\n\n    for (i=0; i<n; ++i) {\n      field = fields[i];\n      op = ops[i];\n      aggregate_param = aggregate_params[i] || null;\n\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      mname = accessorName(field);\n      outname = measureName(op, mname, as[i]);\n      outputs.push(outname);\n\n      if (op === 'count') {\n        this._counts.push(outname);\n        continue;\n      }\n\n      m = map[mname];\n      if (!m) {\n        inputVisit(field);\n        m = (map[mname] = []);\n        m.field = field;\n        this._measures.push(m);\n      }\n\n      if (op !== 'count') this._countOnly = false;\n      m.push(createMeasure(op, aggregate_param, outname));\n    }\n\n    this._measures = this._measures.map(m => compileMeasures(m, m.field));\n\n    return Object.create(null); // aggregation cells (this.value)\n  },\n\n  // -- Cell Management -----\n\n  cellkey: groupkey(),\n\n  cell(key, t) {\n    let cell = this.value[key];\n    if (!cell) {\n      cell = this.value[key] = this.newcell(key, t);\n      this._adds[this._alen++] = cell;\n    } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._adds[this._alen++] = cell;\n    } else if (cell.stamp < this.stamp) {\n      cell.stamp = this.stamp;\n      this._mods[this._mlen++] = cell;\n    }\n    return cell;\n  },\n\n  newcell(key, t) {\n    const cell = {\n      key:   key,\n      num:   0,\n      agg:   null,\n      tuple: this.newtuple(t, this._prev && this._prev[key]),\n      stamp: this.stamp,\n      store: false\n    };\n\n    if (!this._countOnly) {\n      const measures = this._measures,\n            n = measures.length;\n\n      cell.agg = Array(n);\n      for (let i=0; i<n; ++i) {\n        cell.agg[i] = new measures[i](cell);\n      }\n    }\n\n    if (cell.store) {\n      cell.data = new TupleStore();\n    }\n\n    return cell;\n  },\n\n  newtuple(t, p) {\n    const names = this._dnames,\n          dims = this._dims,\n          n = dims.length,\n          x = {};\n\n    for (let i=0; i<n; ++i) {\n      x[names[i]] = dims[i](t);\n    }\n\n    return p ? replace(p.tuple, x) : ingest(x);\n  },\n\n  clean() {\n    const cells = this.value;\n    for (const key in cells) {\n      if (cells[key].num === 0) {\n        delete cells[key];\n      }\n    }\n  },\n\n  // -- Process Tuples -----\n\n  add(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n\n    cell.num += 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.add(t);\n\n    const agg = cell.agg;\n    for (let i=0, n=agg.length; i<n; ++i) {\n      agg[i].add(agg[i].get(t), t);\n    }\n  },\n\n  rem(t) {\n    const key = this.cellkey(t),\n          cell = this.cell(key, t);\n\n    cell.num -= 1;\n    if (this._countOnly) return;\n\n    if (cell.store) cell.data.rem(t);\n\n    const agg = cell.agg;\n    for (let i=0, n=agg.length; i<n; ++i) {\n      agg[i].rem(agg[i].get(t), t);\n    }\n  },\n\n  celltuple(cell) {\n    const tuple = cell.tuple,\n          counts = this._counts;\n\n    // consolidate stored values\n    if (cell.store) {\n      cell.data.values();\n    }\n\n    // update tuple properties\n    for (let i=0, n=counts.length; i<n; ++i) {\n      tuple[counts[i]] = cell.num;\n    }\n    if (!this._countOnly) {\n      const agg = cell.agg;\n      for (let i=0, n=agg.length; i<n; ++i) {\n        agg[i].set(tuple);\n      }\n    }\n\n    return tuple;\n  },\n\n  changes(out) {\n    const adds = this._adds,\n          mods = this._mods,\n          prev = this._prev,\n          drop = this._drop,\n          add = out.add,\n          rem = out.rem,\n          mod = out.mod;\n\n    let cell, key, i, n;\n\n    if (prev) for (key in prev) {\n      cell = prev[key];\n      if (!drop || cell.num) rem.push(cell.tuple);\n    }\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      add.push(this.celltuple(adds[i]));\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      cell = mods[i];\n      (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n    this._prev = null;\n    return out;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {bin} from 'vega-statistics';\nimport {accessor, accessorFields, accessorName, inherits, toNumber} from 'vega-util';\n\n// epsilon bias to offset floating point error (#1737)\nconst EPSILON = 1e-14;\n\n/**\n * Generates a binning function for discretizing data.\n * @constructor\n * @param {object} params - The parameters for this operator. The\n *   provided values should be valid options for the {@link bin} function.\n * @param {function(object): *} params.field - The data field to bin.\n */\nexport default function Bin(params) {\n  Transform.call(this, null, params);\n}\n\nBin.Definition = {\n  'type': 'Bin',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'interval', 'type': 'boolean', 'default': true },\n    { 'name': 'anchor', 'type': 'number' },\n    { 'name': 'maxbins', 'type': 'number', 'default': 20 },\n    { 'name': 'base', 'type': 'number', 'default': 10 },\n    { 'name': 'divide', 'type': 'number', 'array': true, 'default': [5, 2] },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n    { 'name': 'span', 'type': 'number' },\n    { 'name': 'step', 'type': 'number' },\n    { 'name': 'steps', 'type': 'number', 'array': true },\n    { 'name': 'minstep', 'type': 'number', 'default': 0 },\n    { 'name': 'nice', 'type': 'boolean', 'default': true },\n    { 'name': 'name', 'type': 'string' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['bin0', 'bin1'] }\n  ]\n};\n\ninherits(Bin, Transform, {\n  transform(_, pulse) {\n    const band = _.interval !== false,\n        bins = this._bins(_),\n        start = bins.start,\n        step = bins.step,\n        as = _.as || ['bin0', 'bin1'],\n        b0 = as[0],\n        b1 = as[1];\n\n    let flag;\n    if (_.modified()) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n    } else {\n      flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n    }\n\n    pulse.visit(flag, band\n      ? t => {\n          const v = bins(t);\n          // minimum bin value (inclusive)\n          t[b0] = v;\n          // maximum bin value (exclusive)\n          // use convoluted math for better floating point agreement\n          // see https://github.com/vega/vega/issues/830\n          // infinite values propagate through this formula! #2227\n          t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n        }\n      : t => t[b0] = bins(t)\n    );\n\n    return pulse.modifies(band ? as : b0);\n  },\n\n  _bins(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const field = _.field,\n          bins  = bin(_),\n          step  = bins.step;\n    let start = bins.start,\n        stop  = start + Math.ceil((bins.stop - start) / step) * step,\n        a, d;\n\n    if ((a = _.anchor) != null) {\n      d = a - (start + step * Math.floor((a - start) / step));\n      start += d;\n      stop += d;\n    }\n\n    const f = function(t) {\n      let v = toNumber(field(t));\n      return v == null ? null\n        : v < start ? -Infinity\n        : v > stop ? +Infinity\n        : (\n            v = Math.max(start, Math.min(v, stop - step)),\n            start + step * Math.floor(EPSILON + (v - start) / step)\n          );\n    };\n\n    f.start = start;\n    f.stop = bins.stop;\n    f.step = step;\n\n    return this.value = accessor(\n      f,\n      accessorFields(field),\n      _.name || 'bin_' + accessorName(field)\n    );\n  }\n});\n","import {merge} from 'vega-util';\n\nexport default function(idFunc, source, input) {\n  const $ = idFunc;\n  let data = source || [],\n      add = input || [],\n      rem = {},\n      cnt = 0;\n\n  return {\n    add: t => add.push(t),\n    remove: t => rem[$(t)] = ++cnt,\n    size: () => data.length,\n    data: (compare, resort) => {\n      if (cnt) {\n        data = data.filter(t => !rem[$(t)]);\n        rem = {};\n        cnt = 0;\n      }\n      if (resort && compare) {\n        data.sort(compare);\n      }\n      if (add.length) {\n        data = compare\n          ? merge(compare, data, add.sort(compare))\n          : data.concat(add);\n        add = [];\n      }\n      return data;\n    }\n  };\n}","import SortedList from './util/SortedList.js';\nimport {Transform, stableCompare, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Collects all data tuples that pass through this operator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for additionally sorting the collected tuples.\n */\nexport default function Collect(params) {\n  Transform.call(this, [], params);\n}\n\nCollect.Definition = {\n  'type': 'Collect',\n  'metadata': {'source': true},\n  'params': [\n    { 'name': 'sort', 'type': 'compare' }\n  ]\n};\n\ninherits(Collect, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),\n          sort = _.sort,\n          mod = pulse.changed() || (sort &&\n                (_.modified('sort') || pulse.modified(sort.fields)));\n\n    out.visit(out.REM, list.remove);\n\n    this.modified(mod);\n    this.value = out.source = list.data(stableCompare(sort), mod);\n\n    // propagate tree root if defined\n    if (pulse.source && pulse.source.root) {\n      this.value.root = pulse.source.root;\n    }\n\n    return out;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {compare, inherits} from 'vega-util';\n\n/**\n * Generates a comparator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string|function>} params.fields - The fields to compare.\n * @param {Array<string>} [params.orders] - The sort orders.\n *   Each entry should be one of \"ascending\" (default) or \"descending\".\n */\nexport default function Compare(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Compare, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : compare(_.fields, _.orders);\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Count regexp-defined pattern occurrences in a text field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the text field.\n * @param {string} [params.pattern] - RegExp string defining the text pattern.\n * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n * @param {string} [params.stopwords] - RegExp string of words to ignore.\n */\nexport default function CountPattern(params) {\n  Transform.call(this, null, params);\n}\n\nCountPattern.Definition = {\n  'type': 'CountPattern',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'case', 'type': 'enum', 'values': ['upper', 'lower', 'mixed'], 'default': 'mixed' },\n    { 'name': 'pattern', 'type': 'string', 'default': '[\\\\w\"]+' },\n    { 'name': 'stopwords', 'type': 'string', 'default': '' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['text', 'count'] }\n  ]\n};\n\nfunction tokenize(text, tcase, match) {\n  switch (tcase) {\n    case 'upper': text = text.toUpperCase(); break;\n    case 'lower': text = text.toLowerCase(); break;\n  }\n  return text.match(match);\n}\n\ninherits(CountPattern, Transform, {\n  transform(_, pulse) {\n    const process = update => tuple => {\n      var tokens = tokenize(get(tuple), _.case, match) || [], t;\n      for (var i=0, n=tokens.length; i<n; ++i) {\n        if (!stop.test(t = tokens[i])) update(t);\n      }\n    };\n\n    const init = this._parameterCheck(_, pulse),\n          counts = this._counts,\n          match = this._match,\n          stop = this._stop,\n          get = _.field,\n          as = _.as || ['text', 'count'],\n          add = process(t => counts[t] = 1 + (counts[t] || 0)),\n          rem = process(t => counts[t] -= 1);\n\n    if (init) {\n      pulse.visit(pulse.SOURCE, add);\n    } else {\n      pulse.visit(pulse.ADD, add);\n      pulse.visit(pulse.REM, rem);\n    }\n\n    return this._finish(pulse, as); // generate output tuples\n  },\n\n  _parameterCheck(_, pulse) {\n    let init = false;\n\n    if (_.modified('stopwords') || !this._stop) {\n      this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n      init = true;\n    }\n\n    if (_.modified('pattern') || !this._match) {\n      this._match = new RegExp((_.pattern || '[\\\\w\\']+'), 'g');\n      init = true;\n    }\n\n    if (_.modified('field') || pulse.modified(_.field.fields)) {\n      init = true;\n    }\n\n    if (init) this._counts = {};\n    return init;\n  },\n\n  _finish(pulse, as) {\n    const counts = this._counts,\n          tuples = this._tuples || (this._tuples = {}),\n          text = as[0],\n          count = as[1],\n          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n    let w, t, c;\n\n    for (w in counts) {\n      t = tuples[w];\n      c = counts[w] || 0;\n      if (!t && c) {\n        tuples[w] = (t = ingest({}));\n        t[text] = w;\n        t[count] = c;\n        out.add.push(t);\n      } else if (c === 0) {\n        if (t) out.rem.push(t);\n        counts[w] = null;\n        tuples[w] = null;\n      } else if (t[count] !== c) {\n        t[count] = c;\n        out.mod.push(t);\n      }\n    }\n\n    return out.modifies(as);\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits, truthy} from 'vega-util';\n\n/**\n * Perform a cross-product of a tuple stream with itself.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object):boolean} [params.filter] - An optional filter\n *   function for selectively including tuples in the cross product.\n * @param {Array<string>} [params.as] - The names of the output fields.\n */\nexport default function Cross(params) {\n  Transform.call(this, null, params);\n}\n\nCross.Definition = {\n  'type': 'Cross',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'filter', 'type': 'expr' },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['a', 'b'] }\n  ]\n};\n\ninherits(Cross, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          as = _.as || ['a', 'b'],\n          a = as[0], b = as[1],\n          reset = !this.value\n              || pulse.changed(pulse.ADD_REM)\n              || _.modified('as')\n              || _.modified('filter');\n\n    let data = this.value;\n    if (reset) {\n      if (data) out.rem = data;\n      data = pulse.materialize(pulse.SOURCE).source;\n      out.add = this.value = cross(data, a, b, _.filter || truthy);\n    } else {\n      out.mod = data;\n    }\n\n    out.source = this.value;\n    return out.modifies(as);\n  }\n});\n\nfunction cross(input, a, b, filter) {\n  var data = [],\n      t = {},\n      n = input.length,\n      i = 0,\n      j, left;\n\n  for (; i<n; ++i) {\n    t[a] = left = input[i];\n    for (j=0; j<n; ++j) {\n      t[b] = input[j];\n      if (filter(t)) {\n        data.push(ingest(t));\n        t = {};\n        t[a] = left;\n      }\n    }\n  }\n\n  return data;\n}\n","import {\n  randomKDE,\n  randomLogNormal,\n  randomMixture,\n  randomNormal,\n  randomUniform\n} from 'vega-statistics';\n\nimport {error, hasOwnProperty} from 'vega-util';\n\nconst Distributions = {\n  kde:       randomKDE,\n  mixture:   randomMixture,\n  normal:    randomNormal,\n  lognormal: randomLogNormal,\n  uniform:   randomUniform\n};\n\nconst DISTRIBUTIONS = 'distributions',\n      FUNCTION = 'function',\n      FIELD = 'field';\n\n/**\n * Parse a parameter object for a probability distribution.\n * @param {object} def - The distribution parameter object.\n * @param {function():Array<object>} - A method for requesting\n *   source data. Used for distributions (such as KDE) that\n *   require sample data points. This method will only be\n *   invoked if the 'from' parameter for a target data source\n *   is not provided. Typically this method returns backing\n *   source data for a Pulse object.\n * @return {object} - The output distribution object.\n */\nexport default function parse(def, data) {\n  const func = def[FUNCTION];\n  if (!hasOwnProperty(Distributions, func)) {\n    error('Unknown distribution function: ' + func);\n  }\n\n  const d = Distributions[func]();\n\n  for (const name in def) {\n    // if data field, extract values\n    if (name === FIELD) {\n      d.data((def.from || data()).map(def[name]));\n    }\n\n    // if distribution mixture, recurse to parse each definition\n    else if (name === DISTRIBUTIONS) {\n      d[name](def[name].map(_ => parse(_, data)));\n    }\n\n    // otherwise, simply set the parameter\n    else if (typeof d[name] === FUNCTION) {\n      d[name](def[name]);\n    }\n  }\n\n  return d;\n}\n","import parseDist from './util/Distributions.js';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {sampleCurve} from 'vega-statistics';\nimport {error, extent, inherits} from 'vega-util';\n\n/**\n * Grid sample points for a probability density. Given a distribution and\n * a sampling extent, will generate points suitable for plotting either\n * PDF (probability density function) or CDF (cumulative distribution\n * function) curves.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {object} params.distribution - The probability distribution. This\n *   is an object parameter dependent on the distribution type.\n * @param {string} [params.method='pdf'] - The distribution method to sample.\n *   One of 'pdf' or 'cdf'.\n * @param {Array<number>} [params.extent] - The [min, max] extent over which\n *   to sample the distribution. This argument is required in most cases, but\n *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n *   that returns numerical sample points from which the extent can be deduced.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\nexport default function Density(params) {\n  Transform.call(this, null, params);\n}\n\nconst distributions = [\n  {\n    'key': {'function': 'normal'},\n    'params': [\n      { 'name': 'mean', 'type': 'number', 'default': 0 },\n      { 'name': 'stdev', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'lognormal'},\n    'params': [\n      { 'name': 'mean', 'type': 'number', 'default': 0 },\n      { 'name': 'stdev', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'uniform'},\n    'params': [\n      { 'name': 'min', 'type': 'number', 'default': 0 },\n      { 'name': 'max', 'type': 'number', 'default': 1 }\n    ]\n  },\n  {\n    'key': {'function': 'kde'},\n    'params': [\n      { 'name': 'field', 'type': 'field', 'required': true },\n      { 'name': 'from', 'type': 'data' },\n      { 'name': 'bandwidth', 'type': 'number', 'default': 0 }\n    ]\n  }\n];\n\nconst mixture = {\n  'key': {'function': 'mixture'},\n  'params': [\n    { 'name': 'distributions', 'type': 'param', 'array': true,\n      'params': distributions },\n    { 'name': 'weights', 'type': 'number', 'array': true }\n  ]\n};\n\nDensity.Definition = {\n  'type': 'Density',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'steps', 'type': 'number' },\n    { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n    { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n    { 'name': 'method', 'type': 'string', 'default': 'pdf',\n      'values': ['pdf', 'cdf'] },\n    { 'name': 'distribution', 'type': 'param',\n      'params': distributions.concat(mixture) },\n    { 'name': 'as', 'type': 'string', 'array': true,\n      'default': ['value', 'density'] }\n  ]\n};\n\ninherits(Density, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const dist = parseDist(_.distribution, source(pulse)),\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n      let method = _.method || 'pdf';\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n      if (!_.extent && !dist.data) {\n        error('Missing density extent parameter.');\n      }\n      method = dist[method];\n\n      const as = _.as || ['value', 'density'],\n            domain = _.extent || extent(dist.data()),\n            values = sampleCurve(method, domain, minsteps, maxsteps)\n              .map(v => {\n                const tuple = {};\n                tuple[as[0]] = v[0];\n                tuple[as[1]] = v[1];\n                return ingest(tuple);\n              });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n\nfunction source(pulse) {\n  return () => pulse.materialize(pulse.SOURCE).source;\n}\n","import {accessorName} from 'vega-util';\n\n// use either provided alias or accessor field name\nexport function fieldNames(fields, as) {\n  if (!fields) return null;\n  return fields.map((f, i) => as[i] || accessorName(f));\n}\n\nexport function partition(data, groupby, field) {\n  const groups = [],\n        get = f => f(t);\n  let map, i, n, t, k, g;\n\n  // partition data points into groups\n  if (groupby == null) {\n    groups.push(data.map(field));\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = (g = []);\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(field(t));\n    }\n  }\n\n  return groups;\n}\n","import {partition} from './util/util.js';\nimport {Transform, stableCompare} from 'vega-dataflow';\nimport {dotbin} from 'vega-statistics';\nimport {extent, identity, inherits, span} from 'vega-util';\n\nconst Output = 'bin';\n\n/**\n * Dot density binning for dot plot construction.\n * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to bin.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n * @param {number} [params.step] - The step size (bin width) within which dots should be\n *   stacked. Defaults to 1/30 of the extent of the data *field*.\n * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n *   stacks should be smoothed to reduce variance.\n */\nexport default function DotBin(params) {\n  Transform.call(this, null, params);\n}\n\nDotBin.Definition = {\n  'type': 'DotBin',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'step', 'type': 'number' },\n    { 'name': 'smooth', 'type': 'boolean', 'default': false },\n    { 'name': 'as', 'type': 'string', 'default': Output }\n  ]\n};\n\nconst autostep = (data, field) => span(extent(data, field)) / 30;\n\ninherits(DotBin, Transform, {\n  transform(_, pulse) {\n    if (this.value && !(_.modified() || pulse.changed())) {\n      return pulse; // early exit\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(pulse.source, _.groupby, identity),\n          smooth = _.smooth || false,\n          field = _.field,\n          step = _.step || autostep(source, field),\n          sort = stableCompare((a, b) => field(a) - field(b)),\n          as = _.as || Output,\n          n = groups.length;\n\n    // compute dotplot bins per group\n    let min = Infinity, max = -Infinity, i = 0, j;\n    for (; i<n; ++i) {\n      const g = groups[i].sort(sort);\n      j = -1;\n      for (const v of dotbin(g, step, smooth, field)) {\n        if (v < min) min = v;\n        if (v > max) max = v;\n        g[++j][as] = v;\n      }\n    }\n\n    this.value = {\n      start: min,\n      stop: max,\n      step: step\n    };\n    return pulse.reflow(true).modifies(as);\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {accessor, accessorFields, accessorName, inherits} from 'vega-util';\n\n/**\n * Wraps an expression function with access to external parameters.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function} params.expr - The expression function. The\n *  function should accept both a datum and a parameter object.\n *  This operator's value will be a new function that wraps the\n *  expression function with access to this operator's parameters.\n */\nexport default function Expression(params) {\n  Operator.call(this, null, update, params);\n  this.modified(true);\n}\n\ninherits(Expression, Operator);\n\nfunction update(_) {\n  const expr = _.expr;\n  return this.value && !_.modified('expr')\n    ? this.value\n    : accessor(\n        datum => expr(datum, _),\n        accessorFields(expr),\n        accessorName(expr)\n      );\n}\n","import {Transform} from 'vega-dataflow';\nimport {accessorName, inherits, toNumber} from 'vega-util';\n\n/**\n * Computes extents (min/max) for a data field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field over which to compute extends.\n */\nexport default function Extent(params) {\n  Transform.call(this, [undefined, undefined], params);\n}\n\nExtent.Definition = {\n  'type': 'Extent',\n  'metadata': {},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true }\n  ]\n};\n\ninherits(Extent, Transform, {\n  transform(_, pulse) {\n    const extent = this.value,\n          field = _.field,\n          mod = pulse.changed()\n            || pulse.modified(field.fields)\n            || _.modified('field');\n\n    let min = extent[0],\n        max = extent[1];\n    if (mod || min == null) {\n      min = +Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n      const v = toNumber(field(t));\n      if (v != null) {\n        // NaNs will fail all comparisons!\n        if (v < min) min = v;\n        if (v > max) max = v;\n      }\n    });\n\n    if (!Number.isFinite(min) || !Number.isFinite(max)) {\n      let name = accessorName(field);\n      if (name) name = ` for field \"${name}\"`;\n      pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n      min = max = undefined;\n    }\n    this.value = [min, max];\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Provides a bridge between a parent transform and a target subflow that\n * consumes only a subset of the tuples that pass through the parent.\n * @constructor\n * @param {Pulse} pulse - A pulse to use as the value of this operator.\n * @param {Transform} parent - The parent transform (typically a Facet instance).\n */\nexport default function Subflow(pulse, parent) {\n  Operator.call(this, pulse);\n  this.parent = parent;\n  this.count = 0;\n}\n\ninherits(Subflow, Operator, {\n  /**\n   * Routes pulses from this subflow to a target transform.\n   * @param {Transform} target - A transform that receives the subflow of tuples.\n   */\n  connect(target) {\n    this.detachSubflow = target.detachSubflow;\n    this.targets().add(target);\n    return (target.source = this);\n  },\n\n  /**\n   * Add an 'add' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being added.\n   */\n  add(t) {\n    this.count += 1;\n    this.value.add.push(t);\n  },\n\n  /**\n   * Add a 'rem' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being removed.\n   */\n  rem(t) {\n    this.count -= 1;\n    this.value.rem.push(t);\n  },\n\n  /**\n   * Add a 'mod' tuple to the subflow pulse.\n   * @param {Tuple} t - The tuple being modified.\n   */\n  mod(t) {\n    this.value.mod.push(t);\n  },\n\n  /**\n   * Re-initialize this operator's pulse value.\n   * @param {Pulse} pulse - The pulse to copy from.\n   * @see Pulse.init\n   */\n  init(pulse) {\n    this.value.init(pulse, pulse.NO_SOURCE);\n  },\n\n  /**\n   * Evaluate this operator. This method overrides the\n   * default behavior to simply return the contained pulse value.\n   * @return {Pulse}\n   */\n  evaluate() {\n    // assert: this.value.stamp === pulse.stamp\n    return this.value;\n  }\n});\n","import Subflow from './Subflow.js';\nimport {Transform, tupleid} from 'vega-dataflow';\nimport {fastmap, hasOwnProperty, inherits} from 'vega-util';\n\n/**\n * Facets a dataflow into a set of subflows based on a key.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): *} params.key - The key field to facet by.\n */\nexport default function Facet(params) {\n  Transform.call(this, {}, params);\n  this._keys = fastmap(); // cache previously calculated key values\n\n  // keep track of active subflows, use as targets array for listeners\n  // this allows us to limit propagation to only updated subflows\n  const a = this._targets = [];\n  a.active = 0;\n  a.forEach = f => {\n    for (let i=0, n=a.active; i<n; ++i) {\n      f(a[i], i, a);\n    }\n  };\n}\n\ninherits(Facet, Transform, {\n  activate(flow) {\n    this._targets[this._targets.active++] = flow;\n  },\n\n  // parent argument provided by PreFacet subclass\n  subflow(key, flow, pulse, parent) {\n    const flows = this.value;\n    let sf = hasOwnProperty(flows, key) && flows[key],\n        df, p;\n\n    if (!sf) {\n      p = parent || (p = this._group[key]) && p.tuple;\n      df = pulse.dataflow;\n      sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n      df.add(sf).connect(flow(df, key, p));\n      flows[key] = sf;\n      this.activate(sf);\n    } else if (sf.value.stamp < pulse.stamp) {\n      sf.init(pulse);\n      this.activate(sf);\n    }\n\n    return sf;\n  },\n\n  clean() {\n    const flows = this.value;\n    let detached = 0;\n    for (const key in flows) {\n      if (flows[key].count === 0) {\n        const detach = flows[key].detachSubflow;\n        if (detach) detach();\n        delete flows[key];\n        ++detached;\n      }\n    }\n\n    // remove inactive targets from the active targets array\n    if (detached) {\n      const active = this._targets.filter(sf => sf && sf.count > 0);\n      this.initTargets(active);\n    }\n  },\n\n  initTargets(act) {\n    const a = this._targets,\n          n = a.length,\n          m = act ? act.length : 0;\n    let i = 0;\n\n    for (; i<m; ++i) {\n      a[i] = act[i];\n    }\n    for (; i<n && a[i] != null; ++i) {\n      a[i] = null; // ensure old flows can be garbage collected\n    }\n    a.active = m;\n  },\n\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          key = _.key,\n          flow = _.subflow,\n          cache = this._keys,\n          rekey = _.modified('key'),\n          subflow = key => this.subflow(key, flow, pulse);\n\n    this._group = _.group || {};\n    this.initTargets(); // reset list of active subflows\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t),\n            k = cache.get(id);\n      if (k !== undefined) {\n        cache.delete(id);\n        subflow(k).rem(t);\n      }\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const k = key(t);\n      cache.set(tupleid(t), k);\n      subflow(k).add(t);\n    });\n\n    if (rekey || pulse.modified(key.fields)) {\n      pulse.visit(pulse.MOD, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 === k1) {\n          subflow(k1).mod(t);\n        } else {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    } else if (pulse.changed(pulse.MOD)) {\n      pulse.visit(pulse.MOD, t => {\n        subflow(cache.get(tupleid(t))).mod(t);\n      });\n    }\n\n    if (rekey) {\n      pulse.visit(pulse.REFLOW, t => {\n        const id = tupleid(t),\n              k0 = cache.get(id),\n              k1 = key(t);\n        if (k0 !== k1) {\n          cache.set(id, k1);\n          subflow(k0).rem(t);\n          subflow(k1).add(t);\n        }\n      });\n    }\n\n    if (pulse.clean()) {\n      df.runAfter(() => { this.clean(); cache.clean(); });\n    } else if (cache.empty > df.cleanThreshold) {\n      df.runAfter(cache.clean);\n    }\n\n    return pulse;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {array, field, inherits, isArray} from 'vega-util';\n\n/**\n * Generates one or more field accessor functions.\n * If the 'name' parameter is an array, an array of field accessors\n * will be created and the 'as' parameter will be ignored.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.name - The field name(s) to access.\n * @param {string} params.as - The accessor function name.\n */\nexport default function Field(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Field, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified()) ? this.value\n    : isArray(_.name) ? array(_.name).map(f => field(f))\n    : field(_.name, _.as);\n}\n","import {Transform, tupleid} from 'vega-dataflow';\nimport {fastmap, inherits} from 'vega-util';\n\n/**\n * Filters data tuples according to a predicate function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The predicate expression function\n *   that determines a tuple's filter status. Truthy values pass the filter.\n */\nexport default function Filter(params) {\n  Transform.call(this, fastmap(), params);\n}\n\nFilter.Definition = {\n  'type': 'Filter',\n  'metadata': {'changes': true},\n  'params': [\n    { 'name': 'expr', 'type': 'expr', 'required': true }\n  ]\n};\n\ninherits(Filter, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n          cache = this.value, // cache ids of filtered tuples\n          output = pulse.fork(),\n          add = output.add,\n          rem = output.rem,\n          mod = output.mod,\n          test = _.expr;\n    let isMod = true;\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      if (!cache.has(id)) rem.push(t);\n      else cache.delete(id);\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      if (test(t, _)) add.push(t);\n      else cache.set(tupleid(t), 1);\n    });\n\n    function revisit(t) {\n      const id = tupleid(t),\n            b = test(t, _),\n            s = cache.get(id);\n      if (b && s) {\n        cache.delete(id);\n        add.push(t);\n      } else if (!b && !s) {\n        cache.set(id, 1);\n        rem.push(t);\n      } else if (isMod && b && !s) {\n        mod.push(t);\n      }\n    }\n\n    pulse.visit(pulse.MOD, revisit);\n\n    if (_.modified()) {\n      isMod = false;\n      pulse.visit(pulse.REFLOW, revisit);\n    }\n\n    if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n    return output;\n  }\n});\n","import {fieldNames} from './util/util.js';\nimport {Transform, derive} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Flattens array-typed field values into new data objects.\n * If multiple fields are specified, they are treated as parallel arrays,\n * with output values included for each matching index (or null if missing).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} params.fields - An array of field\n *   accessors for the tuple fields that should be flattened.\n * @param {string} [params.index] - Optional output field name for index\n *   value. If unspecified, no index field is included in the output.\n * @param {Array<string>} [params.as] - Output field names for flattened\n *   array fields. Any unspecified fields will use the field name provided\n *   by the fields accessors.\n */\nexport default function Flatten(params) {\n  Transform.call(this, [], params);\n}\n\nFlatten.Definition = {\n  'type': 'Flatten',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'index', 'type': 'string' },\n    { 'name': 'as', 'type': 'string', 'array': true }\n  ]\n};\n\ninherits(Flatten, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(fields, _.as || []),\n          index = _.index || null,\n          m = as.length;\n\n    // remove any previous results\n    out.rem = this.value;\n\n    // generate flattened tuples\n    pulse.visit(pulse.SOURCE, t => {\n      const arrays = fields.map(f => f(t)),\n            maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n      let i = 0, j, d, v;\n\n      for (; i<maxlen; ++i) {\n        d = derive(t);\n        for (j=0; j<m; ++j) {\n          d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n        }\n        if (index) {\n          d[index] = i;\n        }\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    if (index) out.modifies(index);\n    return out.modifies(as);\n  }\n});\n","import {Transform, derive} from 'vega-dataflow';\nimport {accessorName, inherits} from 'vega-util';\n\n/**\n * Folds one more tuple fields into multiple tuples in which the field\n * name and values are available under new 'key' and 'value' fields.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.fields - An array of field accessors\n *   for the tuple fields that should be folded.\n * @param {Array<string>} [params.as] - Output field names for folded key\n *   and value fields, defaults to ['key', 'value'].\n */\nexport default function Fold(params) {\n  Transform.call(this, [], params);\n}\n\nFold.Definition = {\n  'type': 'Fold',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['key', 'value'] }\n  ]\n};\n\ninherits(Fold, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          fnames = fields.map(accessorName),\n          as = _.as || ['key', 'value'],\n          k = as[0],\n          v = as[1],\n          n = fields.length;\n\n    out.rem = this.value;\n\n    pulse.visit(pulse.SOURCE, t => {\n      for (let i=0, d; i<n; ++i) {\n        d = derive(t);\n        d[k] = fnames[i];\n        d[v] = fields[i](t);\n        out.add.push(d);\n      }\n    });\n\n    this.value = out.source = out.add;\n    return out.modifies(as);\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Invokes a function for each data tuple and saves the results as a new field.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n * @param {string} params.as - The field name under which to save the result.\n * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n *   added tuples only, and does not update in response to modifications.\n */\nexport default function Formula(params) {\n  Transform.call(this, null, params);\n}\n\nFormula.Definition = {\n  'type': 'Formula',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'expr', 'type': 'expr', 'required': true },\n    { 'name': 'as', 'type': 'string', 'required': true },\n    { 'name': 'initonly', 'type': 'boolean' }\n  ]\n};\n\ninherits(Formula, Transform, {\n  transform (_, pulse) {\n    const func = _.expr,\n          as = _.as,\n          mod = _.modified(),\n          flag = _.initonly ? pulse.ADD\n            : mod ? pulse.SOURCE\n            : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD\n            : pulse.ADD;\n\n    if (mod) {\n      // parameters updated, need to reflow\n      pulse = pulse.materialize().reflow(true);\n    }\n\n    if (!_.initonly) {\n      pulse.modifies(as);\n    }\n\n    return pulse.visit(flag, t => t[as] = func(t, _));\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Generates data tuples using a provided generator function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Parameters): object} params.generator - A tuple generator\n *   function. This function is given the operator parameters as input.\n *   Changes to any additional parameters will not trigger re-calculation\n *   of previously generated tuples. Only future tuples are affected.\n * @param {number} params.size - The number of tuples to produce.\n */\nexport default function Generate(params) {\n  Transform.call(this, [], params);\n}\n\ninherits(Generate, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.ALL),\n          gen = _.generator;\n\n    let data = this.value,\n        num = _.size - data.length,\n        add, rem, t;\n\n    if (num > 0) {\n      // need more tuples, generate and add\n      for (add=[]; --num >= 0;) {\n        add.push(t = ingest(gen(_)));\n        data.push(t);\n      }\n      out.add = out.add.length\n        ? out.materialize(out.ADD).add.concat(add)\n        : add;\n    } else {\n      // need fewer tuples, remove\n      rem = data.slice(0, -num);\n      out.rem = out.rem.length\n        ? out.materialize(out.REM).rem.concat(rem)\n        : rem;\n      data = data.slice(-num);\n    }\n\n    out.source = this.value = data;\n    return out;\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {accessorName, error, inherits} from 'vega-util';\nimport {max, mean, median, min} from 'd3-array';\n\nconst Methods = {\n  value: 'value',\n  median: median,\n  mean: mean,\n  min: min,\n  max: max\n};\n\nconst Empty = [];\n\n/**\n * Impute missing values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The value field to impute.\n * @param {Array<function(object): *>} [params.groupby] - An array of\n *   accessors to determine series within which to perform imputation.\n * @param {function(object): *} params.key - An accessor for a key value.\n *   Each key value should be unique within a group. New tuples will be\n *   imputed for any key values that are not found within a group.\n * @param {Array<*>} [params.keyvals] - Optional array of required key\n *   values. New tuples will be imputed for any key values that are not\n *   found within a group. In addition, these values will be automatically\n *   augmented with the key values observed in the input data.\n * @param {string} [method='value'] - The imputation method to use. One of\n *   'value', 'mean', 'median', 'max', 'min'.\n * @param {*} [value=0] - The constant value to use for imputation\n *   when using method 'value'.\n */\nexport default function Impute(params) {\n  Transform.call(this, [], params);\n}\n\nImpute.Definition = {\n  'type': 'Impute',\n  'metadata': {'changes': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'key', 'type': 'field', 'required': true },\n    { 'name': 'keyvals', 'array': true },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'method', 'type': 'enum', 'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min'] },\n    { 'name': 'value', 'default': 0 }\n  ]\n};\n\nfunction getValue(_) {\n  var m = _.method || Methods.value, v;\n\n  if (Methods[m] == null) {\n    error('Unrecognized imputation method: ' + m);\n  } else if (m === Methods.value) {\n    v = _.value !== undefined ? _.value : 0;\n    return () => v;\n  } else {\n    return Methods[m];\n  }\n}\n\nfunction getField(_) {\n  const f = _.field;\n  return t => t ? f(t) : NaN;\n}\n\ninherits(Impute, Transform, {\n  transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        impute = getValue(_),\n        field = getField(_),\n        fName = accessorName(_.field),\n        kName = accessorName(_.key),\n        gNames = (_.groupby || []).map(accessorName),\n        groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n        curr = [],\n        prev = this.value,\n        m = groups.domain.length,\n        group, value, gVals, kVal, g, i, j, l, n, t;\n\n    for (g=0, l=groups.length; g<l; ++g) {\n      group = groups[g];\n      gVals = group.values;\n      value = NaN;\n\n      // add tuples for missing values\n      for (j=0; j<m; ++j) {\n        if (group[j] != null) continue;\n        kVal = groups.domain[j];\n\n        t = {_impute: true};\n        for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];\n        t[kName] = kVal;\n        t[fName] = Number.isNaN(value) ? (value = impute(group, field)) : value;\n\n        curr.push(ingest(t));\n      }\n    }\n\n    // update pulse with imputed tuples\n    if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n    if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n    this.value = curr;\n\n    return out;\n  }\n});\n\nfunction partition(data, groupby, key, keyvals) {\n  var get = f => f(t),\n      groups = [],\n      domain = keyvals ? keyvals.slice() : [],\n      kMap = {},\n      gMap = {}, gVals, gKey,\n      group, i, j, k, n, t;\n\n  domain.forEach((k, i) => kMap[k] = i + 1);\n\n  for (i=0, n=data.length; i<n; ++i) {\n    t = data[i];\n    k = key(t);\n    j = kMap[k] || (kMap[k] = domain.push(k));\n\n    gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n    if (!(group = gMap[gKey])) {\n      group = (gMap[gKey] = []);\n      groups.push(group);\n      group.values = gVals;\n    }\n    group[j-1] = t;\n  }\n\n  groups.domain = domain;\n  return groups;\n}\n","import Aggregate from './Aggregate.js';\nimport {ValidAggregateOps} from './util/AggregateOps.js';\nimport {extend, inherits} from 'vega-util';\n\n/**\n * Extend input tuples with aggregate values.\n * Calcuates aggregate values and joins them with the input stream.\n * @constructor\n */\nexport default function JoinAggregate(params) {\n  Aggregate.call(this, params);\n}\n\nJoinAggregate.Definition = {\n  'type': 'JoinAggregate',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidAggregateOps },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(JoinAggregate, Aggregate, {\n  transform(_, pulse) {\n    const aggr = this,\n          mod = _.modified();\n    let cells;\n\n    // process all input tuples to calculate aggregates\n    if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n      cells = aggr.value = mod ? aggr.init(_) : {};\n      pulse.visit(pulse.SOURCE, t => aggr.add(t));\n    } else {\n      cells = aggr.value = aggr.value || this.init(_);\n      pulse.visit(pulse.REM, t => aggr.rem(t));\n      pulse.visit(pulse.ADD, t => aggr.add(t));\n    }\n\n    // update aggregation cells\n    aggr.changes();\n\n    // write aggregate values to input tuples\n    pulse.visit(pulse.SOURCE, t => {\n      extend(t, cells[aggr.cellkey(t)].tuple);\n    });\n\n    return pulse.reflow(mod).modifies(this._outputs);\n  },\n\n  changes() {\n    const adds = this._adds,\n          mods = this._mods;\n    let i, n;\n\n    for (i=0, n=this._alen; i<n; ++i) {\n      this.celltuple(adds[i]);\n      adds[i] = null; // for garbage collection\n    }\n\n    for (i=0, n=this._mlen; i<n; ++i) {\n      this.celltuple(mods[i]);\n      mods[i] = null; // for garbage collection\n    }\n\n    this._alen = this._mlen = 0; // reset list of active cells\n  }\n});\n","import {partition} from './util/util.js';\nimport {randomKDE} from 'vega-statistics';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {sampleCurve} from 'vega-statistics';\nimport {accessorName, error, extent, inherits} from 'vega-util';\n\n/**\n * Compute kernel density estimates (KDE) for one or more data groups.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {function(object): *} params.field - An accessor for the data field\n *   to estimate.\n * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n *   If zero or unspecified, the bandwidth is automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n *   density (false) or cumulative distribution (true) should be generated.\n * @param {Array<number>} [params.extent] - The domain extent over which to\n *   plot the density. If unspecified, the [min, max] data extent is used.\n * @param {string} [params.resolve='independent'] - Indicates how parameters for\n *   multiple densities should be resolved. If \"independent\" (the default), each\n *   density may have its own domain extent and dynamic number of curve sample\n *   steps. If \"shared\", the KDE transform will ensure that all densities are\n *   defined over a shared domain and curve steps, enabling stacking.\n * @param {number} [params.minsteps=25] - The minimum number of curve samples\n *   for plotting the density.\n * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n *   for plotting the density.\n * @param {number} [params.steps] - The exact number of curve samples for\n *   plotting the density. If specified, overrides both minsteps and maxsteps\n *   to set an exact number of uniform samples. Useful in conjunction with\n *   a fixed extent to ensure consistent sample points for stacked densities.\n */\nexport default function KDE(params) {\n  Transform.call(this, null, params);\n}\n\nKDE.Definition = {\n  'type': 'KDE',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'cumulative', 'type': 'boolean', 'default': false },\n    { 'name': 'counts', 'type': 'boolean', 'default': false },\n    { 'name': 'bandwidth', 'type': 'number', 'default': 0 },\n    { 'name': 'extent', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n    { 'name': 'steps', 'type': 'number' },\n    { 'name': 'minsteps', 'type': 'number', 'default': 25 },\n    { 'name': 'maxsteps', 'type': 'number', 'default': 200 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'default': ['value', 'density'] }\n  ]\n};\n\ninherits(KDE, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n    if (!this.value || pulse.changed() || _.modified()) {\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition(source, _.groupby, _.field),\n            names = (_.groupby || []).map(accessorName),\n            bandwidth = _.bandwidth,\n            method = _.cumulative ? 'cdf' : 'pdf',\n            as = _.as || ['value', 'density'],\n            values = [];\n\n      let domain = _.extent,\n          minsteps = _.steps || _.minsteps || 25,\n          maxsteps = _.steps || _.maxsteps || 200;\n\n      if (method !== 'pdf' && method !== 'cdf') {\n        error('Invalid density method: ' + method);\n      }\n\n      if (_.resolve === 'shared') {\n        if (!domain) domain = extent(source, _.field);\n        minsteps = maxsteps = _.steps || maxsteps;\n      }\n\n      groups.forEach(g => {\n        const density = randomKDE(g, bandwidth)[method],\n              scale = _.counts ? g.length : 1,\n              local = domain || extent(g);\n\n        sampleCurve(density, local, minsteps, maxsteps)\n          .forEach(v => {\n            const t = {};\n            for (let i=0; i<names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(ingest(t));\n          });\n      });\n\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n    }\n\n    return out;\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits, key} from 'vega-util';\n\n/**\n * Generates a key function.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<string>} params.fields - The field name(s) for the key function.\n * @param {boolean} params.flat - A boolean flag indicating if the field names\n *  should be treated as flat property names, side-stepping nested field\n *  lookups normally indicated by dot or bracket notation.\n */\nexport default function Key(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(Key, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified()) ? this.value : key(_.fields, _.flat);\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {array, inherits} from 'vega-util';\n\n/**\n * Load and parse data from an external source. Marshalls parameter\n * values and then invokes the Dataflow request method.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {string} params.url - The URL to load from.\n * @param {object} params.format - The data format options.\n */\nexport default function Load(params) {\n  Transform.call(this, [], params);\n  this._pending = null;\n}\n\ninherits(Load, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow;\n\n    if (this._pending) {\n      // update state and return pulse\n      return output(this, pulse, this._pending);\n    }\n\n    if (stop(_)) return pulse.StopPropagation;\n\n    if (_.values) {\n      // parse and ingest values, return output pulse\n      return output(this, pulse, df.parse(_.values, _.format));\n    } else if (_.async) {\n      // return promise for non-blocking async loading\n      const p = df.request(_.url, _.format).then(res => {\n        this._pending = array(res.data);\n        return df => df.touch(this);\n      });\n      return {async: p};\n    } else {\n      // return promise for synchronous loading\n      return df.request(_.url, _.format)\n        .then(res => output(this, pulse, array(res.data)));\n    }\n  }\n});\n\nfunction stop(_) {\n  return _.modified('async') && !(\n    _.modified('values') || _.modified('url') || _.modified('format')\n  );\n}\n\nfunction output(op, pulse, data) {\n  data.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = op.value;\n  op.value = out.source = out.add = data;\n  op._pending = null;\n  if (out.rem.length) out.clean(true);\n  return out;\n}\n","import {Transform} from 'vega-dataflow';\nimport {accessorName, error, inherits} from 'vega-util';\n\n/**\n * Extend tuples by joining them with values from a lookup table.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Map} params.index - The lookup table map.\n * @param {Array<function(object): *} params.fields - The fields to lookup.\n * @param {Array<string>} params.as - Output field names for each lookup value.\n * @param {*} [params.default] - A default value to use if lookup fails.\n */\nexport default function Lookup(params) {\n  Transform.call(this, {}, params);\n}\n\nLookup.Definition = {\n  'type': 'Lookup',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'index', 'type': 'index', 'params': [\n        {'name': 'from', 'type': 'data', 'required': true },\n        {'name': 'key', 'type': 'field', 'required': true }\n      ] },\n    { 'name': 'values', 'type': 'field', 'array': true },\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true },\n    { 'name': 'as', 'type': 'string', 'array': true },\n    { 'name': 'default', 'default': null }\n  ]\n};\n\ninherits(Lookup, Transform, {\n  transform(_, pulse) {\n    const keys = _.fields,\n          index = _.index,\n          values = _.values,\n          defaultValue = _.default==null ? null : _.default,\n          reset = _.modified(),\n          n = keys.length;\n\n    let flag = reset ? pulse.SOURCE : pulse.ADD,\n        out = pulse,\n        as = _.as,\n        set, m, mods;\n\n    if (values) {\n      m = values.length;\n\n      if (n > 1 && !as) {\n        error('Multi-field lookup requires explicit \"as\" parameter.');\n      }\n      if (as && as.length !== n * m) {\n        error('The \"as\" parameter has too few output field names.');\n      }\n      as = as || values.map(accessorName);\n\n      set = function(t) {\n        for (var i=0, k=0, j, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;\n          else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);\n        }\n      };\n    } else {\n      if (!as) {\n        error('Missing output field names.');\n      }\n\n      set = function(t) {\n        for (var i=0, v; i<n; ++i) {\n          v = index.get(keys[i](t));\n          t[as[i]] = v==null ? defaultValue : v;\n        }\n      };\n    }\n\n    if (reset) {\n      out = pulse.reflow(true);\n    } else {\n      mods = keys.some(k =>pulse.modified(k.fields));\n      flag |= (mods ? pulse.MOD : 0);\n    }\n    pulse.visit(flag, set);\n\n    return out.modifies(as);\n  }\n});\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Computes global min/max extents over a collection of extents.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<number>>} params.extents - The input extents.\n */\nexport default function MultiExtent(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(MultiExtent, Operator);\n\nfunction update(_) {\n  if (this.value && !_.modified()) {\n    return this.value;\n  }\n\n  const ext = _.extents,\n        n = ext.length;\n\n  let min = +Infinity,\n      max = -Infinity,\n      i, e;\n\n  for (i = 0; i < n; ++i) {\n    e = ext[i];\n    if (e[0] < min) min = e[0];\n    if (e[1] > max) max = e[1];\n  }\n  return [min, max];\n}\n","import {Operator} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Merge a collection of value arrays.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<Array<*>>} params.values - The input value arrrays.\n */\nexport default function MultiValues(params) {\n  Operator.call(this, null, update, params);\n}\n\ninherits(MultiValues, Operator);\n\nfunction update(_) {\n  return (this.value && !_.modified())\n    ? this.value\n    : _.values.reduce((data, _) => data.concat(_), []);\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Operator whose value is simply its parameter hash. This operator is\n * useful for enabling reactive updates to values of nested objects.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Params(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Params, Transform, {\n  transform(_, pulse) {\n    this.modified(_.modified());\n    this.value = _;\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n  }\n});\n","import Aggregate from './Aggregate.js';\nimport {ValidAggregateOps} from './util/AggregateOps.js';\nimport {accessor, accessorFields, ascending, inherits} from 'vega-util';\n\n/**\n * Aggregate and pivot selected field values to become new fields.\n * This operator is useful to construction cross-tabulations.\n * @constructor\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n * @param {function(object): *} params.field - The field to pivot on. The unique\n *  values of this field become new field names in the output stream.\n * @param {function(object): *} params.value - The field to populate pivoted fields.\n *  The aggregate values of this field become the values of the new pivoted fields.\n * @param {string} [params.op] - The aggregation operation for the value field,\n *  applied per cell in the output stream. The default is \"sum\".\n * @param {number} [params.limit] - An optional parameter indicating the maximum\n *  number of pivoted fields to generate. The pivoted field names are sorted in\n *  ascending order prior to enforcing the limit.\n */\nexport default function Pivot(params) {\n  Aggregate.call(this, params);\n}\n\nPivot.Definition = {\n  'type': 'Pivot',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'value', 'type': 'field', 'required': true },\n    { 'name': 'op', 'type': 'enum', 'values': ValidAggregateOps, 'default': 'sum' },\n    { 'name': 'limit', 'type': 'number', 'default': 0 },\n    { 'name': 'key', 'type': 'field' }\n  ]\n};\n\ninherits(Pivot, Aggregate, {\n  _transform: Aggregate.prototype.transform,\n  transform(_, pulse) {\n    return this._transform(aggregateParams(_, pulse), pulse);\n  }\n});\n\n// Shoehorn a pivot transform into an aggregate transform!\n// First collect all unique pivot field values.\n// Then generate aggregate fields for each output pivot field.\nfunction aggregateParams(_, pulse) {\n  const key    = _.field,\n        value  = _.value,\n        op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n        fields = accessorFields(key).concat(accessorFields(value)),\n        keys   = pivotKeys(key, _.limit || 0, pulse);\n\n  // if data stream content changes, pivot fields may change\n  // flag parameter modification to ensure re-initialization\n  if (pulse.changed()) _.set('__pivot__', null, null, true);\n\n  return {\n    key:      _.key,\n    groupby:  _.groupby,\n    ops:      keys.map(() => op),\n    fields:   keys.map(k => get(k, key, value, fields)),\n    as:       keys.map(k => k + ''),\n    modified: _.modified.bind(_)\n  };\n}\n\n// Generate aggregate field accessor.\n// Output NaN for non-existent values; aggregator will ignore!\nfunction get(k, key, value, fields) {\n  return accessor(\n    d => key(d) === k ? value(d) : NaN,\n    fields,\n    k + ''\n  );\n}\n\n// Collect (and optionally limit) all unique pivot values.\nfunction pivotKeys(key, limit, pulse) {\n  const map = {},\n        list = [];\n\n  pulse.visit(pulse.SOURCE, t => {\n    const k = key(t);\n    if (!map[k]) {\n      map[k] = 1;\n      list.push(k);\n    }\n  });\n\n  list.sort(ascending);\n\n  return limit ? list.slice(0, limit) : list;\n}\n","import Facet from './Facet.js';\nimport {ingest, tupleid} from 'vega-dataflow';\nimport {accessorFields, error, inherits} from 'vega-util';\n\n/**\n * Partitions pre-faceted data into tuple subflows.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(Dataflow, string): Operator} params.subflow - A function\n *   that generates a subflow of operators and returns its root operator.\n * @param {function(object): Array<object>} params.field - The field\n *   accessor for an array of subflow tuple objects.\n */\nexport default function PreFacet(params) {\n  Facet.call(this, params);\n}\n\ninherits(PreFacet, Facet, {\n  transform(_, pulse) {\n    const flow = _.subflow,\n          field = _.field,\n          subflow = t => this.subflow(tupleid(t), flow, pulse, t);\n\n    if (_.modified('field') || field && pulse.modified(accessorFields(field))) {\n      error('PreFacet does not support field modification.');\n    }\n\n    this.initTargets(); // reset list of active subflows\n\n    if (field) {\n      pulse.visit(pulse.MOD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.mod(_));\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.add(ingest(_)));\n      });\n\n      pulse.visit(pulse.REM, t => {\n        const sf = subflow(t);\n        field(t).forEach(_ => sf.rem(_));\n      });\n    } else {\n      pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n      pulse.visit(pulse.ADD, t => subflow(t).add(t));\n      pulse.visit(pulse.REM, t => subflow(t).rem(t));\n    }\n\n    if (pulse.clean()) {\n      pulse.runAfter(() => this.clean());\n    }\n\n    return pulse;\n  }\n});\n","import {fieldNames} from './util/util.js';\nimport {Transform, ingest, rederive, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Performs a relational projection, copying selected fields from source\n * tuples to a new set of derived tuples.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *} params.fields - The fields to project,\n *   as an array of field accessors. If unspecified, all fields will be\n *   copied with names unchanged.\n * @param {Array<string>} [params.as] - Output field names for each projected\n *   field. Any unspecified fields will use the field name provided by\n *   the field accessor.\n */\nexport default function Project(params) {\n  Transform.call(this, null, params);\n}\n\nProject.Definition = {\n  'type': 'Project',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true }\n  ]\n};\n\ninherits(Project, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          fields = _.fields,\n          as = fieldNames(_.fields, _.as || []),\n          derive = fields\n            ? (s, t) => project(s, t, fields, as)\n            : rederive;\n\n    let lut;\n    if (this.value) {\n      lut = this.value;\n    } else {\n      pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    pulse.visit(pulse.REM, t => {\n      const id = tupleid(t);\n      out.rem.push(lut[id]);\n      lut[id] = null;\n    });\n\n    pulse.visit(pulse.ADD, t => {\n      const dt = derive(t, ingest({}));\n      lut[tupleid(t)] = dt;\n      out.add.push(dt);\n    });\n\n    pulse.visit(pulse.MOD, t => {\n      out.mod.push(derive(t, lut[tupleid(t)]));\n    });\n\n    return out;\n  }\n});\n\nfunction project(s, t, fields, as) {\n  for (let i=0, n=fields.length; i<n; ++i) {\n    t[as[i]] = fields[i](s);\n  }\n  return t;\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Proxy the value of another operator as a pure signal value.\n * Ensures no tuples are propagated.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {*} params.value - The value to proxy, becomes the value of this operator.\n */\nexport default function Proxy(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Proxy, Transform, {\n  transform(_, pulse) {\n    this.value = _.value;\n    return _.modified('value')\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  }\n});\n","import {partition} from './util/util.js';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {quantiles} from 'vega-statistics';\nimport {accessorName, inherits} from 'vega-util';\nimport {range} from 'd3-array';\n\n/**\n * Generates sample quantile values from an input data stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - An accessor for the data field\n *   over which to calculate quantile values.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {Array<number>} [params.probs] - An array of probabilities in\n *   the range (0, 1) for which to compute quantile values. If not specified,\n *   the *step* parameter will be used.\n * @param {Array<number>} [params.step=0.01] - A probability step size for\n *   sampling quantile values. All values from one-half the step size up to\n *   1 (exclusive) will be sampled. This parameter is only used if the\n *   *quantiles* parameter is not provided.\n */\nexport default function Quantile(params) {\n  Transform.call(this, null, params);\n}\n\nQuantile.Definition = {\n  'type': 'Quantile',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'probs', 'type': 'number', 'array': true },\n    { 'name': 'step', 'type': 'number', 'default': 0.01 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'default': ['prob', 'value'] }\n  ]\n};\n\nconst EPSILON = 1e-14;\n\ninherits(Quantile, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n          as = _.as || ['prob', 'value'];\n\n    if (this.value && !_.modified() && !pulse.changed()) {\n      out.source = this.value;\n      return out;\n    }\n\n    const source = pulse.materialize(pulse.SOURCE).source,\n          groups = partition(source, _.groupby, _.field),\n          names = (_.groupby || []).map(accessorName),\n          values = [],\n          step = _.step || 0.01,\n          p = _.probs || range(step/2, 1 - EPSILON, step),\n          n = p.length;\n\n    groups.forEach(g => {\n      const q = quantiles(g, p);\n\n      for (let i=0; i<n; ++i) {\n        const t = {};\n        for (let i=0; i<names.length; ++i) {\n          t[names[i]] = g.dims[i];\n        }\n        t[as[0]] = p[i];\n        t[as[1]] = q[i];\n        values.push(ingest(t));\n      }\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.add = out.source = values;\n\n    return out;\n  }\n});\n","import {Transform, derive, tupleid} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Relays a data stream between data processing pipelines.\n * If the derive parameter is set, this transform will create derived\n * copies of observed tuples. This provides derived data streams in which\n * modifications to the tuples do not pollute an upstream data source.\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.derive=false] - Boolean flag indicating if\n *   the transform should make derived copies of incoming tuples.\n * @constructor\n */\nexport default function Relay(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Relay, Transform, {\n  transform(_, pulse) {\n    let out, lut;\n\n    if (this.value) {\n      lut = this.value;\n    } else {\n      out = pulse = pulse.addAll();\n      lut = this.value = {};\n    }\n\n    if (_.derive) {\n      out = pulse.fork(pulse.NO_SOURCE);\n\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t);\n        lut[tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n\n      pulse.visit(pulse.MOD, t => {\n        const dt = lut[tupleid(t)];\n        for (const k in t) {\n          dt[k] = t[k];\n          // down stream writes may overwrite re-derived tuples\n          // conservatively mark all source fields as modified\n          out.modifies(k);\n        }\n        out.mod.push(dt);\n      });\n    }\n\n    return out;\n  }\n});\n","import {Transform, tupleid} from 'vega-dataflow';\nimport {random} from 'vega-statistics';\nimport {inherits} from 'vega-util';\n\n/**\n * Samples tuples passing through this operator.\n * Uses reservoir sampling to maintain a representative sample.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} [params.size=1000] - The maximum number of samples.\n */\nexport default function Sample(params) {\n  Transform.call(this, [], params);\n  this.count = 0;\n}\n\nSample.Definition = {\n  'type': 'Sample',\n  'metadata': {},\n  'params': [\n    { 'name': 'size', 'type': 'number', 'default': 1000 }\n  ]\n};\n\ninherits(Sample, Transform, {\n  transform(_, pulse) {\n    const out = pulse.fork(pulse.NO_SOURCE),\n          mod = _.modified('size'),\n          num = _.size,\n          map = this.value.reduce((m, t) => (m[tupleid(t)] = 1, m), {});\n\n    let res = this.value,\n        cnt = this.count,\n        cap = 0;\n\n    // sample reservoir update function\n    function update(t) {\n      let p, idx;\n\n      if (res.length < num) {\n        res.push(t);\n      } else {\n        idx = ~~((cnt + 1) * random());\n        if (idx < res.length && idx >= cap) {\n          p = res[idx];\n          if (map[tupleid(p)]) out.rem.push(p); // eviction\n          res[idx] = t;\n        }\n      }\n      ++cnt;\n    }\n\n    if (pulse.rem.length) {\n      // find all tuples that should be removed, add to output\n      pulse.visit(pulse.REM, t => {\n        const id = tupleid(t);\n        if (map[id]) {\n          map[id] = -1;\n          out.rem.push(t);\n        }\n        --cnt;\n      });\n\n      // filter removed tuples out of the sample reservoir\n      res = res.filter(t => map[tupleid(t)] !== -1);\n    }\n\n    if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n      // replenish sample if backing data source is available\n      cap = cnt = res.length;\n      pulse.visit(pulse.SOURCE, t => {\n        // update, but skip previously sampled tuples\n        if (!map[tupleid(t)]) update(t);\n      });\n      cap = -1;\n    }\n\n    if (mod && res.length > num) {\n      const n = res.length-num;\n      for (let i=0; i<n; ++i) {\n        map[tupleid(res[i])] = -1;\n        out.rem.push(res[i]);\n      }\n      res = res.slice(n);\n    }\n\n    if (pulse.mod.length) {\n      // propagate modified tuples in the sample reservoir\n      pulse.visit(pulse.MOD, t => {\n        if (map[tupleid(t)]) out.mod.push(t);\n      });\n    }\n\n    if (pulse.add.length) {\n      // update sample reservoir\n      pulse.visit(pulse.ADD, update);\n    }\n\n    if (pulse.add.length || cap < 0) {\n      // output newly added tuples\n      out.add = res.filter(t => !map[tupleid(t)]);\n    }\n\n    this.count = cnt;\n    this.value = out.source = res;\n    return out;\n  }\n});\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\nimport {range} from 'd3-array';\n\n/**\n * Generates data tuples for a specified sequence range of numbers.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {number} params.start - The first number in the sequence.\n * @param {number} params.stop - The last number (exclusive) in the sequence.\n * @param {number} [params.step=1] - The step size between numbers in the sequence.\n */\nexport default function Sequence(params) {\n  Transform.call(this, null, params);\n}\n\nSequence.Definition = {\n  'type': 'Sequence',\n  'metadata': {'generates': true, 'changes': true},\n  'params': [\n    { 'name': 'start', 'type': 'number', 'required': true },\n    { 'name': 'stop', 'type': 'number', 'required': true },\n    { 'name': 'step', 'type': 'number', 'default': 1 },\n    { 'name': 'as', 'type': 'string', 'default': 'data' }\n  ]\n};\n\ninherits(Sequence, Transform, {\n  transform(_, pulse) {\n    if (this.value && !_.modified()) return;\n\n    const out = pulse.materialize().fork(pulse.MOD),\n          as = _.as || 'data';\n\n    out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n\n    this.value = range(_.start, _.stop, _.step || 1).map(v => {\n      const t = {};\n      t[as] = v;\n      return ingest(t);\n    });\n\n    out.add = pulse.add.concat(this.value);\n\n    return out;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Propagates a new pulse without any tuples so long as the input\n * pulse contains some added, removed or modified tuples.\n * @param {object} params - The parameters for this operator.\n * @constructor\n */\nexport default function Sieve(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\ninherits(Sieve, Transform, {\n  transform(_, pulse) {\n    this.value = pulse.source;\n    return pulse.changed()\n      ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)\n      : pulse.StopPropagation;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {\n  TIME_UNITS, timeBin, timeFloor, timeInterval, timeUnits,\n  utcFloor, utcInterval\n} from 'vega-time';\nimport {accessorFields, extent, inherits, peek} from 'vega-util';\n\n/**\n * Discretize dates to specific time units.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The data field containing date/time values.\n */\nexport default function TimeUnit(params) {\n  Transform.call(this, null, params);\n}\n\nconst OUTPUT = ['unit0', 'unit1'];\n\nTimeUnit.Definition = {\n  'type': 'TimeUnit',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field', 'required': true },\n    { 'name': 'interval', 'type': 'boolean', 'default': true },\n    { 'name': 'units', 'type': 'enum', 'values': TIME_UNITS, 'array': true },\n    { 'name': 'step', 'type': 'number', 'default': 1 },\n    { 'name': 'maxbins', 'type': 'number', 'default': 40 },\n    { 'name': 'extent', 'type': 'date', 'array': true},\n    { 'name': 'timezone', 'type': 'enum', 'default': 'local', 'values': ['local', 'utc'] },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': OUTPUT }\n  ]\n};\n\ninherits(TimeUnit, Transform, {\n  transform(_, pulse) {\n    const field = _.field,\n          band = _.interval !== false,\n          utc = _.timezone === 'utc',\n          floor = this._floor(_, pulse),\n          offset = (utc ? utcInterval : timeInterval)(floor.unit).offset,\n          as = _.as || OUTPUT,\n          u0 = as[0],\n          u1 = as[1],\n          step = floor.step;\n\n    let min = floor.start || Infinity,\n        max = floor.stop || -Infinity,\n        flag = pulse.ADD;\n\n    if (\n      _.modified() ||\n      pulse.changed(pulse.REM) ||\n      pulse.modified(accessorFields(field))\n    ) {\n      pulse = pulse.reflow(true);\n      flag = pulse.SOURCE;\n      min = Infinity;\n      max = -Infinity;\n    }\n\n    pulse.visit(flag, t => {\n      const v = field(t);\n      let a, b;\n      if (v == null) {\n        t[u0] = null;\n        if (band) t[u1] = null;\n      } else {\n        t[u0] = a = b = floor(v);\n        if (band) t[u1] = b = offset(a, step);\n        if (a < min) min = a;\n        if (b > max) max = b;\n      }\n    });\n\n    floor.start = min;\n    floor.stop = max;\n\n    return pulse.modifies(band ? as : u0);\n  },\n\n  _floor(_, pulse) {\n    const utc = _.timezone === 'utc';\n\n    // get parameters\n    const {units, step} = _.units\n      ? {units: _.units, step: _.step || 1}\n      : timeBin({\n        extent:  _.extent || extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      });\n\n    // check / standardize time units\n    const tunits = timeUnits(units),\n          prev = this.value || {},\n          floor = (utc ? utcFloor : timeFloor)(tunits, step);\n\n    floor.unit = peek(tunits);\n    floor.units = tunits;\n    floor.step = step;\n    floor.start = prev.start;\n    floor.stop = prev.stop;\n    return this.value = floor;\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {fastmap, inherits} from 'vega-util';\n\n/**\n * An index that maps from unique, string-coerced, field values to tuples.\n * Assumes that the field serves as a unique key with no duplicate values.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The field accessor to index.\n */\nexport default function TupleIndex(params) {\n  Transform.call(this, fastmap(), params);\n}\n\ninherits(TupleIndex, Transform, {\n  transform(_, pulse) {\n    const df = pulse.dataflow,\n        field = _.field,\n        index = this.value,\n        set = t => index.set(field(t), t);\n\n    let mod = true;\n\n    if (_.modified('field') || pulse.modified(field.fields)) {\n      index.clear();\n      pulse.visit(pulse.SOURCE, set);\n    } else if (pulse.changed()) {\n      pulse.visit(pulse.REM, t => index.delete(field(t)));\n      pulse.visit(pulse.ADD, set);\n    } else {\n      mod = false;\n    }\n\n    this.modified(mod);\n    if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n    return pulse.fork();\n  }\n});\n","import {Transform, stableCompare} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Extracts an array of values. Assumes the source data has already been\n * reduced as needed (e.g., by an upstream Aggregate transform).\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.field - The domain field to extract.\n * @param {function(*,*): number} [params.sort] - An optional\n *   comparator function for sorting the values. The comparator will be\n *   applied to backing tuples prior to value extraction.\n */\nexport default function Values(params) {\n  Transform.call(this, null, params);\n}\n\ninherits(Values, Transform, {\n  transform(_, pulse) {\n    const run = !this.value\n      || _.modified('field')\n      || _.modified('sort')\n      || pulse.changed()\n      || (_.sort && pulse.modified(_.sort.fields));\n\n    if (run) {\n      this.value = (_.sort\n        ? pulse.source.slice().sort(stableCompare(_.sort))\n        : pulse.source).map(_.field);\n    }\n  }\n});","import {error, zero} from 'vega-util';\n\nexport function WindowOp(op, field, param, as) {\n  const fn = WindowOps[op](field, param);\n  return {\n    init:   fn.init || zero,\n    update: function(w, t) { t[as] = fn.next(w); }\n  };\n}\n\nexport const WindowOps = {\n  row_number: function() {\n    return {\n      next: w => w.index + 1\n    };\n  },\n  rank: function() {\n    let rank;\n    return {\n      init: () => rank = 1,\n      next: w => {\n        const i = w.index,\n              data = w.data;\n        return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;\n      }\n    };\n  },\n  dense_rank: function() {\n    let drank;\n    return {\n      init: () => drank = 1,\n      next: w => {\n        const i = w.index,\n              d = w.data;\n        return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;\n      }\n    };\n  },\n  percent_rank: function() {\n    const rank = WindowOps.rank(),\n          next = rank.next;\n    return {\n      init: rank.init,\n      next: w => (next(w) - 1) / (w.data.length - 1)\n    };\n  },\n  cume_dist: function() {\n    let cume;\n    return {\n      init: () => cume = 0,\n      next: w => {\n        const d = w.data,\n              c = w.compare;\n        let i = w.index;\n        if (cume < i) {\n          while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n          cume = i;\n        }\n        return (1 + cume) / d.length;\n      }\n    };\n  },\n  ntile: function(field, num) {\n    num = +num;\n    if (!(num > 0)) error('ntile num must be greater than zero.');\n    const cume = WindowOps.cume_dist(),\n          next = cume.next;\n    return {\n      init: cume.init,\n      next: w => Math.ceil(num * next(w))\n    };\n  },\n\n  lag: function(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index - offset;\n        return i >= 0 ? field(w.data[i]) : null;\n      }\n    };\n  },\n  lead: function(field, offset) {\n    offset = +offset || 1;\n    return {\n      next: w => {\n        const i = w.index + offset,\n            d = w.data;\n        return i < d.length ? field(d[i]) : null;\n      }\n    };\n  },\n\n  first_value: function(field) {\n    return {\n      next: w => field(w.data[w.i0])\n    };\n  },\n  last_value: function(field) {\n    return {\n      next: w => field(w.data[w.i1 - 1])\n    };\n  },\n  nth_value: function(field, nth) {\n    nth = +nth;\n    if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n    return {\n      next: w => {\n        const i = w.i0 + (nth - 1);\n        return i < w.i1 ? field(w.data[i]) : null;\n      }\n    };\n  },\n\n  prev_value: function(field) {\n    let prev;\n    return {\n      init: () => prev = null,\n      next: w => {\n        const v = field(w.data[w.index]);\n        return v != null ? (prev = v) : prev;\n      }\n    };\n  },\n  next_value: function(field) {\n    let v, i;\n    return {\n      init: () => (v = null, i = -1),\n      next: w => {\n        const d = w.data;\n        return w.index <= i ? v\n          : (i = find(field, d, w.index)) < 0\n            ? (i = d.length, v = null)\n            : (v = field(d[i]));\n      }\n    };\n  }\n};\n\nfunction find(field, data, index) {\n  for (let n = data.length; index < n; ++index) {\n    const v = field(data[index]);\n    if (v != null) return index;\n  }\n  return -1;\n}\n\nexport const ValidWindowOps = Object.keys(WindowOps);\n","import {compileMeasures, createMeasure, measureName} from './AggregateOps.js';\nimport TupleStore from './TupleStore.js';\nimport {WindowOp, WindowOps} from './WindowOps.js';\nimport {accessorFields, accessorName, array, error, hasOwnProperty} from 'vega-util';\n\nexport default function WindowState(_) {\n  const ops = array(_.ops),\n        fields = array(_.fields),\n        params = array(_.params),\n        aggregate_params = array(_.aggregate_params),\n        as = array(_.as),\n        outputs = this.outputs = [],\n        windows = this.windows = [],\n        inputs = {},\n        map = {},\n        counts = [],\n        measures = [];\n\n  let countOnly = true;\n\n  function visitInputs(f) {\n    array(accessorFields(f)).forEach(_ => inputs[_] = 1);\n  }\n  visitInputs(_.sort);\n\n  ops.forEach((op, i) => {\n    const field = fields[i],\n          param = params[i],\n          aggregate_param = aggregate_params[i] || null,\n          mname = accessorName(field),\n          name = measureName(op, mname, as[i]);\n\n    visitInputs(field);\n    outputs.push(name);\n\n    // Window operation\n    if (hasOwnProperty(WindowOps, op)) {\n      windows.push(WindowOp(op, field, param, name));\n    }\n\n    // Aggregate operation\n    else {\n      if (field == null && op !== 'count') {\n        error('Null aggregate field specified.');\n      }\n      if (op === 'count') {\n        counts.push(name);\n        return;\n      }\n\n      countOnly = false;\n      let m = map[mname];\n      if (!m) {\n        m = (map[mname] = []);\n        m.field = field;\n        measures.push(m);\n      }\n      m.push(createMeasure(op, aggregate_param, name));\n    }\n  });\n\n  if (counts.length || measures.length) {\n    this.cell = cell(measures, counts, countOnly);\n  }\n\n  this.inputs = Object.keys(inputs);\n}\n\nconst prototype = WindowState.prototype;\n\nprototype.init = function() {\n  this.windows.forEach(_ => _.init());\n  if (this.cell) this.cell.init();\n};\n\nprototype.update = function(w, t) {\n  const cell = this.cell,\n        wind = this.windows,\n        data = w.data,\n        m = wind && wind.length;\n  let j;\n\n  if (cell) {\n    for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n    for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n    cell.set(t);\n  }\n  for (j = 0; j < m; ++j) wind[j].update(w, t);\n};\n\nfunction cell(measures, counts, countOnly) {\n  measures = measures.map(m => compileMeasures(m, m.field));\n\n  const cell = {\n    num:   0,\n    agg:   null,\n    store: false,\n    count: counts\n  };\n\n  if (!countOnly) {\n    var n = measures.length,\n        a = cell.agg = Array(n),\n        i = 0;\n    for (; i<n; ++i) a[i] = new measures[i](cell);\n  }\n\n  if (cell.store) {\n    var store = cell.data = new TupleStore();\n  }\n\n  cell.add = function(t) {\n    cell.num += 1;\n    if (countOnly) return;\n    if (store) store.add(t);\n    for (let i=0; i<n; ++i) {\n      a[i].add(a[i].get(t), t);\n    }\n  };\n\n  cell.rem = function(t) {\n    cell.num -= 1;\n    if (countOnly) return;\n    if (store) store.rem(t);\n    for (let i=0; i<n; ++i) {\n      a[i].rem(a[i].get(t), t);\n    }\n  };\n\n  cell.set = function(t) {\n    let i, n;\n\n    // consolidate stored values\n    if (store) store.values();\n\n    // update tuple properties\n    for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;\n    if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);\n  };\n\n  cell.init = function() {\n    cell.num = 0;\n    if (store) store.reset();\n    for (let i=0; i<n; ++i) a[i].init();\n  };\n\n  return cell;\n}\n","import {groupkey} from './util/AggregateKeys.js';\nimport {ValidAggregateOps} from './util/AggregateOps.js';\nimport SortedList from './util/SortedList.js';\nimport {ValidWindowOps} from './util/WindowOps.js';\nimport WindowState from './util/WindowState.js';\nimport {Transform, stableCompare, tupleid} from 'vega-dataflow';\nimport {constant, inherits} from 'vega-util';\nimport {bisector} from 'd3-array';\n\n/**\n * Perform window calculations and write results to the input stream.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n * @param {Array<function(object): *>} [params.fields] - An array of accessors\n *   for data fields to use as inputs to window operations.\n * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n * @param {Array<number>} [params.aggregate_params] - An optional array of parameter values for aggregation operations.\n * @param {Array<string>} [params.as] - An array of output field names for window operations.\n * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n *   number alone, ignoring peers with identical sort values. If false (default),\n *   the window boundaries will be adjusted to include peer values.\n */\nexport default function Window(params) {\n  Transform.call(this, {}, params);\n  this._mlen = 0;\n  this._mods = [];\n}\n\nWindow.Definition = {\n  'type': 'Window',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'sort', 'type': 'compare' },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'ops', 'type': 'enum', 'array': true, 'values': ValidWindowOps.concat(ValidAggregateOps) },\n    { 'name': 'params', 'type': 'number', 'null': true, 'array': true },\n    { 'name': 'aggregate_params', 'type': 'number', 'null': true, 'array': true},\n    { 'name': 'fields', 'type': 'field', 'null': true, 'array': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'array': true },\n    { 'name': 'frame', 'type': 'number', 'null': true, 'array': true, 'length': 2, 'default': [null, 0] },\n    { 'name': 'ignorePeers', 'type': 'boolean', 'default': false }\n  ]\n};\n\ninherits(Window, Transform, {\n  transform(_, pulse) {\n    this.stamp = pulse.stamp;\n\n    const mod = _.modified(),\n          cmp = stableCompare(_.sort),\n          key = groupkey(_.groupby),\n          group = t => this.group(key(t));\n\n    // initialize window state\n    let state = this.state;\n    if (!state || mod) {\n      state = this.state = new WindowState(_);\n    }\n\n    // partition input tuples\n    if (mod || pulse.modified(state.inputs)) {\n      this.value = {};\n      pulse.visit(pulse.SOURCE, t => group(t).add(t));\n    } else {\n      pulse.visit(pulse.REM, t => group(t).remove(t));\n      pulse.visit(pulse.ADD, t => group(t).add(t));\n    }\n\n    // perform window calculations for each modified partition\n    for (let i=0, n=this._mlen; i<n; ++i) {\n      processPartition(this._mods[i], state, cmp, _);\n    }\n    this._mlen = 0;\n    this._mods = [];\n\n    // TODO don't reflow everything?\n    return pulse.reflow(mod).modifies(state.outputs);\n  },\n\n  group(key) {\n    let group = this.value[key];\n\n    if (!group) {\n      group = this.value[key] = SortedList(tupleid);\n      group.stamp = -1;\n    }\n\n    if (group.stamp < this.stamp) {\n      group.stamp = this.stamp;\n      this._mods[this._mlen++] = group;\n    }\n\n    return group;\n  }\n});\n\nfunction processPartition(list, state, cmp, _) {\n  const sort = _.sort,\n        range = sort && !_.ignorePeers,\n        frame = _.frame || [null, 0],\n        data = list.data(cmp), // use cmp for stable sort\n        n = data.length,\n        b = range ? bisector(sort) : null,\n        w = {\n          i0: 0, i1: 0, p0: 0, p1: 0, index: 0,\n          data: data, compare: sort || constant(-1)\n        };\n\n  state.init();\n  for (let i=0; i<n; ++i) {\n    setWindow(w, frame, i, n);\n    if (range) adjustRange(w, b);\n    state.update(w, data[i]);\n  }\n}\n\nfunction setWindow(w, f, i, n) {\n  w.p0 = w.i0;\n  w.p1 = w.i1;\n  w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n  w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n  w.index = i;\n}\n\n// if frame type is 'range', adjust window for peer values\nfunction adjustRange(w, bisect) {\n  const r0 = w.i0,\n        r1 = w.i1 - 1,\n        c = w.compare,\n        d = w.data,\n        n = d.length - 1;\n\n  if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);\n  if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);\n}\n"],"names":["multikey","f","x","n","length","i","k","String","groupkey","fields","measureName","op","field","as","noop","base_op","init","add","rem","idx","AggregateOps","values","m","cell","store","value","data","count","num","__count__","missing","valid","sum","undefined","v","product","mean","mean_d","average","req","variance","dev","variancep","stdev","Math","sqrt","stdevp","stderr","distinct","get","ci0","ci1","median","q2","q1","q3","min","Number","isNaN","NaN","max","argmin","t","argmax","exponential","r","exp","exp_r","exponentialb","ValidAggregateOps","Object","keys","filter","d","measure","key","out","aggregate_param","extend","name","forEach","createMeasure","param","compareIndex","a","b","resolve","agg","map","getreqs","sort","_ops","set","_out","compileMeasures","identity","ops","slice","ctr","prototype","TupleStore","_key","tupleid","reset","_add","_rem","_ext","_get","_q","push","Array","j","s","hasOwnProperty","extent","extentIndex","quartile","quartiles","ci","_ci","bootstrapCI","Aggregate","params","Transform","call","_adds","_mods","_alen","_mlen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_counts","_prev","_inputs","_outputs","Definition","inherits","transform","_","pulse","aggr","fork","NO_SOURCE","NO_FIELDS","mod","modified","stamp","create","visit","SOURCE","REM","ADD","modifies","drop","cross","clean","runAfter","changes","curr","dims","vals","collect","cells","tuple","generate","base","index","inputs","outputs","inputMap","inputVisit","array","accessorFields","groupby","dname","accessorName","cellkey","aggregate_params","mname","outname","error","newcell","newtuple","measures","p","names","replace","ingest","celltuple","counts","adds","mods","prev","EPSILON","Bin","band","interval","bins","_bins","start","step","b0","b1","flag","reflow","ADD_MOD","bin","stop","ceil","anchor","floor","toNumber","Infinity","accessor","idFunc","source","input","$","cnt","remove","size","compare","resort","merge","concat","Collect","ALL","list","SortedList","materialize","changed","stableCompare","root","Compare","Operator","update","orders","CountPattern","tokenize","text","tcase","match","toUpperCase","toLowerCase","process","tokens","case","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","w","c","Cross","ADD_REM","truthy","left","Distributions","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","DISTRIBUTIONS","FUNCTION","FIELD","parse","def","func","from","Density","distributions","dist","parseDist","distribution","minsteps","steps","maxsteps","method","domain","sampleCurve","fieldNames","partition","groups","g","Output","DotBin","autostep","span","smooth","dotbin","Expression","expr","datum","Extent","isFinite","dataflow","warn","Subflow","parent","connect","target","detachSubflow","targets","evaluate","Facet","_keys","fastmap","_targets","active","activate","flow","subflow","flows","sf","df","_group","detached","detach","initTargets","act","cache","rekey","group","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","Field","isArray","Filter","output","isMod","has","revisit","Flatten","arrays","maxlen","reduce","l","derive","Fold","fnames","Formula","initonly","Generate","gen","generator","Methods","Empty","Impute","getValue","getField","impute","fName","kName","gNames","keyvals","gVals","kVal","_impute","kMap","gMap","gKey","JoinAggregate","KDE","bandwidth","cumulative","density","scale","local","Key","flat","Load","_pending","StopPropagation","format","async","request","url","then","res","touch","Lookup","defaultValue","default","some","MultiExtent","ext","extents","e","MultiValues","Params","Pivot","_transform","aggregateParams","pivotKeys","limit","bind","ascending","PreFacet","Project","project","rederive","lut","addAll","dt","Proxy","Quantile","probs","range","q","quantiles","Relay","Sample","cap","random","Sequence","Sieve","TimeUnit","OUTPUT","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","TupleIndex","clear","Values","run","WindowOp","fn","WindowOps","zero","next","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","i0","last_value","i1","nth_value","nth","prev_value","next_value","find","ValidWindowOps","WindowState","windows","countOnly","visitInputs","wind","p0","p1","Window","cmp","state","processPartition","ignorePeers","frame","bisector","constant","setWindow","adjustRange","abs","bisect","r0","r1","right"],"mappings":"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"}