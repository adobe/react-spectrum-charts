{"version":3,"file":"vega-geo.js","sources":["../src/util/contours.js","../src/util/quantize.js","../src/Isocontour.js","../src/util/density2D.js","../src/KDE2D.js","../src/Contour.js","../src/constants.js","../src/GeoJSON.js","../src/GeoPath.js","../src/GeoPoint.js","../src/GeoShape.js","../src/Graticule.js","../src/Heatmap.js","../src/Projection.js"],"sourcesContent":["import {error} from 'vega-util';\n\nfunction noop() {}\n\nconst cases = [\n  [],\n  [[[1.0, 1.5], [0.5, 1.0]]],\n  [[[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [0.5, 1.0]]],\n  [[[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 0.5], [1.0, 1.5]]],\n  [[[1.0, 0.5], [0.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 0.5]]],\n  [[[1.0, 1.5], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.5, 1.0]]],\n  [[[1.0, 1.5], [1.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 1.5]]],\n  []\n];\n\n// Implementation adapted from d3/d3-contour. Thanks!\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      smooth = smoothLinear;\n\n  function contours(values, tz) {\n    return tz.map(value => contour(values, value));\n  }\n\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n  function contour(values, value) {\n    var polygons = [],\n        holes = [];\n\n    isorings(values, value, ring => {\n      smooth(ring, values, value);\n      if (area(ring) > 0) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(hole => {\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\n          polygon.push(hole);\n          return;\n        }\n      }\n    });\n\n    return {\n      type: 'MultiPolygon',\n      value: value,\n      coordinates: polygons\n    };\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = [],\n        fragmentByEnd = [],\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = values[0] >= value;\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = values[x + 1] >= value;\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = values[y * dx + dx] >= value;\n      t2 = values[y * dx] >= value;\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(point => {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v0,\n          v1 = values[yt * dx + xt];\n      if (x > 0 && x < dx && xt === x) {\n        v0 = values[yt * dx + xt - 1];\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n      }\n      if (y > 0 && y < dy && yt === y) {\n        v0 = values[(yt - 1) * dx + xt];\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n      }\n    });\n  }\n\n  contours.contour = contour;\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);\n    if (!(_0 >= 0 && _1 >= 0)) error('invalid size');\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n\nfunction area(ring) {\n  var i = 0,\n      n = ring.length,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area;\n}\n\nfunction contains(ring, hole) {\n  var i = -1, n = hole.length, c;\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n  return 0;\n}\n\nfunction ringContains(ring, point) {\n  var x = point[0], y = point[1], contains = -1;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n    if (segmentContains(pi, pj, point)) return 0;\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n  }\n  return contains;\n}\n\nfunction segmentContains(a, b, c) {\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\n\nfunction collinear(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction within(p, q, r) {\n  return p <= q && q <= r || r <= q && q <= p;\n}\n","import {range, tickStep} from 'd3-array';\nimport {extent} from 'vega-util';\n\nexport default function(k, nice, zero) {\n  return function(values) {\n    var ex = extent(values),\n        start = zero ? Math.min(ex[0], 0) : ex[0],\n        stop = ex[1],\n        span = stop - start,\n        step = nice ? tickStep(start, stop, k) : (span / (k + 1));\n    return range(start + step, stop, step);\n  };\n}\n","import {max} from 'd3-array';\nimport {Transform, ingest, rederive} from 'vega-dataflow';\nimport {identity, inherits, isArray, isFunction, isNumber} from 'vega-util';\nimport contours from './util/contours.js';\nimport quantize from './util/quantize.js';\n\n/**\n * Generate isocontours (level sets) based on input raster grid data.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} [params.field] - The field with raster grid\n *   data. If unspecified, the tuple itself is interpreted as a raster grid.\n * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n *   specified, the levels, nice, resolve, and zero parameters are ignored.\n * @param {number} [params.levels] - The desired number of contour levels.\n * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n *   threshold values should be automatically aligned to \"nice\"\n *   human-friendly values. Setting this flag may cause the number of\n *   thresholds to deviate from the specified levels.\n * @param {string} [params.resolve] - The method for resolving thresholds\n *   across multiple input grids. If 'independent' (the default), threshold\n *   calculation will be performed separately for each grid. If 'shared', a\n *   single set of threshold values will be used for all input grids.\n * @param {boolean} [params.zero] - Boolean flag indicating if the contour\n *   threshold values should include zero.\n * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n *   polygons should be smoothed using linear interpolation. The default is\n *   true. The parameter is ignored when using density estimation.\n * @param {boolean} [params.scale] - Optional numerical value by which to\n *   scale the output isocontour coordinates. This parameter can be useful\n *   to scale the contours to match a desired output resolution.\n * @param {string} [params.as='contour'] - The output field in which to store\n *   the generated isocontour data (default 'contour').\n */\nexport default function Isocontour(params) {\n  Transform.call(this, null, params);\n}\n\nIsocontour.Definition = {\n  'type': 'Isocontour',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'thresholds', 'type': 'number', 'array': true },\n    { 'name': 'levels', 'type': 'number' },\n    { 'name': 'nice', 'type': 'boolean', 'default': false },\n    { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n    { 'name': 'zero', 'type': 'boolean', 'default': true },\n    { 'name': 'smooth', 'type': 'boolean', 'default': true },\n    { 'name': 'scale', 'type': 'number', 'expr': true },\n    { 'name': 'translate', 'type': 'number', 'array': true, 'expr': true },\n    { 'name': 'as', 'type': 'string', 'null': true, 'default': 'contour' }\n  ]\n};\n\ninherits(Isocontour, Transform, {\n  transform(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        source = pulse.materialize(pulse.SOURCE).source,\n        field = _.field || identity,\n        contour = contours().smooth(_.smooth !== false),\n        tz = _.thresholds || levels(source, field, _),\n        as = _.as === null ? null : _.as || 'contour',\n        values = [];\n\n    source.forEach(t => {\n      const grid = field(t);\n\n      // generate contour paths in GeoJSON format\n      const paths = contour.size([grid.width, grid.height])(\n        grid.values, isArray(tz) ? tz : tz(grid.values)\n      );\n\n      // adjust contour path coordinates as needed\n      transformPaths(paths, grid, t, _);\n\n      // ingest; copy source data properties to output\n      paths.forEach(p => {\n        values.push(rederive(t, ingest(as != null ? {[as]: p} : p)));\n      });\n    });\n\n    if (this.value) out.rem = this.value;\n    this.value = out.source = out.add = values;\n\n    return out;\n  }\n});\n\nfunction levels(values, f, _) {\n  const q = quantize(_.levels || 10, _.nice, _.zero !== false);\n  return _.resolve !== 'shared'\n    ? q\n    : q(values.map(t => max(f(t).values)));\n}\n\nfunction transformPaths(paths, grid, datum, _) {\n  let s = _.scale || grid.scale,\n      t = _.translate || grid.translate;\n  if (isFunction(s)) s = s(datum, _);\n  if (isFunction(t)) t = t(datum, _);\n  if ((s === 1 || s == null) && !t) return;\n\n  const sx = (isNumber(s) ? s : s[0]) || 1,\n        sy = (isNumber(s) ? s : s[1]) || 1,\n        tx = t && t[0] || 0,\n        ty = t && t[1] || 0;\n\n  paths.forEach(transform(grid, sx, sy, tx, ty));\n}\n\nexport function transform(grid, sx, sy, tx, ty) {\n  const x1 = grid.x1 || 0,\n        y1 = grid.y1 || 0,\n        flip = sx * sy < 0;\n\n  function transformPolygon(coordinates) {\n    coordinates.forEach(transformRing);\n  }\n\n  function transformRing(coordinates) {\n    if (flip) coordinates.reverse(); // maintain winding order\n    coordinates.forEach(transformPoint);\n  }\n\n  function transformPoint(coordinates) {\n    coordinates[0] = (coordinates[0] - x1) * sx + tx;\n    coordinates[1] = (coordinates[1] - y1) * sy + ty;\n  }\n\n  return function(geometry) {\n    geometry.coordinates.forEach(transformPolygon);\n    return geometry;\n  };\n}\n","import {bandwidthNRD} from 'vega-statistics';\nimport {array, constant, error, isFunction, one} from 'vega-util';\nimport {sum} from 'd3-array';\n\nfunction radius(bw, data, f) {\n  const v = bw >= 0 ? bw : bandwidthNRD(data, f);\n  return Math.round((Math.sqrt(4 * v * v + 1) - 1) / 2);\n}\n\nfunction number(_) {\n  return isFunction(_) ? _ : constant(+_);\n}\n\n// Implementation adapted from d3/d3-contour. Thanks!\nexport default function() {\n  var x = d => d[0],\n      y = d => d[1],\n      weight = one,\n      bandwidth = [-1, -1],\n      dx = 960,\n      dy = 500,\n      k = 2; // log2(cellSize)\n\n  function density(data, counts) {\n    const rx = radius(bandwidth[0], data, x) >> k, // blur x-radius\n          ry = radius(bandwidth[1], data, y) >> k, // blur y-radius\n          ox = rx ? rx + 2 : 0, // x-offset padding for blur\n          oy = ry ? ry + 2 : 0, // y-offset padding for blur\n          n = 2 * ox + (dx >> k), // grid width\n          m = 2 * oy + (dy >> k), // grid height\n          values0 = new Float32Array(n * m),\n          values1 = new Float32Array(n * m);\n\n    let values = values0;\n\n    data.forEach(d => {\n      const xi = ox + (+x(d) >> k),\n            yi = oy + (+y(d) >> k);\n\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\n        values0[xi + yi * n] += +weight(d);\n      }\n    });\n\n    if (rx > 0 && ry > 0) {\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n      blurX(n, m, values0, values1, rx);\n      blurY(n, m, values1, values0, ry);\n    } else if (rx > 0) {\n      blurX(n, m, values0, values1, rx);\n      blurX(n, m, values1, values0, rx);\n      blurX(n, m, values0, values1, rx);\n      values = values1;\n    } else if (ry > 0) {\n      blurY(n, m, values0, values1, ry);\n      blurY(n, m, values1, values0, ry);\n      blurY(n, m, values0, values1, ry);\n      values = values1;\n    }\n\n    // scale density estimates\n    // density in points per square pixel or probability density\n    const s = counts ? Math.pow(2, -2 * k) : 1 / sum(values);\n    for (let i=0, sz=n*m; i<sz; ++i) values[i] *= s;\n\n    return {\n      values: values,\n      scale: 1 << k,\n      width: n,\n      height: m,\n      x1: ox,\n      y1: oy,\n      x2: ox + (dx >> k),\n      y2: oy + (dy >> k)\n    };\n  }\n\n  density.x = function(_) {\n    return arguments.length ? (x = number(_), density) : x;\n  };\n\n  density.y = function(_) {\n    return arguments.length ? (y = number(_), density) : y;\n  };\n\n  density.weight = function(_) {\n    return arguments.length ? (weight = number(_), density) : weight;\n  };\n\n  density.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = +_[0], _1 = +_[1];\n    if (!(_0 >= 0 && _1 >= 0)) error('invalid size');\n    return dx = _0, dy = _1, density;\n  };\n\n  density.cellSize = function(_) {\n    if (!arguments.length) return 1 << k;\n    if (!((_ = +_) >= 1)) error('invalid cell size');\n    k = Math.floor(Math.log(_) / Math.LN2);\n    return density;\n  };\n\n  density.bandwidth = function(_) {\n    if (!arguments.length) return bandwidth;\n    _ = array(_);\n    if (_.length === 1) _ = [+_[0], +_[0]];\n    if (_.length !== 2) error('invalid bandwidth');\n    return bandwidth = _, density;\n  };\n\n  return density;\n}\n\nfunction blurX(n, m, source, target, r) {\n  const w = (r << 1) + 1;\n  for (let j = 0; j < m; ++j) {\n    for (let i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source[i - w + j * n];\n        }\n        target[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\nfunction blurY(n, m, source, target, r) {\n  const w = (r << 1) + 1;\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source[i + (j - w) * n];\n        }\n        target[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n","import density2D from './util/density2D.js';\nimport {Transform, ingest} from 'vega-dataflow';\nimport {accessorName, inherits} from 'vega-util';\n\n/**\n * Perform 2D kernel-density estimation of point data.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<number>} params.size - The [width, height] extent (in\n *   units of input pixels) over which to perform density estimation.\n * @param {function(object): number} params.x - The x-coordinate accessor.\n * @param {function(object): number} params.y - The y-coordinate accessor.\n * @param {function(object): number} [params.weight] - The weight accessor.\n * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n *   to groupby.\n * @param {number} [params.cellSize] - Contour density calculation cell size.\n *   This parameter determines the level of spatial approximation. For example,\n *   the default value of 4 maps to 2x reductions in both x- and y- dimensions.\n *   A value of 1 will result in an output raster grid whose dimensions exactly\n *   matches the size parameter.\n * @param {Array<number>} [params.bandwidth] - The KDE kernel bandwidths,\n *   in pixels. The input can be a two-element array specifying separate\n *   x and y bandwidths, or a single-element array specifying both. If the\n *   bandwidth is unspecified or less than zero, the bandwidth will be\n *   automatically determined.\n * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n *   output values should be probability estimates (false, default) or\n *   smoothed counts (true).\n * @param {string} [params.as='grid'] - The output field in which to store\n *   the generated raster grid (default 'grid').\n */\nexport default function KDE2D(params) {\n  Transform.call(this, null, params);\n}\n\nKDE2D.Definition = {\n  'type': 'KDE2D',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n    { 'name': 'x', 'type': 'field', 'required': true },\n    { 'name': 'y', 'type': 'field', 'required': true },\n    { 'name': 'weight', 'type': 'field' },\n    { 'name': 'groupby', 'type': 'field', 'array': true },\n    { 'name': 'cellSize', 'type': 'number' },\n    { 'name': 'bandwidth', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'counts', 'type': 'boolean', 'default': false },\n    { 'name': 'as', 'type': 'string', 'default': 'grid'}\n  ]\n};\n\nconst PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];\n\nexport function params(obj, _) {\n  PARAMS.forEach(param => _[param] != null ? obj[param](_[param]) : 0);\n  return obj;\n}\n\ninherits(KDE2D, Transform, {\n  transform(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified())\n      return pulse.StopPropagation;\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        source = pulse.materialize(pulse.SOURCE).source,\n        groups = partition(source, _.groupby),\n        names = (_.groupby || []).map(accessorName),\n        kde = params(density2D(), _),\n        as = _.as || 'grid',\n        values = [];\n\n    function set(t, vals) {\n      for (let i=0; i<names.length; ++i) t[names[i]] = vals[i];\n      return t;\n    }\n\n    // generate density raster grids\n    values = groups.map(g => ingest(\n      set({[as]: kde(g, _.counts)}, g.dims)\n    ));\n\n    if (this.value) out.rem = this.value;\n    this.value = out.source = out.add = values;\n\n    return out;\n  }\n});\n\nexport function partition(data, groupby) {\n  var groups = [],\n      get = f => f(t),\n      map, i, n, t, k, g;\n\n  // partition data points into groups\n  if (groupby == null) {\n    groups.push(data);\n  } else {\n    for (map={}, i=0, n=data.length; i<n; ++i) {\n      t = data[i];\n      k = groupby.map(get);\n      g = map[k];\n      if (!g) {\n        map[k] = (g = []);\n        g.dims = k;\n        groups.push(g);\n      }\n      g.push(t);\n    }\n  }\n\n  return groups;\n}\n","import {Transform, ingest} from 'vega-dataflow';\nimport {inherits, isArray} from 'vega-util';\nimport {transform} from './Isocontour.js';\nimport {params} from './KDE2D.js';\nimport contours from './util/contours.js';\nimport density2D from './util/density2D.js';\nimport quantize from './util/quantize.js';\n\n/**\n * Generate contours based on kernel-density estimation of point data.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.\n *  If the values parameter is provided, this must be the dimensions of the input data.\n *  If density estimation is performed, this is the output view dimensions in pixels.\n * @param {Array<number>} [params.values] - An array of numeric values representing an\n *  width x height grid of values over which to compute contours. If unspecified, this\n *  transform will instead attempt to compute contours for the kernel density estimate\n *  using values drawn from data tuples in the input pulse.\n * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.\n * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.\n * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.\n * @param {number} [params.cellSize] - Contour density calculation cell size.\n * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.\n * @param {Array<number>} [params.thresholds] - Contour threshold array. If\n *   this parameter is set, the count and nice parameters will be ignored.\n * @param {number} [params.count] - The desired number of contours.\n * @param {boolean} [params.nice] - Boolean flag indicating if the contour\n *   threshold values should be automatically aligned to \"nice\"\n *   human-friendly values. Setting this flag may cause the number of\n *   thresholds to deviate from the specified count.\n * @param {boolean} [params.smooth] - Boolean flag indicating if the contour\n *   polygons should be smoothed using linear interpolation. The default is\n *   true. The parameter is ignored when using density estimation.\n */\nexport default function Contour(params) {\n  Transform.call(this, null, params);\n}\n\nContour.Definition = {\n  'type': 'Contour',\n  'metadata': {'generates': true},\n  'params': [\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2, 'required': true },\n    { 'name': 'values', 'type': 'number', 'array': true },\n    { 'name': 'x', 'type': 'field' },\n    { 'name': 'y', 'type': 'field' },\n    { 'name': 'weight', 'type': 'field' },\n    { 'name': 'cellSize', 'type': 'number' },\n    { 'name': 'bandwidth', 'type': 'number' },\n    { 'name': 'count', 'type': 'number' },\n    { 'name': 'nice', 'type': 'boolean', 'default': false },\n    { 'name': 'thresholds', 'type': 'number', 'array': true },\n    { 'name': 'smooth', 'type': 'boolean', 'default': true }\n  ]\n};\n\ninherits(Contour, Transform, {\n  transform(_, pulse) {\n    if (this.value && !pulse.changed() && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n        contour = contours().smooth(_.smooth !== false),\n        values = _.values,\n        thresh = _.thresholds || quantize(_.count || 10, _.nice, !!values),\n        size = _.size, grid, post;\n\n    if (!values) {\n      values = pulse.materialize(pulse.SOURCE).source;\n      grid = params(density2D(), _)(values, true);\n      post = transform(grid, grid.scale || 1, grid.scale || 1, 0, 0);\n      size = [grid.width, grid.height];\n      values = grid.values;\n    }\n\n    thresh = isArray(thresh) ? thresh : thresh(values);\n    values = contour.size(size)(values, thresh);\n    if (post) values.forEach(post);\n\n    if (this.value) out.rem = this.value;\n    this.value = out.source = out.add = (values || []).map(ingest);\n\n    return out;\n  }\n});\n","export const Feature = 'Feature';\nexport const FeatureCollection = 'FeatureCollection';\nexport const MultiPoint = 'MultiPoint';\n","import {Feature, FeatureCollection, MultiPoint} from './constants.js';\nimport {Transform} from 'vega-dataflow';\nimport {accessorFields, identity, inherits} from 'vega-util';\n\n/**\n * Consolidate an array of [longitude, latitude] points or GeoJSON features\n * into a combined GeoJSON object. This transform is particularly useful for\n * combining geo data for a Projection's fit argument. The resulting GeoJSON\n * data is available as this transform's value. Input pulses are unchanged.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {Array<function(object): *>} [params.fields] - A two-element array\n *   of field accessors for the longitude and latitude values.\n * @param {function(object): *} params.geojson - A field accessor for\n *   retrieving GeoJSON feature data.\n */\nexport default function GeoJSON(params) {\n  Transform.call(this, null, params);\n}\n\nGeoJSON.Definition = {\n  'type': 'GeoJSON',\n  'metadata': {},\n  'params': [\n    { 'name': 'fields', 'type': 'field', 'array': true, 'length': 2 },\n    { 'name': 'geojson', 'type': 'field' }\n  ]\n};\n\ninherits(GeoJSON, Transform, {\n  transform(_, pulse) {\n    var features = this._features,\n        points = this._points,\n        fields = _.fields,\n        lon = fields && fields[0],\n        lat = fields && fields[1],\n        geojson = _.geojson || (!fields && identity),\n        flag = pulse.ADD,\n        mod;\n\n    mod = _.modified()\n      || pulse.changed(pulse.REM)\n      || pulse.modified(accessorFields(geojson))\n      || (lon && (pulse.modified(accessorFields(lon))))\n      || (lat && (pulse.modified(accessorFields(lat))));\n\n    if (!this.value || mod) {\n      flag = pulse.SOURCE;\n      this._features = (features = []);\n      this._points = (points = []);\n    }\n\n    if (geojson) {\n      pulse.visit(flag, t => features.push(geojson(t)));\n    }\n\n    if (lon && lat) {\n      pulse.visit(flag, t => {\n        var x = lon(t),\n            y = lat(t);\n        if (x != null && y != null && (x = +x) === x && (y = +y) === y) {\n          points.push([x, y]);\n        }\n      });\n      features = features.concat({\n        type: Feature,\n        geometry: {\n          type: MultiPoint,\n          coordinates: points\n        }\n      });\n    }\n\n    this.value = {\n      type: FeatureCollection,\n      features: features\n    };\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {getProjectionPath} from 'vega-projection';\nimport {identity, inherits} from 'vega-util';\n\n/**\n * Map GeoJSON data to an SVG path string.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {function(object): *} [params.field] - The field with GeoJSON data,\n *   or null if the tuple itself is a GeoJSON feature.\n * @param {string} [params.as='path'] - The output field in which to store\n *   the generated path data (default 'path').\n */\nexport default function GeoPath(params) {\n  Transform.call(this, null, params);\n}\n\nGeoPath.Definition = {\n  'type': 'GeoPath',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'projection', 'type': 'projection' },\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'pointRadius', 'type': 'number', 'expr': true },\n    { 'name': 'as', 'type': 'string', 'default': 'path' }\n  ]\n};\n\ninherits(GeoPath, Transform, {\n  transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        path = this.value,\n        field = _.field || identity,\n        as = _.as || 'path',\n        flag = out.SOURCE;\n\n    if (!path || _.modified()) {\n      // parameters updated, reset and reflow\n      this.value = path = getProjectionPath(_.projection);\n      out.materialize().reflow();\n    } else {\n      flag = field === identity || pulse.modified(field.fields)\n        ? out.ADD_MOD\n        : out.ADD;\n    }\n\n    const prev = initPath(path, _.pointRadius);\n    out.visit(flag, t => t[as] = path(field(t)));\n    path.pointRadius(prev);\n\n    return out.modifies(as);\n  }\n});\n\nfunction initPath(path, pointRadius) {\n  const prev = path.pointRadius();\n  path.context(null);\n  if (pointRadius != null) {\n    path.pointRadius(pointRadius);\n  }\n  return prev;\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\n\n/**\n * Geo-code a longitude/latitude point to an x/y coordinate.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {Array<function(object): *>} params.fields - A two-element array of\n *   field accessors for the longitude and latitude values.\n * @param {Array<string>} [params.as] - A two-element array of field names\n *   under which to store the result. Defaults to ['x','y'].\n */\nexport default function GeoPoint(params) {\n  Transform.call(this, null, params);\n}\n\nGeoPoint.Definition = {\n  'type': 'GeoPoint',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'projection', 'type': 'projection', 'required': true },\n    { 'name': 'fields', 'type': 'field', 'array': true, 'required': true, 'length': 2 },\n    { 'name': 'as', 'type': 'string', 'array': true, 'length': 2, 'default': ['x', 'y'] }\n  ]\n};\n\ninherits(GeoPoint, Transform, {\n  transform(_, pulse) {\n    var proj = _.projection,\n        lon = _.fields[0],\n        lat = _.fields[1],\n        as = _.as || ['x', 'y'],\n        x = as[0],\n        y = as[1],\n        mod;\n\n    function set(t) {\n      const xy = proj([lon(t), lat(t)]);\n      if (xy) {\n        t[x] = xy[0];\n        t[y] = xy[1];\n      } else {\n        t[x] = undefined;\n        t[y] = undefined;\n      }\n    }\n\n    if (_.modified()) {\n      // parameters updated, reflow\n      pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);\n    } else {\n      mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);\n      pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);\n    }\n\n    return pulse.modifies(as);\n  }\n});\n","import {Transform} from 'vega-dataflow';\nimport {getProjectionPath} from 'vega-projection';\nimport {field, inherits} from 'vega-util';\n\n/**\n * Annotate items with a geopath shape generator.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(number, number): *} params.projection - The cartographic\n *   projection to apply.\n * @param {function(object): *} [params.field] - The field with GeoJSON data,\n *   or null if the tuple itself is a GeoJSON feature.\n * @param {string} [params.as='shape'] - The output field in which to store\n *   the generated path data (default 'shape').\n */\nexport default function GeoShape(params) {\n  Transform.call(this, null, params);\n}\n\nGeoShape.Definition = {\n  'type': 'GeoShape',\n  'metadata': {'modifies': true, 'nomod': true},\n  'params': [\n    { 'name': 'projection', 'type': 'projection' },\n    { 'name': 'field', 'type': 'field', 'default': 'datum' },\n    { 'name': 'pointRadius', 'type': 'number', 'expr': true },\n    { 'name': 'as', 'type': 'string', 'default': 'shape' }\n  ]\n};\n\ninherits(GeoShape, Transform, {\n  transform(_, pulse) {\n    var out = pulse.fork(pulse.ALL),\n        shape = this.value,\n        as = _.as || 'shape',\n        flag = out.ADD;\n\n    if (!shape || _.modified()) {\n      // parameters updated, reset and reflow\n      this.value = shape = shapeGenerator(\n        getProjectionPath(_.projection),\n        _.field || field('datum'),\n        _.pointRadius\n      );\n      out.materialize().reflow();\n      flag = out.SOURCE;\n    }\n\n    out.visit(flag, t => t[as] = shape);\n\n    return out.modifies(as);\n  }\n});\n\nfunction shapeGenerator(path, field, pointRadius) {\n  const shape = pointRadius == null\n    ? _ => path(field(_))\n    : _ => {\n      var prev = path.pointRadius(),\n          value = path.pointRadius(pointRadius)(field(_));\n      path.pointRadius(prev);\n      return value;\n    };\n  shape.context = _ => {\n    path.context(_);\n    return shape;\n  };\n\n  return shape;\n}\n","import {Transform, ingest, replace} from 'vega-dataflow';\nimport {inherits, isFunction} from 'vega-util';\nimport {geoGraticule} from 'd3-geo';\n\n/**\n * GeoJSON feature generator for creating graticules.\n * @constructor\n */\nexport default function Graticule(params) {\n  Transform.call(this, [], params);\n  this.generator = geoGraticule();\n}\n\nGraticule.Definition = {\n  'type': 'Graticule',\n  'metadata': {'changes': true, 'generates': true},\n  'params': [\n    { 'name': 'extent', 'type': 'array', 'array': true, 'length': 2,\n      'content': {'type': 'number', 'array': true, 'length': 2} },\n    { 'name': 'extentMajor', 'type': 'array', 'array': true, 'length': 2,\n      'content': {'type': 'number', 'array': true, 'length': 2} },\n    { 'name': 'extentMinor', 'type': 'array', 'array': true, 'length': 2,\n      'content': {'type': 'number', 'array': true, 'length': 2} },\n    { 'name': 'step', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'stepMajor', 'type': 'number', 'array': true, 'length': 2, 'default': [90, 360] },\n    { 'name': 'stepMinor', 'type': 'number', 'array': true, 'length': 2, 'default': [10, 10] },\n    { 'name': 'precision', 'type': 'number', 'default': 2.5 }\n  ]\n};\n\ninherits(Graticule, Transform, {\n  transform(_, pulse) {\n    var src = this.value,\n        gen = this.generator, t;\n\n    if (!src.length || _.modified()) {\n      for (const prop in _) {\n        if (isFunction(gen[prop])) {\n          gen[prop](_[prop]);\n        }\n      }\n    }\n\n    t = gen();\n    if (src.length) {\n      pulse.mod.push(replace(src[0], t));\n    } else {\n      pulse.add.push(ingest(t));\n    }\n    src[0] = t;\n\n    return pulse;\n  }\n});\n","import {max} from 'd3-array';\nimport {rgb} from 'd3-color';\nimport {canvas} from 'vega-canvas';\nimport {Transform} from 'vega-dataflow';\nimport {\n  accessorFields, constant, extend, identity,\n  inherits, isFunction, toSet, zero\n} from 'vega-util';\n\n/**\n * Render a heatmap image for input raster grid data.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} [params.field] - The field with raster grid\n *   data. If unspecified, the tuple itself is interpreted as a raster grid.\n * @param {string} [params.color] - A constant color value or function for\n *   individual pixel color. If a function, it will be invoked with an input\n *   object that includes $x, $y, $value, and $max fields for the grid.\n * @param {number} [params.opacity] - A constant opacity value or function for\n *   individual pixel opacity. If a function, it will be invoked with an input\n *   object that includes $x, $y, $value, and $max fields for the grid.\n * @param {string} [params.resolve] - The method for resolving maximum values\n *   across multiple input grids. If 'independent' (the default), maximum\n *   calculation will be performed separately for each grid. If 'shared',\n *   a single global maximum will be used for all input grids.\n * @param {string} [params.as='image'] - The output field in which to store\n *   the generated bitmap canvas images (default 'image').\n */\nexport default function Heatmap(params) {\n  Transform.call(this, null, params);\n}\n\nHeatmap.Definition = {\n  'type': 'heatmap',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'field', 'type': 'field' },\n    { 'name': 'color', 'type': 'string', 'expr': true},\n    { 'name': 'opacity', 'type': 'number', 'expr': true},\n    { 'name': 'resolve', 'type': 'enum', 'values': ['shared', 'independent'], 'default': 'independent' },\n    { 'name': 'as', 'type': 'string', 'default': 'image' }\n  ]\n};\n\ninherits(Heatmap, Transform, {\n  transform(_, pulse) {\n    if (!pulse.changed() && !_.modified()) {\n      return pulse.StopPropagation;\n    }\n\n    var source = pulse.materialize(pulse.SOURCE).source,\n        shared = _.resolve === 'shared',\n        field = _.field || identity,\n        opacity = opacity_(_.opacity, _),\n        color = color_(_.color, _),\n        as = _.as || 'image',\n        obj = {\n          $x: 0, $y: 0, $value: 0,\n          $max: shared ? max(source.map(t => max(field(t).values))) : 0\n        };\n\n    source.forEach(t => {\n      const v = field(t);\n\n      // build proxy data object\n      const o = extend({}, t, obj);\n      // set maximum value if not globally shared\n      if (!shared) o.$max = max(v.values || []);\n\n      // generate canvas image\n      // optimize color/opacity if not pixel-dependent\n      t[as] = toCanvas(v, o,\n        color.dep ? color : constant(color(o)),\n        opacity.dep ? opacity : constant(opacity(o))\n      );\n    });\n\n    return pulse.reflow(true).modifies(as);\n  }\n});\n\n// get image color function\nfunction color_(color, _) {\n  let f;\n  if (isFunction(color)) {\n    f = obj => rgb(color(obj, _));\n    f.dep = dependency(color);\n  } else {\n    // default to mid-grey\n    f = constant(rgb(color || '#888'));\n  }\n  return f;\n}\n\n// get image opacity function\nfunction opacity_(opacity, _) {\n  let f;\n  if (isFunction(opacity)) {\n    f = obj => opacity(obj, _);\n    f.dep = dependency(opacity);\n  } else if (opacity) {\n    f = constant(opacity);\n  } else {\n    // default to [0, max] opacity gradient\n    f = obj => (obj.$value / obj.$max) || 0;\n    f.dep = true;\n  }\n  return f;\n}\n\n// check if function depends on individual pixel data\nfunction dependency(f) {\n  if (!isFunction(f)) return false;\n  const set = toSet(accessorFields(f));\n  return set.$x || set.$y || set.$value || set.$max;\n}\n\n// render raster grid to canvas\nfunction toCanvas(grid, obj, color, opacity) {\n  const n = grid.width,\n        m = grid.height,\n        x1 = grid.x1 || 0,\n        y1 = grid.y1 || 0,\n        x2 = grid.x2 || n,\n        y2 = grid.y2 || m,\n        val = grid.values,\n        value = val ? i => val[i] : zero,\n        can = canvas(x2 - x1, y2 - y1),\n        ctx = can.getContext('2d'),\n        img = ctx.getImageData(0, 0, x2 - x1, y2 - y1),\n        pix = img.data;\n\n  for (let j=y1, k=0; j<y2; ++j) {\n    obj.$y = j - y1;\n    for (let i=x1, r=j*n; i<x2; ++i, k+=4) {\n      obj.$x = i - x1;\n      obj.$value = value(i + r);\n\n      const v = color(obj);\n      pix[k+0] = v.r;\n      pix[k+1] = v.g;\n      pix[k+2] = v.b;\n      pix[k+3] = ~~(255 * opacity(obj));\n    }\n  }\n\n  ctx.putImageData(img, 0, 0);\n  return can;\n}\n","import {Feature, FeatureCollection} from './constants.js';\nimport {Transform} from 'vega-dataflow';\nimport {projection, projectionProperties} from 'vega-projection';\nimport {array, error, inherits, isFunction} from 'vega-util';\n\n/**\n * Maintains a cartographic projection.\n * @constructor\n * @param {object} params - The parameters for this operator.\n */\nexport default function Projection(params) {\n  Transform.call(this, null, params);\n  this.modified(true); // always treat as modified\n}\n\ninherits(Projection, Transform, {\n  transform(_, pulse) {\n    let proj = this.value;\n\n    if (!proj || _.modified('type')) {\n      this.value = (proj = create(_.type));\n      projectionProperties.forEach(prop => {\n        if (_[prop] != null) set(proj, prop, _[prop]);\n      });\n    } else {\n      projectionProperties.forEach(prop => {\n        if (_.modified(prop)) set(proj, prop, _[prop]);\n      });\n    }\n\n    if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);\n    if (_.fit) fit(proj, _);\n\n    return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n  }\n});\n\nfunction fit(proj, _) {\n  const data = collectGeoJSON(_.fit);\n  _.extent ? proj.fitExtent(_.extent, data)\n    : _.size ? proj.fitSize(_.size, data) : 0;\n}\n\nfunction create(type) {\n  const constructor = projection((type || 'mercator').toLowerCase());\n  if (!constructor) error('Unrecognized projection type: ' + type);\n  return constructor();\n}\n\nfunction set(proj, key, value) {\n   if (isFunction(proj[key])) proj[key](value);\n}\n\nexport function collectGeoJSON(data) {\n  data = array(data);\n  return data.length === 1 ? data[0]\n    : {\n        type: FeatureCollection,\n        features: data.reduce((a, f) => a.concat(featurize(f)), [])\n      };\n}\n\nfunction featurize(f) {\n  return f.type === FeatureCollection\n    ? f.features\n    : array(f).filter(d => d != null).map(\n        d => d.type === Feature ? d : {type: Feature, geometry: d}\n      );\n}\n"],"names":["noop","cases","dx","dy","smooth","smoothLinear","contours","values","tz","map","value","contour","polygons","holes","isorings","ring","area","push","forEach","hole","i","n","length","polygon","contains","type","coordinates","callback","fragmentByStart","fragmentByEnd","x","y","t0","t1","t2","t3","stitch","line","start","end","startIndex","index","endIndex","f","g","concat","unshift","point","xt","yt","v0","v1","size","_","arguments","_0","Math","floor","_1","error","c","ringContains","j","pi","xi","yi","pj","xj","yj","segmentContains","a","b","collinear","within","p","q","r","k","nice","zero","ex","extent","min","stop","span","step","tickStep","range","Isocontour","params","Transform","call","Definition","inherits","transform","pulse","changed","modified","StopPropagation","out","fork","NO_SOURCE","NO_FIELDS","source","materialize","SOURCE","field","identity","thresholds","levels","as","t","grid","paths","width","height","isArray","transformPaths","rederive","ingest","rem","add","quantize","resolve","max","datum","s","scale","translate","isFunction","sx","isNumber","sy","tx","ty","x1","y1","flip","transformPolygon","transformRing","reverse","transformPoint","geometry","radius","bw","data","v","bandwidthNRD","round","sqrt","number","constant","d","weight","one","bandwidth","density","counts","rx","ry","ox","oy","m","values0","Float32Array","values1","blurX","blurY","pow","sum","sz","x2","y2","cellSize","log","LN2","array","target","w","sr","KDE2D","PARAMS","obj","param","groups","partition","groupby","names","accessorName","kde","density2D","set","vals","dims","get","Contour","thresh","count","post","Feature","FeatureCollection","MultiPoint","GeoJSON","features","_features","points","_points","fields","lon","lat","geojson","flag","ADD","mod","REM","accessorFields","visit","GeoPath","ALL","path","getProjectionPath","projection","reflow","ADD_MOD","prev","initPath","pointRadius","modifies","context","GeoPoint","proj","xy","undefined","GeoShape","shape","shapeGenerator","Graticule","generator","geoGraticule","src","gen","prop","replace","Heatmap","shared","opacity","opacity_","color","color_","$x","$y","$value","$max","o","extend","toCanvas","dep","rgb","dependency","toSet","val","can","canvas","ctx","getContext","img","getImageData","pix","putImageData","Projection","create","projectionProperties","fit","collectGeoJSON","fitExtent","fitSize","constructor","toLowerCase","key","reduce","featurize","filter"],"mappings":"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"}