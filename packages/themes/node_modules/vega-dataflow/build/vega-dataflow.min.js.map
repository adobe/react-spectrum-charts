{"version":3,"file":"vega-dataflow.min.js","sources":["../src/util/UniqueList.js","../src/util/asyncCallback.js","../src/Tuple.js","../src/ChangeSet.js","../src/Parameters.js","../src/Operator.js","../src/EventStream.js","../src/dataflow/on.js","../src/Pulse.js","../src/MultiPulse.js","../src/dataflow/run.js","../src/dataflow/update.js","../src/util/Heap.js","../src/dataflow/Dataflow.js","../src/Transform.js","../src/dataflow/add.js","../src/dataflow/connect.js","../src/dataflow/rank.js","../src/dataflow/load.js","../src/dataflow/events.js","../src/register.js"],"sourcesContent":["import {identity} from 'vega-util';\n\nexport default function UniqueList(idFunc) {\n  const $ = idFunc || identity,\n        list = [],\n        ids = {};\n\n  list.add = _ => {\n    const id = $(_);\n    if (!ids[id]) {\n      ids[id] = 1;\n      list.push(_);\n    }\n    return list;\n  };\n\n  list.remove = _ => {\n    const id = $(_);\n    if (ids[id]) {\n      ids[id] = 0;\n      const idx = list.indexOf(_);\n      if (idx >= 0) list.splice(idx, 1);\n    }\n    return list;\n  };\n\n  return list;\n}\n","/**\n * Invoke and await a potentially async callback function. If\n * an error occurs, trap it and route to Dataflow.error.\n * @param {Dataflow} df - The dataflow instance\n * @param {function} callback - A callback function to invoke\n *   and then await. The dataflow will be passed as the single\n *   argument to the function.\n */\nexport default async function(df, callback) {\n  try { await callback(df); } catch (err) { df.error(err); }\n}\n","const TUPLE_ID_KEY = Symbol('vega_id');\nlet TUPLE_ID = 1;\n\n/**\n * Resets the internal tuple id counter to one.\n */\nexport function reset() {\n  TUPLE_ID = 1;\n}\n\n/**\n * Checks if an input value is a registered tuple.\n * @param {*} t - The value to check.\n * @return {boolean} True if the input is a tuple, false otherwise.\n */\nexport function isTuple(t) {\n  return !!(t && tupleid(t));\n}\n\n/**\n * Returns the id of a tuple.\n * @param {object} t - The input tuple.\n * @return {*} the tuple id.\n */\nexport function tupleid(t) {\n  return t[TUPLE_ID_KEY];\n}\n\n/**\n * Sets the id of a tuple.\n * @param {object} t - The input tuple.\n * @param {*} id - The id value to set.\n * @return {object} the input tuple.\n */\nfunction setid(t, id) {\n  t[TUPLE_ID_KEY] = id;\n  return t;\n}\n\n/**\n * Ingest an object or value as a data tuple.\n * If the input value is an object, an id field will be added to it. For\n * efficiency, the input object is modified directly. A copy is not made.\n * If the input value is a literal, it will be wrapped in a new object\n * instance, with the value accessible as the 'data' property.\n * @param datum - The value to ingest.\n * @return {object} The ingested data tuple.\n */\nexport function ingest(datum) {\n  const t = (datum === Object(datum)) ? datum : {data: datum};\n  return tupleid(t) ? t : setid(t, TUPLE_ID++);\n}\n\n/**\n * Given a source tuple, return a derived copy.\n * @param {object} t - The source tuple.\n * @return {object} The derived tuple.\n */\nexport function derive(t) {\n  return rederive(t, ingest({}));\n}\n\n/**\n * Rederive a derived tuple by copying values from the source tuple.\n * @param {object} t - The source tuple.\n * @param {object} d - The derived tuple.\n * @return {object} The derived tuple.\n */\nexport function rederive(t, d) {\n  for (const k in t) d[k] = t[k];\n  return d;\n}\n\n/**\n * Replace an existing tuple with a new tuple.\n * @param {object} t - The existing data tuple.\n * @param {object} d - The new tuple that replaces the old.\n * @return {object} The new tuple.\n */\nexport function replace(t, d) {\n  return setid(d, tupleid(t));\n}\n\n/**\n * Generate an augmented comparator function that provides stable\n * sorting by tuple id when the given comparator produces ties.\n * @param {function} cmp - The comparator to augment.\n * @param {function} [f] - Optional tuple accessor function.\n * @return {function} An augmented comparator function.\n */\nexport function stableCompare(cmp, f) {\n  return !cmp ? null\n    : f ? (a, b) => cmp(a, b) || (tupleid(f(a)) - tupleid(f(b)))\n    : (a, b) => cmp(a, b) || (tupleid(a) - tupleid(b));\n}\n","import {ingest, tupleid} from './Tuple';\nimport {array, constant, isFunction} from 'vega-util';\n\nexport function isChangeSet(v) {\n  return v && v.constructor === changeset;\n}\n\nexport default function changeset() {\n  const add = [],  // insert tuples\n        rem = [],  // remove tuples\n        mod = [],  // modify tuples\n        remp = [], // remove by predicate\n        modp = []; // modify by predicate\n  let clean = null,\n      reflow = false;\n\n  return {\n    constructor: changeset,\n    insert(t) {\n      const d = array(t), n = d.length;\n      for (let i = 0; i < n; ++i) add.push(d[i]);\n      return this;\n    },\n    remove(t) {\n      const a = isFunction(t) ? remp : rem,\n            d = array(t),\n            n = d.length;\n      for (let i = 0; i < n; ++i) a.push(d[i]);\n      return this;\n    },\n    modify(t, field, value) {\n      const m = {field: field, value: constant(value)};\n      if (isFunction(t)) {\n        m.filter = t;\n        modp.push(m);\n      } else {\n        m.tuple = t;\n        mod.push(m);\n      }\n      return this;\n    },\n    encode(t, set) {\n      if (isFunction(t)) modp.push({filter: t, field: set});\n      else mod.push({tuple: t, field: set});\n      return this;\n    },\n    clean(value) {\n      clean = value;\n      return this;\n    },\n    reflow() {\n      reflow = true;\n      return this;\n    },\n    pulse(pulse, tuples) {\n      const cur = {}, out = {};\n      let i, n, m, f, t, id;\n\n      // build lookup table of current tuples\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        cur[tupleid(tuples[i])] = 1;\n      }\n\n      // process individual tuples to remove\n      for (i = 0, n = rem.length; i < n; ++i) {\n        t = rem[i];\n        cur[tupleid(t)] = -1;\n      }\n\n      // process predicate-based removals\n      for (i = 0, n = remp.length; i < n; ++i) {\n        f = remp[i];\n        tuples.forEach(t => {\n          if (f(t)) cur[tupleid(t)] = -1;\n        });\n      }\n\n      // process all add tuples\n      for (i = 0, n = add.length; i < n; ++i) {\n        t = add[i];\n        id = tupleid(t);\n        if (cur[id]) {\n          // tuple already resides in dataset\n          // if flagged for both add and remove, cancel\n          cur[id] = 1;\n        } else {\n          // tuple does not reside in dataset, add\n          pulse.add.push(ingest(add[i]));\n        }\n      }\n\n      // populate pulse rem list\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        t = tuples[i];\n        if (cur[tupleid(t)] < 0) pulse.rem.push(t);\n      }\n\n      // modify helper method\n      function modify(t, f, v) {\n        if (v) {\n          t[f] = v(t);\n        } else {\n          pulse.encode = f;\n        }\n        if (!reflow) out[tupleid(t)] = t;\n      }\n\n      // process individual tuples to modify\n      for (i = 0, n = mod.length; i < n; ++i) {\n        m = mod[i];\n        t = m.tuple;\n        f = m.field;\n        id = cur[tupleid(t)];\n        if (id > 0) {\n          modify(t, f, m.value);\n          pulse.modifies(f);\n        }\n      }\n\n      // process predicate-based modifications\n      for (i = 0, n = modp.length; i < n; ++i) {\n        m = modp[i];\n        f = m.filter;\n        tuples.forEach(t => {\n          if (f(t) && cur[tupleid(t)] > 0) {\n            modify(t, m.field, m.value);\n          }\n        });\n        pulse.modifies(m.field);\n      }\n\n      // upon reflow request, populate mod with all non-removed tuples\n      // otherwise, populate mod with modified tuples only\n      if (reflow) {\n        pulse.mod = rem.length || remp.length\n          ? tuples.filter(t => cur[tupleid(t)] > 0)\n          : tuples.slice();\n      } else {\n        for (id in out) pulse.mod.push(out[id]);\n      }\n\n      // set pulse garbage collection request\n      if (clean || clean == null && (rem.length || remp.length)) {\n        pulse.clean(true);\n      }\n\n      return pulse;\n    }\n  };\n}\n","import {isArray} from 'vega-util';\n\nconst CACHE = '_:mod:_';\n\n/**\n * Hash that tracks modifications to assigned values.\n * Callers *must* use the set method to update values.\n */\nexport default function Parameters() {\n  Object.defineProperty(this, CACHE, {writable: true, value: {}});\n}\n\nParameters.prototype = {\n  /**\n   * Set a parameter value. If the parameter value changes, the parameter\n   * will be recorded as modified.\n   * @param {string} name - The parameter name.\n   * @param {number} index - The index into an array-value parameter. Ignored if\n   *   the argument is undefined, null or less than zero.\n   * @param {*} value - The parameter value to set.\n   * @param {boolean} [force=false] - If true, records the parameter as modified\n   *   even if the value is unchanged.\n   * @return {Parameters} - This parameter object.\n   */\n  set(name, index, value, force) {\n    const o = this,\n          v = o[name],\n          mod = o[CACHE];\n\n    if (index != null && index >= 0) {\n      if (v[index] !== value || force) {\n        v[index] = value;\n        mod[index + ':' + name] = -1;\n        mod[name] = -1;\n      }\n    } else if (v !== value || force) {\n      o[name] = value;\n      mod[name] = isArray(value) ? 1 + value.length : -1;\n    }\n\n    return o;\n  },\n\n  /**\n   * Tests if one or more parameters has been modified. If invoked with no\n   * arguments, returns true if any parameter value has changed. If the first\n   * argument is array, returns trues if any parameter name in the array has\n   * changed. Otherwise, tests if the given name and optional array index has\n   * changed.\n   * @param {string} name - The parameter name to test.\n   * @param {number} [index=undefined] - The parameter array index to test.\n   * @return {boolean} - Returns true if a queried parameter was modified.\n   */\n  modified(name, index) {\n    const mod = this[CACHE];\n    if (!arguments.length) {\n      for (const k in mod) { if (mod[k]) return true; }\n      return false;\n    } else if (isArray(name)) {\n      for (let k = 0; k < name.length; ++k) {\n        if (mod[name[k]]) return true;\n      }\n      return false;\n    }\n    return (index != null && index >= 0)\n      ? (index + 1 < mod[name] || !!mod[index + ':' + name])\n      : !!mod[name];\n  },\n\n  /**\n   * Clears the modification records. After calling this method,\n   * all parameters are considered unmodified.\n   */\n  clear() {\n    this[CACHE] = {};\n    return this;\n  }\n};\n","import Parameters from './Parameters';\nimport UniqueList from './util/UniqueList';\nimport {array, error, id, isArray} from 'vega-util';\n\nlet OP_ID = 0;\n\nconst PULSE = 'pulse',\n      NO_PARAMS = new Parameters();\n\n// Boolean Flags\nconst SKIP     = 1,\n      MODIFIED = 2;\n\n/**\n * An Operator is a processing node in a dataflow graph.\n * Each operator stores a value and an optional value update function.\n * Operators can accept a hash of named parameters. Parameter values can\n * either be direct (JavaScript literals, arrays, objects) or indirect\n * (other operators whose values will be pulled dynamically). Operators\n * included as parameters will have this operator added as a dependency.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {function(object, Pulse)} [update] - An update function. Upon\n *   evaluation of this operator, the update function will be invoked and the\n *   return value will be used as the new value of this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @see parameters\n */\nexport default function Operator(init, update, params, react) {\n  this.id = ++OP_ID;\n  this.value = init;\n  this.stamp = -1;\n  this.rank = -1;\n  this.qrank = -1;\n  this.flags = 0;\n\n  if (update) {\n    this._update = update;\n  }\n  if (params) this.parameters(params, react);\n}\n\nfunction flag(bit) {\n  return function(state) {\n    const f = this.flags;\n    if (arguments.length === 0) return !!(f & bit);\n    this.flags = state ? (f | bit) : (f & ~bit);\n    return this;\n  };\n}\n\nOperator.prototype = {\n\n  /**\n   * Returns a list of target operators dependent on this operator.\n   * If this list does not exist, it is created and then returned.\n   * @return {UniqueList}\n   */\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  /**\n   * Sets the value of this operator.\n   * @param {*} value - the value to set.\n   * @return {Number} Returns 1 if the operator value has changed\n   *   according to strict equality, returns 0 otherwise.\n   */\n  set(value) {\n    if (this.value !== value) {\n      this.value = value;\n      return 1;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\n   * Indicates that operator evaluation should be skipped on the next pulse.\n   * This operator will still propagate incoming pulses, but its update function\n   * will not be invoked. The skip flag is reset after every pulse, so calling\n   * this method will affect processing of the next pulse only.\n   */\n  skip: flag(SKIP),\n\n  /**\n   * Indicates that this operator's value has been modified on its most recent\n   * pulse. Normally modification is checked via strict equality; however, in\n   * some cases it is more efficient to update the internal state of an object.\n   * In those cases, the modified flag can be used to trigger propagation. Once\n   * set, the modification flag persists across pulses until unset. The flag can\n   * be used with the last timestamp to test if a modification is recent.\n   */\n  modified: flag(MODIFIED),\n\n  /**\n   * Sets the parameters for this operator. The parameter values are analyzed for\n   * operator instances. If found, this operator will be added as a dependency\n   * of the parameterizing operator. Operator values are dynamically marshalled\n   * from each operator parameter prior to evaluation. If a parameter value is\n   * an array, the array will also be searched for Operator instances. However,\n   * the search does not recurse into sub-arrays or object properties.\n   * @param {object} params - A hash of operator parameters.\n   * @param {boolean} [react=true] - A flag indicating if this operator should\n   *   automatically update (react) when parameter values change. In other words,\n   *   this flag determines if the operator registers itself as a listener on\n   *   any upstream operators included in the parameters.\n   * @param {boolean} [initonly=false] - A flag indicating if this operator\n   *   should calculate an update only upon its initial evaluation, then\n   *   deregister dependencies and suppress all future update invocations.\n   * @return {Operator[]} - An array of upstream dependencies.\n   */\n  parameters(params, react, initonly) {\n    react = react !== false;\n    const argval = (this._argval = this._argval || new Parameters()),\n          argops = (this._argops = this._argops || []),\n          deps = [];\n    let name, value, n, i;\n\n    const add = (name, index, value) => {\n      if (value instanceof Operator) {\n        if (value !== this) {\n          if (react) value.targets().add(this);\n          deps.push(value);\n        }\n        argops.push({op:value, name:name, index:index});\n      } else {\n        argval.set(name, index, value);\n      }\n    };\n\n    for (name in params) {\n      value = params[name];\n\n      if (name === PULSE) {\n        array(value).forEach(op => {\n          if (!(op instanceof Operator)) {\n            error('Pulse parameters must be operator instances.');\n          } else if (op !== this) {\n            op.targets().add(this);\n            deps.push(op);\n          }\n        });\n        this.source = value;\n      } else if (isArray(value)) {\n        argval.set(name, -1, Array(n = value.length));\n        for (i = 0; i < n; ++i) add(name, i, value[i]);\n      } else {\n        add(name, -1, value);\n      }\n    }\n\n    this.marshall().clear(); // initialize values\n    if (initonly) argops.initonly = true;\n\n    return deps;\n  },\n\n  /**\n   * Internal method for marshalling parameter values.\n   * Visits each operator dependency to pull the latest value.\n   * @return {Parameters} A Parameters object to pass to the update function.\n   */\n  marshall(stamp) {\n    const argval = this._argval || NO_PARAMS,\n          argops = this._argops;\n    let item, i, op, mod;\n\n    if (argops) {\n      const n = argops.length;\n      for (i = 0; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        mod = op.modified() && op.stamp === stamp;\n        argval.set(item.name, item.index, op.value, mod);\n      }\n\n      if (argops.initonly) {\n        for (i = 0; i < n; ++i) {\n          item = argops[i];\n          item.op.targets().remove(this);\n        }\n        this._argops = null;\n        this._update = null;\n      }\n    }\n    return argval;\n  },\n\n  /**\n   * Detach this operator from the dataflow.\n   * Unregisters listeners on upstream dependencies.\n   */\n  detach() {\n    const argops = this._argops;\n    let i, n, item, op;\n\n    if (argops) {\n      for (i = 0, n = argops.length; i < n; ++i) {\n        item = argops[i];\n        op = item.op;\n        if (op._targets) {\n          op._targets.remove(this);\n        }\n      }\n    }\n\n    // remove references to the source and pulse object,\n    // if present, to prevent memory leaks of old data.\n    this.pulse = null;\n    this.source = null;\n  },\n\n  /**\n   * Delegate method to perform operator processing.\n   * Subclasses can override this method to perform custom processing.\n   * By default, it marshalls parameters and calls the update function\n   * if that function is defined. If the update function does not\n   * change the operator value then StopPropagation is returned.\n   * If no update function is defined, this method does nothing.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return The output pulse or StopPropagation. A falsy return value\n   *   (including undefined) will let the input pulse pass through.\n   */\n  evaluate(pulse) {\n    const update = this._update;\n    if (update) {\n      const params = this.marshall(pulse.stamp),\n            v = update.call(this, params, pulse);\n\n      params.clear();\n      if (v !== this.value) {\n        this.value = v;\n      } else if (!this.modified()) {\n        return pulse.StopPropagation;\n      }\n    }\n  },\n\n  /**\n   * Run this operator for the current pulse. If this operator has already\n   * been run at (or after) the pulse timestamp, returns StopPropagation.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n    let rv;\n    if (this.skip()) {\n      this.skip(false);\n      rv = 0;\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    return (this.pulse = rv || pulse);\n  }\n};\n","import UniqueList from './util/UniqueList';\nimport {debounce, id, identity, truthy} from 'vega-util';\n\nlet STREAM_ID = 0;\n\n/**\n * Models an event stream.\n * @constructor\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @param {function(Object)} [receive] - Event callback function to invoke\n *   upon receipt of a new event. Use to override standard event processing.\n */\nexport default function EventStream(filter, apply, receive) {\n  this.id = ++STREAM_ID;\n  this.value = null;\n  if (receive) this.receive = receive;\n  if (filter) this._filter = filter;\n  if (apply) this._apply = apply;\n}\n\n/**\n * Creates a new event stream instance with the provided\n * (optional) filter, apply and receive functions.\n * @param {function(Object, number): boolean} [filter] - Filter predicate.\n *   Events pass through when truthy, events are suppressed when falsy.\n * @param {function(Object): *} [apply] - Applied to input events to produce\n *   new event values.\n * @see EventStream\n */\nexport function stream(filter, apply, receive) {\n  return new EventStream(filter, apply, receive);\n}\n\nEventStream.prototype = {\n  _filter: truthy,\n\n  _apply: identity,\n\n  targets() {\n    return this._targets || (this._targets = UniqueList(id));\n  },\n\n  consume(_) {\n    if (!arguments.length) return !!this._consume;\n    this._consume = !!_;\n    return this;\n  },\n\n  receive(evt) {\n    if (this._filter(evt)) {\n      const val = (this.value = this._apply(evt)),\n          trg = this._targets,\n          n = trg ? trg.length : 0;\n\n      for (let i = 0; i < n; ++i) trg[i].receive(val);\n\n      if (this._consume) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    }\n  },\n\n  filter(filter) {\n    const s = stream(filter);\n    this.targets().add(s);\n    return s;\n  },\n\n  apply(apply) {\n    const s = stream(null, apply);\n    this.targets().add(s);\n    return s;\n  },\n\n  merge() {\n    const s = stream();\n\n    this.targets().add(s);\n    for (let i=0, n=arguments.length; i<n; ++i) {\n      arguments[i].targets().add(s);\n    }\n\n    return s;\n  },\n\n  throttle(pause) {\n    let t = -1;\n    return this.filter(() => {\n      const now = Date.now();\n      if ((now - t) > pause) {\n        t = now;\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  },\n\n  debounce(delay) {\n    const s = stream();\n\n    this.targets().add(stream(null, null,\n      debounce(delay, e => {\n        const df = e.dataflow;\n        s.receive(e);\n        if (df && df.run) df.run();\n      })\n    ));\n\n    return s;\n  },\n\n  between(a, b) {\n    let active = false;\n    a.targets().add(stream(null, null, () => active = true));\n    b.targets().add(stream(null, null, () => active = false));\n    return this.filter(() => active);\n  },\n\n  detach() {\n    // ensures compatibility with operators (#2753)\n    // remove references to other streams and filter functions that may\n    // be bound to subcontexts that need to be garbage collected.\n    this._filter = truthy;\n    this._targets = null;\n  }\n};\n","import Operator from '../Operator';\nimport {isChangeSet} from '../ChangeSet';\nimport {constant, extend, isFunction} from 'vega-util';\n\nconst SKIP = {skip: true};\n\n/**\n * Perform operator updates in response to events. Applies an\n * update function to compute a new operator value. If the update function\n * returns a {@link ChangeSet}, the operator will be pulsed with those tuple\n * changes. Otherwise, the operator value will be updated to the return value.\n * @param {EventStream|Operator} source - The event source to react to.\n *   This argument can be either an EventStream or an Operator.\n * @param {Operator|function(object):Operator} target - The operator to update.\n *   This argument can either be an Operator instance or (if the source\n *   argument is an EventStream), a function that accepts an event object as\n *   input and returns an Operator to target.\n * @param {function(Parameters,Event): *} [update] - Optional update function\n *   to compute the new operator value, or a literal value to set. Update\n *   functions expect to receive a parameter object and event as arguments.\n *   This function can either return a new operator value or (if the source\n *   argument is an EventStream) a {@link ChangeSet} instance to pulse\n *   the target operator with tuple changes.\n * @param {object} [params] - The update function parameters.\n * @param {object} [options] - Additional options hash. If not overridden,\n *   updated operators will be skipped by default.\n * @param {boolean} [options.skip] - If true, the operator will\n *  be skipped: it will not be evaluated, but its dependents will be.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @return {Dataflow}\n */\nexport default function(source, target, update, params, options) {\n  const fn = source instanceof Operator ? onOperator : onStream;\n  fn(this, source, target, update, params, options);\n  return this;\n}\n\nfunction onStream(df, stream, target, update, params, options) {\n  const opt = extend({}, options, SKIP);\n  let func, op;\n\n  if (!isFunction(target)) target = constant(target);\n\n  if (update === undefined) {\n    func = e => df.touch(target(e));\n  } else if (isFunction(update)) {\n    op = new Operator(null, update, params, false);\n    func = e => {\n      op.evaluate(e);\n      const t = target(e), v = op.value;\n      isChangeSet(v) ? df.pulse(t, v, options) : df.update(t, v, opt);\n    };\n  } else {\n    func = e => df.update(target(e), update, opt);\n  }\n\n  stream.apply(func);\n}\n\nfunction onOperator(df, source, target, update, params, options) {\n  if (update === undefined) {\n    source.targets().add(target);\n  } else {\n    const opt = options || {},\n          op = new Operator(null, updater(target, update), params, false);\n    op.modified(opt.force);\n    op.rank = source.rank;       // immediately follow source\n    source.targets().add(op);    // add dependency\n\n    if (target) {\n      op.skip(true);             // skip first invocation\n      op.value = target.value;   // initialize value\n      op.targets().add(target);  // chain dependencies\n      df.connect(target, [op]);  // rerank as needed, #1672\n    }\n  }\n}\n\nfunction updater(target, update) {\n  update = isFunction(update) ? update : constant(update);\n  return target\n    ? function(_, pulse) {\n        const value = update(_, pulse);\n        if (!target.skip()) {\n          target.skip(value !== this.value).value = value;\n        }\n        return value;\n      }\n    : update;\n}\n","import {tupleid} from './Tuple';\nimport {isArray, visitArray} from 'vega-util';\n\n/**\n * Sentinel value indicating pulse propagation should stop.\n */\nexport const StopPropagation = {};\n\n// Pulse visit type flags\nconst ADD       = (1 << 0),\n      REM       = (1 << 1),\n      MOD       = (1 << 2),\n      ADD_REM   = ADD | REM,\n      ADD_MOD   = ADD | MOD,\n      ALL       = ADD | REM | MOD,\n      REFLOW    = (1 << 3),\n      SOURCE    = (1 << 4),\n      NO_SOURCE = (1 << 5),\n      NO_FIELDS = (1 << 6);\n\n/**\n * A Pulse enables inter-operator communication during a run of the\n * dataflow graph. In addition to the current timestamp, a pulse may also\n * contain a change-set of added, removed or modified data tuples, as well as\n * a pointer to a full backing data source. Tuple change sets may not\n * be fully materialized; for example, to prevent needless array creation\n * a change set may include larger arrays and corresponding filter functions.\n * The pulse provides a {@link visit} method to enable proper and efficient\n * iteration over requested data tuples.\n *\n * In addition, each pulse can track modification flags for data tuple fields.\n * Responsible transform operators should call the {@link modifies} method to\n * indicate changes to data fields. The {@link modified} method enables\n * querying of this modification state.\n *\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The current propagation timestamp.\n * @param {string} [encode] - An optional encoding set name, which is then\n *   accessible as Pulse.encode. Operators can respond to (or ignore) this\n *   setting as appropriate. This parameter can be used in conjunction with\n *   the Encode transform in the vega-encode module.\n */\nexport default function Pulse(dataflow, stamp, encode) {\n  this.dataflow = dataflow;\n  this.stamp = stamp == null ? -1 : stamp;\n  this.add = [];\n  this.rem = [];\n  this.mod = [];\n  this.fields = null;\n  this.encode = encode || null;\n}\n\nfunction materialize(data, filter) {\n  const out = [];\n  visitArray(data, filter, _ => out.push(_));\n  return out;\n}\n\nfunction filter(pulse, flags) {\n  const map = {};\n  pulse.visit(flags, t => { map[tupleid(t)] = 1; });\n  return t => map[tupleid(t)] ? null : t;\n}\n\nfunction addFilter(a, b) {\n  return a\n    ? (t, i) => a(t, i) && b(t, i)\n    : b;\n}\n\nPulse.prototype = {\n\n  /**\n   * Sentinel value indicating pulse propagation should stop.\n   */\n  StopPropagation,\n\n  /**\n   * Boolean flag indicating ADD (added) tuples.\n   */\n  ADD,\n\n  /**\n   * Boolean flag indicating REM (removed) tuples.\n   */\n  REM,\n\n  /**\n   * Boolean flag indicating MOD (modified) tuples.\n   */\n  MOD,\n\n  /**\n   * Boolean flag indicating ADD (added) and REM (removed) tuples.\n   */\n  ADD_REM,\n\n  /**\n   * Boolean flag indicating ADD (added) and MOD (modified) tuples.\n   */\n  ADD_MOD,\n\n  /**\n   * Boolean flag indicating ADD, REM and MOD tuples.\n   */\n  ALL,\n\n  /**\n   * Boolean flag indicating all tuples in a data source\n   * except for the ADD, REM and MOD tuples.\n   */\n  REFLOW,\n\n  /**\n   * Boolean flag indicating a 'pass-through' to a\n   * backing data source, ignoring ADD, REM and MOD tuples.\n   */\n  SOURCE,\n\n  /**\n   * Boolean flag indicating that source data should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_SOURCE,\n\n  /**\n   * Boolean flag indicating that field modifications should be\n   * suppressed when creating a forked pulse.\n   */\n  NO_FIELDS,\n\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created.\n   * @return {Pulse} - The forked pulse instance.\n   * @see init\n   */\n  fork(flags) {\n    return new Pulse(this.dataflow).init(this, flags);\n  },\n\n  /**\n   * Creates a copy of this pulse with new materialized array\n   * instances for the ADD, REM, MOD, and SOURCE arrays.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse} - The cloned pulse instance.\n   * @see init\n   */\n  clone() {\n    const p = this.fork(ALL);\n    p.add = p.add.slice();\n    p.rem = p.rem.slice();\n    p.mod = p.mod.slice();\n    if (p.source) p.source = p.source.slice();\n    return p.materialize(ALL | SOURCE);\n  },\n\n  /**\n   * Returns a pulse that adds all tuples from a backing source. This is\n   * useful for cases where operators are added to a dataflow after an\n   * upstream data pipeline has already been processed, ensuring that\n   * new operators can observe all tuples within a stream.\n   * @return {Pulse} - A pulse instance with all source tuples included\n   *   in the add array. If the current pulse already has all source\n   *   tuples in its add array, it is returned directly. If the current\n   *   pulse does not have a backing source, it is returned directly.\n   */\n  addAll() {\n    let p = this;\n    const reuse = !p.source\n      || p.add === p.rem // special case for indexed set (e.g., crossfilter)\n      || (!p.rem.length && p.source.length === p.add.length);\n\n    if (reuse) {\n      return p;\n    } else {\n      p = new Pulse(this.dataflow).init(this);\n      p.add = p.source;\n      p.rem = []; // new operators can ignore rem #2769\n      return p;\n    }\n  },\n\n  /**\n   * Initialize this pulse based on the values of another pulse. This method\n   * is used internally by {@link fork} to initialize a new forked tuple.\n   * The dataflow, time stamp and field modification values are copied over.\n   * By default, new empty ADD, REM and MOD arrays are created.\n   * @param {Pulse} src - The source pulse to copy from.\n   * @param {number} flags - Integer of boolean flags indicating which (if any)\n   *   tuple arrays should be copied to the new pulse. The supported flag values\n   *   are ADD, REM and MOD. Array references are copied directly: new array\n   *   instances are not created. By default, source data arrays are copied\n   *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.\n   * @return {Pulse} - Returns this Pulse instance.\n   */\n  init(src, flags) {\n    const p = this;\n    p.stamp = src.stamp;\n    p.encode = src.encode;\n\n    if (src.fields && !(flags & NO_FIELDS)) {\n      p.fields = src.fields;\n    }\n\n    if (flags & ADD) {\n      p.addF = src.addF;\n      p.add = src.add;\n    } else {\n      p.addF = null;\n      p.add = [];\n    }\n\n    if (flags & REM) {\n      p.remF = src.remF;\n      p.rem = src.rem;\n    } else {\n      p.remF = null;\n      p.rem = [];\n    }\n\n    if (flags & MOD) {\n      p.modF = src.modF;\n      p.mod = src.mod;\n    } else {\n      p.modF = null;\n      p.mod = [];\n    }\n\n    if (flags & NO_SOURCE) {\n      p.srcF = null;\n      p.source = null;\n    } else {\n      p.srcF = src.srcF;\n      p.source = src.source;\n      if (src.cleans) p.cleans = src.cleans;\n    }\n\n    return p;\n  },\n\n  /**\n   * Schedules a function to run after pulse propagation completes.\n   * @param {function} func - The function to run.\n   */\n  runAfter(func) {\n    this.dataflow.runAfter(func);\n  },\n\n  /**\n   * Indicates if tuples have been added, removed or modified.\n   * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.\n   *   Defaults to ALL, returning true if any tuple type has changed.\n   * @return {boolean} - Returns true if one or more queried tuple types have\n   *   changed, false otherwise.\n   */\n  changed(flags) {\n    const f = flags || ALL;\n    return ((f & ADD) && this.add.length)\n        || ((f & REM) && this.rem.length)\n        || ((f & MOD) && this.mod.length);\n  },\n\n  /**\n   * Forces a \"reflow\" of tuple values, such that all tuples in the backing\n   * source are added to the MOD set, unless already present in the ADD set.\n   * @param {boolean} [fork=false] - If true, returns a forked copy of this\n   *   pulse, and invokes reflow on that derived pulse.\n   * @return {Pulse} - The reflowed pulse instance.\n   */\n  reflow(fork) {\n    if (fork) return this.fork(ALL).reflow();\n\n    const len = this.add.length,\n          src = this.source && this.source.length;\n    if (src && src !== len) {\n      this.mod = this.source;\n      if (len) this.filter(MOD, filter(this, ADD));\n    }\n    return this;\n  },\n\n  /**\n   * Get/set metadata to pulse requesting garbage collection\n   * to reclaim currently unused resources.\n   */\n  clean(value) {\n    if (arguments.length) {\n      this.cleans = !!value;\n      return this;\n    } else {\n      return this.cleans;\n    }\n  },\n\n  /**\n   * Marks one or more data field names as modified to assist dependency\n   * tracking and incremental processing by transform operators.\n   * @param {string|Array<string>} _ - The field(s) to mark as modified.\n   * @return {Pulse} - This pulse instance.\n   */\n  modifies(_) {\n    const hash = this.fields || (this.fields = {});\n    if (isArray(_)) {\n      _.forEach(f => hash[f] = true);\n    } else {\n      hash[_] = true;\n    }\n    return this;\n  },\n\n  /**\n   * Checks if one or more data fields have been modified during this pulse\n   * propagation timestamp.\n   * @param {string|Array<string>} _ - The field(s) to check for modified.\n   * @param {boolean} nomod - If true, will check the modified flag even if\n   *   no mod tuples exist. If false (default), mod tuples must be present.\n   * @return {boolean} - Returns true if any of the provided fields has been\n   *   marked as modified, false otherwise.\n   */\n  modified(_, nomod) {\n    const fields = this.fields;\n    return !((nomod || this.mod.length) && fields) ? false\n      : !arguments.length ? !!fields\n      : isArray(_) ? _.some(f => fields[f])\n      : fields[_];\n  },\n\n  /**\n   * Adds a filter function to one more tuple sets. Filters are applied to\n   * backing tuple arrays, to determine the actual set of tuples considered\n   * added, removed or modified. They can be used to delay materialization of\n   * a tuple set in order to avoid expensive array copies. In addition, the\n   * filter functions can serve as value transformers: unlike standard predicate\n   * function (which return boolean values), Pulse filters should return the\n   * actual tuple value to process. If a tuple set is already filtered, the\n   * new filter function will be appended into a conjuntive ('and') query.\n   * @param {number} flags - Flags indicating the tuple set(s) to filter.\n   * @param {function(*):object} filter - Filter function that will be applied\n   *   to the tuple set array, and should return a data tuple if the value\n   *   should be included in the tuple set, and falsy (or null) otherwise.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  filter(flags, filter) {\n    const p = this;\n    if (flags & ADD) p.addF = addFilter(p.addF, filter);\n    if (flags & REM) p.remF = addFilter(p.remF, filter);\n    if (flags & MOD) p.modF = addFilter(p.modF, filter);\n    if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);\n    return p;\n  },\n\n  /**\n   * Materialize one or more tuple sets in this pulse. If the tuple set(s) have\n   * a registered filter function, it will be applied and the tuple set(s) will\n   * be replaced with materialized tuple arrays.\n   * @param {number} flags - Flags indicating the tuple set(s) to materialize.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  materialize(flags) {\n    flags = flags || ALL;\n    const p = this;\n    if ((flags & ADD) && p.addF) {\n      p.add = materialize(p.add, p.addF);\n      p.addF = null;\n    }\n    if ((flags & REM) && p.remF) {\n      p.rem = materialize(p.rem, p.remF);\n      p.remF = null;\n    }\n    if ((flags & MOD) && p.modF) {\n      p.mod = materialize(p.mod, p.modF);\n      p.modF = null;\n    }\n    if ((flags & SOURCE) && p.srcF) {\n      p.source = p.source.filter(p.srcF);\n      p.srcF = null;\n    }\n    return p;\n  },\n\n  /**\n   * Visit one or more tuple sets in this pulse.\n   * @param {number} flags - Flags indicating the tuple set(s) to visit.\n   *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source\n   *   has been set).\n   * @param {function(object):*} - Visitor function invoked per-tuple.\n   * @return {Pulse} - Returns this pulse instance.\n   */\n  visit(flags, visitor) {\n    const p = this, v = visitor;\n\n    if (flags & SOURCE) {\n      visitArray(p.source, p.srcF, v);\n      return p;\n    }\n\n    if (flags & ADD) visitArray(p.add, p.addF, v);\n    if (flags & REM) visitArray(p.rem, p.remF, v);\n    if (flags & MOD) visitArray(p.mod, p.modF, v);\n\n    const src = p.source;\n    if ((flags & REFLOW) && src) {\n      const sum = p.add.length + p.mod.length;\n      if (sum === src.length) {\n        // do nothing\n      } else if (sum) {\n        visitArray(src, filter(p, ADD_MOD), v);\n      } else {\n        // if no add/rem/mod tuples, visit source\n        visitArray(src, p.srcF, v);\n      }\n    }\n\n    return p;\n  }\n};\n","import Pulse from './Pulse';\nimport {error, inherits, isArray} from 'vega-util';\n\n/**\n * Represents a set of multiple pulses. Used as input for operators\n * that accept multiple pulses at a time. Contained pulses are\n * accessible via the public \"pulses\" array property. This pulse doe\n * not carry added, removed or modified tuples directly. However,\n * the visit method can be used to traverse all such tuples contained\n * in sub-pulses with a timestamp matching this parent multi-pulse.\n * @constructor\n * @param {Dataflow} dataflow - The backing dataflow instance.\n * @param {number} stamp - The timestamp.\n * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.\n */\nexport default function MultiPulse(dataflow, stamp, pulses, encode) {\n  const p = this;\n  let c = 0;\n\n  this.dataflow = dataflow;\n  this.stamp = stamp;\n  this.fields = null;\n  this.encode = encode || null;\n  this.pulses = pulses;\n\n  for (const pulse of pulses) {\n    if (pulse.stamp !== stamp) continue;\n\n    if (pulse.fields) {\n      const hash = p.fields || (p.fields = {});\n      for (const f in pulse.fields) { hash[f] = 1; }\n    }\n\n    if (pulse.changed(p.ADD)) c |= p.ADD;\n    if (pulse.changed(p.REM)) c |= p.REM;\n    if (pulse.changed(p.MOD)) c |= p.MOD;\n  }\n\n  this.changes = c;\n}\n\ninherits(MultiPulse, Pulse, {\n  /**\n   * Creates a new pulse based on the values of this pulse.\n   * The dataflow, time stamp and field modification values are copied over.\n   * @return {Pulse}\n   */\n  fork(flags) {\n    const p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);\n    if (flags !== undefined) {\n      if (flags & p.ADD) this.visit(p.ADD, t => p.add.push(t));\n      if (flags & p.REM) this.visit(p.REM, t => p.rem.push(t));\n      if (flags & p.MOD) this.visit(p.MOD, t => p.mod.push(t));\n    }\n    return p;\n  },\n\n  changed(flags) {\n    return this.changes & flags;\n  },\n\n  modified(_) {\n    const p = this, fields = p.fields;\n    return !(fields && (p.changes & p.MOD)) ? 0\n      : isArray(_) ? _.some(f => fields[f])\n      : fields[_];\n  },\n\n  filter() {\n    error('MultiPulse does not support filtering.');\n  },\n\n  materialize() {\n    error('MultiPulse does not support materialization.');\n  },\n\n  visit(flags, visitor) {\n    const p = this,\n          pulses = p.pulses,\n          n = pulses.length;\n    let i = 0;\n\n    if (flags & p.SOURCE) {\n      for (; i < n; ++i) {\n        pulses[i].visit(flags, visitor);\n      }\n    } else {\n      for (; i < n; ++i) {\n        if (pulses[i].stamp === p.stamp) {\n          pulses[i].visit(flags, visitor);\n        }\n      }\n    }\n\n    return p;\n  }\n});\n","/* eslint-disable require-atomic-updates */\nimport {default as Pulse, StopPropagation} from '../Pulse';\nimport MultiPulse from '../MultiPulse';\nimport asyncCallback from '../util/asyncCallback';\nimport UniqueList from '../util/UniqueList';\nimport {id, isArray} from 'vega-util';\n\n/**\n * Evaluates the dataflow and returns a Promise that resolves when pulse\n * propagation completes. This method will increment the current timestamp\n * and process all updated, pulsed and touched operators. When invoked for\n * the first time, all registered operators will be processed. This method\n * should not be invoked by third-party clients, use {@link runAsync} or\n * {@link run} instead.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\nexport async function evaluate(encode, prerun, postrun) {\n  const df = this,\n        async = [];\n\n  // if the pulse value is set, this is a re-entrant call\n  if (df._pulse) return reentrant(df);\n\n  // wait for pending datasets to load\n  if (df._pending) await df._pending;\n\n  // invoke prerun function, if provided\n  if (prerun) await asyncCallback(df, prerun);\n\n  // exit early if there are no updates\n  if (!df._touched.length) {\n    df.debug('Dataflow invoked, but nothing to do.');\n    return df;\n  }\n\n  // increment timestamp clock\n  const stamp = ++df._clock;\n\n  // set the current pulse\n  df._pulse = new Pulse(df, stamp, encode);\n\n  // initialize priority queue, reset touched operators\n  df._touched.forEach(op => df._enqueue(op, true));\n  df._touched = UniqueList(id);\n\n  let count = 0, op, next, error;\n\n  try {\n    while (df._heap.size() > 0) {\n      // dequeue operator with highest priority\n      op = df._heap.pop();\n\n      // re-queue if rank changed\n      if (op.rank !== op.qrank) {\n        df._enqueue(op, true);\n        continue;\n      }\n\n      // otherwise, evaluate the operator\n      next = op.run(df._getPulse(op, encode));\n\n      if (next.then) {\n        // await if operator returns a promise directly\n        next = await next;\n      } else if (next.async) {\n        // queue parallel asynchronous execution\n        async.push(next.async);\n        next = StopPropagation;\n      }\n\n      // propagate evaluation, enqueue dependent operators\n      if (next !== StopPropagation) {\n        if (op._targets) op._targets.forEach(op => df._enqueue(op));\n      }\n\n      // increment visit counter\n      ++count;\n    }\n  } catch (err) {\n    df._heap.clear();\n    error = err;\n  }\n\n  // reset pulse map\n  df._input = {};\n  df._pulse = null;\n\n  df.debug(`Pulse ${stamp}: ${count} operators`);\n\n  if (error) {\n    df._postrun = [];\n    df.error(error);\n  }\n\n  // invoke callbacks queued via runAfter\n  if (df._postrun.length) {\n    const pr = df._postrun.sort((a, b) => b.priority - a.priority);\n    df._postrun = [];\n    for (let i=0; i<pr.length; ++i) {\n      await asyncCallback(df, pr[i].callback);\n    }\n  }\n\n  // invoke postrun function, if provided\n  if (postrun) await asyncCallback(df, postrun);\n\n  // handle non-blocking asynchronous callbacks\n  if (async.length) {\n    Promise.all(async)\n      .then(cb => df.runAsync(null, () => {\n        cb.forEach(f => { try { f(df); } catch (err) { df.error(err); } });\n      }));\n  }\n\n  return df;\n}\n\n/**\n * Queues dataflow evaluation to run once any other queued evaluations have\n * completed and returns a Promise that resolves when the queued pulse\n * propagation completes. If provided, a callback function will be invoked\n * immediately before evaluation commences. This method will ensure a\n * separate evaluation is invoked for each time it is called.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode package.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Promise} - A promise that resolves to this dataflow after\n *   evaluation completes.\n */\nexport async function runAsync(encode, prerun, postrun) {\n  // await previously queued functions\n  while (this._running) await this._running;\n\n  // run dataflow, manage running promise\n  const clear = () => this._running = null;\n  (this._running = this.evaluate(encode, prerun, postrun))\n    .then(clear, clear);\n\n  return this._running;\n}\n\n/**\n * Requests dataflow evaluation and the immediately returns this dataflow\n * instance. If there are pending data loading or other asynchronous\n * operations, the dataflow will evaluate asynchronously after this method\n * has been invoked. To track when dataflow evaluation completes, use the\n * {@link runAsync} method instead. This method will raise an error if\n * invoked while the dataflow is already in the midst of evaluation.\n * @param {string} [encode] - The name of an encoding set to invoke during\n *   propagation. This value is added to generated Pulse instances;\n *   operators can then respond to (or ignore) this setting as appropriate.\n *   This parameter can be used in conjunction with the Encode transform in\n *   the vega-encode module.\n * @param {function} [prerun] - An optional callback function to invoke\n *   immediately before dataflow evaluation commences.\n * @param {function} [postrun] - An optional callback function to invoke\n *   after dataflow evaluation completes. The callback will be invoked\n *   after those registered via {@link runAfter}.\n * @return {Dataflow} - This dataflow instance.\n */\nexport function run(encode, prerun, postrun) {\n  return this._pulse ? reentrant(this)\n    : (this.evaluate(encode, prerun, postrun), this);\n}\n\n/**\n * Schedules a callback function to be invoked after the current pulse\n * propagation completes. If no propagation is currently occurring,\n * the function is invoked immediately. Callbacks scheduled via runAfter\n * are invoked immediately upon completion of the current cycle, before\n * any request queued via runAsync. This method is primarily intended for\n * internal use. Third-party callers using runAfter to schedule a callback\n * that invokes {@link run} or {@link runAsync} should not use this method,\n * but instead use {@link runAsync} with prerun or postrun arguments.\n * @param {function(Dataflow)} callback - The callback function to run.\n *   The callback will be invoked with this Dataflow instance as its\n *   sole argument.\n * @param {boolean} enqueue - A boolean flag indicating that the\n *   callback should be queued up to run after the next propagation\n *   cycle, suppressing immediate invocation when propagation is not\n *   currently occurring.\n * @param {number} [priority] - A priority value used to sort registered\n *   callbacks to determine execution order. This argument is intended\n *   for internal Vega use only.\n */\nexport function runAfter(callback, enqueue, priority) {\n  if (this._pulse || enqueue) {\n    // pulse propagation is currently running, queue to run after\n    this._postrun.push({\n      priority: priority || 0,\n      callback: callback\n    });\n  } else {\n    // pulse propagation already complete, invoke immediately\n    try { callback(this); } catch (err) { this.error(err); }\n  }\n}\n\n/**\n * Raise an error for re-entrant dataflow evaluation.\n */\nfunction reentrant(df) {\n  df.error('Dataflow already running. Use runAsync() to chain invocations.');\n  return df;\n}\n\n/**\n * Enqueue an operator into the priority queue for evaluation. The operator\n * will be enqueued if it has no registered pulse for the current cycle, or if\n * the force argument is true. Upon enqueue, this method also sets the\n * operator's qrank to the current rank value.\n * @param {Operator} op - The operator to enqueue.\n * @param {boolean} [force] - A flag indicating if the operator should be\n *   forceably added to the queue, even if it has already been previously\n *   enqueued during the current pulse propagation. This is useful when the\n *   dataflow graph is dynamically modified and the operator rank changes.\n */\nexport function enqueue(op, force) {\n  const q = op.stamp < this._clock;\n  if (q) op.stamp = this._clock;\n  if (q || force) {\n    op.qrank = op.rank;\n    this._heap.push(op);\n  }\n}\n\n/**\n * Provide a correct pulse for evaluating an operator. If the operator has an\n * explicit source operator, we will try to pull the pulse(s) from it.\n * If there is an array of source operators, we build a multi-pulse.\n * Otherwise, we return a current pulse with correct source data.\n * If the pulse is the pulse map has an explicit target set, we use that.\n * Else if the pulse on the upstream source operator is current, we use that.\n * Else we use the pulse from the pulse map, but copy the source tuple array.\n * @param {Operator} op - The operator for which to get an input pulse.\n * @param {string} [encode] - An (optional) encoding set name with which to\n *   annotate the returned pulse. See {@link run} for more information.\n */\nexport function getPulse(op, encode) {\n  const s = op.source,\n        stamp = this._clock;\n\n  return s && isArray(s)\n    ? new MultiPulse(this, stamp, s.map(_ => _.pulse), encode)\n    : this._input[op.id] || singlePulse(this._pulse, s && s.pulse);\n}\n\nfunction singlePulse(p, s) {\n  if (s && s.stamp === p.stamp) {\n    return s;\n  }\n\n  p = p.fork();\n  if (s && s !== StopPropagation) {\n    p.source = s.source;\n  }\n  return p;\n}\n","import Pulse from '../Pulse';\n\nconst NO_OPT = {skip: false, force: false};\n\n/**\n * Touches an operator, scheduling it to be evaluated. If invoked outside of\n * a pulse propagation, the operator will be evaluated the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the operator\n * will be queued for evaluation if and only if the operator has not yet been\n * evaluated on the current propagation timestamp.\n * @param {Operator} op - The operator to touch.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function touch(op, options) {\n  const opt = options || NO_OPT;\n  if (this._pulse) {\n    // if in midst of propagation, add to priority queue\n    this._enqueue(op);\n  } else {\n    // otherwise, queue for next propagation\n    this._touched.add(op);\n  }\n  if (opt.skip) op.skip(true);\n  return this;\n}\n\n/**\n * Updates the value of the given operator.\n * @param {Operator} op - The operator to update.\n * @param {*} value - The value to set.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.force] - If true, the operator will\n *   be re-evaluated even if its value has not changed.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function update(op, value, options) {\n  const opt = options || NO_OPT;\n  if (op.set(value) || opt.force) {\n    this.touch(op, opt);\n  }\n  return this;\n}\n\n/**\n * Pulses an operator with a changeset of tuples. If invoked outside of\n * a pulse propagation, the pulse will be applied the next time this\n * dataflow is run. If invoked in the midst of pulse propagation, the pulse\n * will be added to the set of active pulses and will be applied if and\n * only if the target operator has not yet been evaluated on the current\n * propagation timestamp.\n * @param {Operator} op - The operator to pulse.\n * @param {ChangeSet} value - The tuple changeset to apply.\n * @param {object} [options] - Additional options hash.\n * @param {boolean} [options.skip] - If true, the operator will\n *   be skipped: it will not be evaluated, but its dependents will be.\n * @return {Dataflow}\n */\nexport function pulse(op, changeset, options) {\n  this.touch(op, options || NO_OPT);\n\n  const p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),\n        t = op.pulse && op.pulse.source || [];\n\n  p.target = op;\n  this._input[op.id] = changeset.pulse(p, t);\n\n  return this;\n}\n","export default function Heap(cmp) {\n  let nodes = [];\n  return {\n    clear: () => nodes = [],\n    size: () => nodes.length,\n    peek: () => nodes[0],\n    push: x => {\n      nodes.push(x);\n      return siftdown(nodes, 0, nodes.length - 1, cmp);\n    },\n    pop: () => {\n      const last = nodes.pop();\n      let item;\n      if (nodes.length) {\n        item = nodes[0];\n        nodes[0] = last;\n        siftup(nodes, 0, cmp);\n      } else {\n        item = last;\n      }\n      return item;\n    }\n  };\n}\n\nfunction siftdown(array, start, idx, cmp) {\n  let parent, pidx;\n\n  const item = array[idx];\n  while (idx > start) {\n    pidx = (idx - 1) >> 1;\n    parent = array[pidx];\n    if (cmp(item, parent) < 0) {\n      array[idx] = parent;\n      idx = pidx;\n      continue;\n    }\n    break;\n  }\n  return (array[idx] = item);\n}\n\nfunction siftup(array, idx, cmp) {\n  const start = idx,\n        end = array.length,\n        item = array[idx];\n  let cidx = (idx << 1) + 1, ridx;\n\n  while (cidx < end) {\n    ridx = cidx + 1;\n    if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {\n      cidx = ridx;\n    }\n    array[idx] = array[cidx];\n    idx = cidx;\n    cidx = (idx << 1) + 1;\n  }\n  array[idx] = item;\n  return siftdown(array, start, idx, cmp);\n}\n","import add from './add';\nimport connect from './connect';\nimport events from './events';\nimport {ingest, parse, preload, request} from './load';\nimport on from './on';\nimport {rank, rerank} from './rank';\nimport {enqueue, evaluate, getPulse, run, runAfter, runAsync} from './run';\nimport {pulse, touch, update} from './update';\nimport changeset from '../ChangeSet';\nimport Heap from '../util/Heap';\nimport UniqueList from '../util/UniqueList';\nimport {defaultLocale} from 'vega-format';\nimport {loader} from 'vega-loader';\nimport {Error, id, logger} from 'vega-util';\n\n/**\n * A dataflow graph for reactive processing of data streams.\n * @constructor\n */\nexport default function Dataflow() {\n  this.logger(logger());\n  this.logLevel(Error);\n\n  this._clock = 0;\n  this._rank = 0;\n  this._locale = defaultLocale();\n  try {\n    this._loader = loader();\n  } catch (e) {\n    // do nothing if loader module is unavailable\n  }\n\n  this._touched = UniqueList(id);\n  this._input = {};\n  this._pulse = null;\n\n  this._heap = Heap((a, b) => a.qrank - b.qrank);\n  this._postrun = [];\n}\n\nfunction logMethod(method) {\n  return function() {\n    return this._log[method].apply(this, arguments);\n  };\n}\n\nDataflow.prototype = {\n\n  /**\n   * The current timestamp of this dataflow. This value reflects the\n   * timestamp of the previous dataflow run. The dataflow is initialized\n   * with a stamp value of 0. The initial run of the dataflow will have\n   * a timestap of 1, and so on. This value will match the\n   * {@link Pulse.stamp} property.\n   * @return {number} - The current timestamp value.\n   */\n  stamp() {\n    return this._clock;\n  },\n\n  /**\n   * Gets or sets the loader instance to use for data file loading. A\n   * loader object must provide a \"load\" method for loading files and a\n   * \"sanitize\" method for checking URL/filename validity. Both methods\n   * should accept a URI and options hash as arguments, and return a Promise\n   * that resolves to the loaded file contents (load) or a hash containing\n   * sanitized URI data with the sanitized url assigned to the \"href\" property\n   * (sanitize).\n   * @param {object} _ - The loader instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current loader instance. Otherwise returns this Dataflow instance.\n   */\n  loader(_) {\n    if (arguments.length) {\n      this._loader = _;\n      return this;\n    } else {\n      return this._loader;\n    }\n  },\n\n  /**\n   * Gets or sets the locale instance to use for formatting and parsing\n   * string values. The locale object should be provided by the\n   * vega-format library, and include methods such as format, timeFormat,\n   * utcFormat, timeParse, and utcParse.\n   * @param {object} _ - The locale instance to use.\n   * @return {object|Dataflow} - If no arguments are provided, returns\n   *   the current locale instance. Otherwise returns this Dataflow instance.\n   */\n  locale(_) {\n    if (arguments.length) {\n      this._locale = _;\n      return this;\n    } else {\n      return this._locale;\n    }\n  },\n\n  /**\n   * Get or set the logger instance used to log messages. If no arguments are\n   * provided, returns the current logger instance. Otherwise, sets the logger\n   * and return this Dataflow instance. Provided loggers must support the full\n   * API of logger objects generated by the vega-util logger method. Note that\n   * by default the log level of the new logger will be used; use the logLevel\n   * method to adjust the log level as needed.\n   */\n  logger(logger) {\n    if (arguments.length) {\n      this._log = logger;\n      return this;\n    } else {\n      return this._log;\n    }\n  },\n\n  /**\n   * Logs an error message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit error messages.\n   */\n  error: logMethod('error'),\n\n  /**\n   * Logs a warning message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit warning messages.\n   */\n  warn: logMethod('warn'),\n\n  /**\n   * Logs a information message. By default, logged messages are written to\n   * console output. The message will only be logged if the current log level is\n   * high enough to permit information messages.\n   */\n  info: logMethod('info'),\n\n  /**\n   * Logs a debug message. By default, logged messages are written to console\n   * output. The message will only be logged if the current log level is high\n   * enough to permit debug messages.\n   */\n  debug: logMethod('debug'),\n\n  /**\n   * Get or set the current log level. If an argument is provided, it\n   * will be used as the new log level.\n   * @param {number} [level] - Should be one of None, Warn, Info\n   * @return {number} - The current log level.\n   */\n  logLevel: logMethod('level'),\n\n  /**\n   * Empty entry threshold for garbage cleaning. Map data structures will\n   * perform cleaning once the number of empty entries exceeds this value.\n   */\n  cleanThreshold: 1e4,\n\n  // OPERATOR REGISTRATION\n  add,\n  connect,\n  rank,\n  rerank,\n\n  // OPERATOR UPDATES\n  pulse,\n  touch,\n  update,\n  changeset,\n\n  // DATA LOADING\n  ingest,\n  parse,\n  preload,\n  request,\n\n  // EVENT HANDLING\n  events,\n  on,\n\n  // PULSE PROPAGATION\n  evaluate,\n  run,\n  runAsync,\n  runAfter,\n  _enqueue: enqueue,\n  _getPulse: getPulse\n};\n","import Operator from './Operator';\nimport {inherits} from 'vega-util';\n\n/**\n * Abstract class for operators that process data tuples.\n * Subclasses must provide a {@link transform} method for operator processing.\n * @constructor\n * @param {*} [init] - The initial value for this operator.\n * @param {object} [params] - The parameters for this operator.\n * @param {Operator} [source] - The operator from which to receive pulses.\n */\nexport default function Transform(init, params) {\n  Operator.call(this, init, null, params);\n}\n\ninherits(Transform, Operator, {\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Internally, this method calls {@link evaluate} to perform processing.\n   * If {@link evaluate} returns a falsy value, the input pulse is returned.\n   * This method should NOT be overridden, instead overrride {@link evaluate}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return the output pulse for this operator (or StopPropagation)\n   */\n  run(pulse) {\n    if (pulse.stamp < this.stamp) return pulse.StopPropagation;\n\n    let rv;\n    if (this.skip()) {\n      this.skip(false);\n    } else {\n      rv = this.evaluate(pulse);\n    }\n    rv = rv || pulse;\n\n    if (rv.then) {\n      rv = rv.then(_ => this.pulse =_);\n    } else if (rv !== pulse.StopPropagation) {\n      this.pulse = rv;\n    }\n\n    return rv;\n  },\n\n  /**\n   * Overrides {@link Operator.evaluate} for transform operators.\n   * Marshalls parameter values and then invokes {@link transform}.\n   * @param {Pulse} pulse - the current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n       value (including undefined) will let the input pulse pass through.\n  */\n  evaluate(pulse) {\n    const params = this.marshall(pulse.stamp),\n          out = this.transform(params, pulse);\n    params.clear();\n    return out;\n  },\n\n  /**\n   * Process incoming pulses.\n   * Subclasses should override this method to implement transforms.\n   * @param {Parameters} _ - The operator parameter values.\n   * @param {Pulse} pulse - The current dataflow pulse.\n   * @return {Pulse} The output pulse (or StopPropagation). A falsy return\n   *   value (including undefined) will let the input pulse pass through.\n   */\n  transform() {}\n});\n","import Operator from '../Operator';\nimport {isFunction} from 'vega-util';\n\n/**\n * Add an operator to the dataflow graph. This function accepts a\n * variety of input argument types. The basic signature supports an\n * initial value, update function and parameters. If the first parameter\n * is an Operator instance, it will be added directly. If it is a\n * constructor for an Operator subclass, a new instance will be instantiated.\n * Otherwise, if the first parameter is a function instance, it will be used\n * as the update function and a null initial value is assumed.\n * @param {*} init - One of: the operator to add, the initial value of\n *   the operator, an operator class to instantiate, or an update function.\n * @param {function} [update] - The operator update function.\n * @param {object} [params] - The operator parameters.\n * @param {boolean} [react=true] - Flag indicating if this operator should\n *   listen for changes to upstream operators included as parameters.\n * @return {Operator} - The added operator.\n */\nexport default function(init, update, params, react) {\n  let shift = 1,\n      op;\n\n  if (init instanceof Operator) {\n    op = init;\n  } else if (init && init.prototype instanceof Operator) {\n    op = new init();\n  } else if (isFunction(init)) {\n    op = new Operator(null, init);\n  } else {\n    shift = 0;\n    op = new Operator(init, update);\n  }\n\n  this.rank(op);\n  if (shift) {\n    react = params;\n    params = update;\n  }\n  if (params) this.connect(op, op.parameters(params, react));\n  this.touch(op);\n\n  return op;\n}\n","/**\n * Connect a target operator as a dependent of source operators.\n * If necessary, this method will rerank the target operator and its\n * dependents to ensure propagation proceeds in a topologically sorted order.\n * @param {Operator} target - The target operator.\n * @param {Array<Operator>} - The source operators that should propagate\n *   to the target operator.\n */\nexport default function(target, sources) {\n  const targetRank = target.rank,\n        n = sources.length;\n\n  for (let i = 0; i < n; ++i) {\n    if (targetRank < sources[i].rank) {\n      this.rerank(target);\n      return;\n    }\n  }\n}\n","import {error} from 'vega-util';\n\n/**\n * Assigns a rank to an operator. Ranks are assigned in increasing order\n * by incrementing an internal rank counter.\n * @param {Operator} op - The operator to assign a rank.\n */\nexport function rank(op) {\n  op.rank = ++this._rank;\n}\n\n/**\n * Re-ranks an operator and all downstream target dependencies. This\n * is necessary when upstream dependencies of higher rank are added to\n * a target operator.\n * @param {Operator} op - The operator to re-rank.\n */\nexport function rerank(op) {\n  const queue = [op];\n  let cur, list, i;\n\n  while (queue.length) {\n    this.rank(cur = queue.pop());\n    if (list = cur._targets) {\n      for (i=list.length; --i >= 0;) {\n        queue.push(cur = list[i]);\n        if (cur === op) error('Cycle detected in dataflow graph.');\n      }\n    }\n  }\n}\n","import {read, responseType} from 'vega-loader';\nimport {truthy} from 'vega-util';\n\nexport function parse(data, format) {\n  const locale = this.locale();\n  return read(data, format, locale.timeParse, locale.utcParse);\n}\n\n/**\n * Ingests new data into the dataflow. First parses the data using the\n * vega-loader read method, then pulses a changeset to the target operator.\n * @param {Operator} target - The Operator to target with ingested data,\n *   typically a Collect transform instance.\n * @param {*} data - The input data, prior to parsing. For JSON this may\n *   be a string or an object. For CSV, TSV, etc should be a string.\n * @param {object} format - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @returns {Dataflow}\n */\nexport function ingest(target, data, format) {\n  data = this.parse(data, format);\n  return this.pulse(target, this.changeset().insert(data));\n}\n\n/**\n * Request data from an external source, parse it, and return a Promise.\n * @param {string} url - The URL from which to load the data. This string\n *   is passed to the vega-loader load method.\n * @param {object} [format] - The data format description for parsing\n *   loaded data. This object is passed to the vega-loader read method.\n * @return {Promise} A Promise that resolves upon completion of the request.\n *   The resolved object contains the following properties:\n *   - data: an array of parsed data (or null upon error)\n *   - status: a code for success (0), load fail (-1), or parse fail (-2)\n */\nexport async function request(url, format) {\n  const df = this;\n  let status = 0, data;\n\n  try {\n    data = await df.loader().load(url, {\n      context: 'dataflow',\n      response: responseType(format && format.type)\n    });\n    try {\n      data = df.parse(data, format);\n    } catch (err) {\n      status = -2;\n      df.warn('Data ingestion failed', url, err);\n    }\n  } catch (err) {\n    status = -1;\n    df.warn('Loading failed', url, err);\n  }\n\n  return {data, status};\n}\n\nexport async function preload(target, url, format) {\n  const df = this,\n        pending = df._pending || loadPending(df);\n\n  pending.requests += 1;\n\n  const res = await df.request(url, format);\n  df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));\n\n  pending.done();\n  return res;\n}\n\nfunction loadPending(df) {\n  let accept;\n  const pending = new Promise(a => accept = a);\n\n  pending.requests = 0;\n\n  pending.done = () => {\n    if (--pending.requests === 0) {\n      df._pending = null;\n      accept(df);\n    }\n  };\n\n  return (df._pending = pending);\n}\n","import {stream} from '../EventStream';\nimport {array} from 'vega-util';\n\n/**\n * Create a new event stream from an event source.\n * @param {object} source - The event source to monitor. The input must\n *  support the addEventListener method.\n * @param {string} type - The event type.\n * @param {function(object): boolean} [filter] - Event filter function.\n * @param {function(object): *} [apply] - Event application function.\n *   If provided, this function will be invoked and the result will be\n *   used as the downstream event value.\n * @return {EventStream}\n */\nexport default function(source, type, filter, apply) {\n  const df = this,\n        s = stream(filter, apply),\n        send = function(e) {\n          e.dataflow = df;\n          try {\n            s.receive(e);\n          } catch (error) {\n            df.error(error);\n          } finally {\n            df.run();\n          }\n        };\n\n  let sources;\n  if (typeof source === 'string' && typeof document !== 'undefined') {\n    sources = document.querySelectorAll(source);\n  } else {\n    sources = array(source);\n  }\n\n  const n = sources.length;\n  for (let i = 0; i < n; ++i) {\n    sources[i].addEventListener(type, send);\n  }\n\n  return s;\n}\n","import {hasOwnProperty} from 'vega-util';\n\nexport const transforms = {};\n\nexport function definition(type) {\n  const t = transform(type);\n  return t && t.Definition || null;\n}\n\nexport function transform(type) {\n  type = type && type.toLowerCase();\n  return hasOwnProperty(transforms, type) ? transforms[type] : null;\n}\n"],"names":["UniqueList","idFunc","$","identity","list","ids","add","_","id","push","remove","idx","indexOf","splice","async","asyncCallback","df","callback","err","error","TUPLE_ID_KEY","Symbol","TUPLE_ID","tupleid","t","setid","ingest","datum","Object","data","rederive","d","k","isChangeSet","v","constructor","changeset","rem","mod","remp","modp","clean","reflow","insert","array","n","length","i","this","a","isFunction","modify","field","value","m","constant","filter","tuple","encode","set","pulse","tuples","cur","out","f","forEach","modifies","slice","CACHE","Parameters","defineProperty","writable","prototype","name","index","force","o","isArray","modified","arguments","clear","OP_ID","NO_PARAMS","Operator","init","update","params","react","stamp","rank","qrank","flags","_update","parameters","flag","bit","state","targets","_targets","skip","initonly","argval","_argval","argops","_argops","deps","op","source","Array","marshall","item","detach","evaluate","call","StopPropagation","run","rv","STREAM_ID","EventStream","apply","receive","_filter","_apply","stream","truthy","consume","_consume","evt","val","trg","preventDefault","stopPropagation","s","merge","throttle","pause","now","Date","debounce","delay","e","dataflow","between","b","active","SKIP","onStream","target","options","opt","extend","func","undefined","touch","onOperator","updater","connect","Pulse","fields","materialize","visitArray","map","visit","addFilter","MultiPulse","pulses","p","c","hash","changed","ADD","REM","MOD","changes","reentrant","ADD_REM","ADD_MOD","ALL","REFLOW","SOURCE","NO_SOURCE","NO_FIELDS","fork","clone","addAll","src","addF","remF","modF","srcF","cleans","runAfter","len","nomod","some","visitor","sum","inherits","NO_OPT","Heap","cmp","nodes","size","peek","x","siftdown","pop","last","start","end","ridx","cidx","siftup","parent","pidx","Dataflow","logger","logLevel","Error","_clock","_rank","_locale","defaultLocale","_loader","loader","_touched","_input","_pulse","_heap","_postrun","logMethod","method","_log","Transform","locale","warn","info","debug","cleanThreshold","shift","sources","targetRank","rerank","queue","_enqueue","format","parse","read","timeParse","utcParse","preload","url","pending","_pending","accept","Promise","requests","done","loadPending","res","request","status","load","context","response","responseType","type","events","send","document","querySelectorAll","addEventListener","on","prerun","postrun","next","count","_getPulse","then","pr","sort","priority","all","cb","runAsync","_running","enqueue","q","singlePulse","transform","transforms","toLowerCase","hasOwnProperty","Definition"],"mappings":"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"}