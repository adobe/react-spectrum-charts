"use strict";(self.webpackChunk_spectrum_charts_docs=self.webpackChunk_spectrum_charts_docs||[]).push([[842],{1184:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>d});var n=r(4041);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}},8004:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"api/interactivity/ChartPopover","title":"ChartPopover","description":"The ChartPopover component defines the popover that will appear when the user selects a mark on the chart. ChartPopover must be used as a child of Area, Bar, Line, or AxisAnnotation. You should only have one popover defined per Chart visualization.","source":"@site/docs/api/interactivity/ChartPopover.md","sourceDirName":"api/interactivity","slug":"/api/interactivity/ChartPopover","permalink":"/react-spectrum-charts/PR-621-docs/docs/api/interactivity/ChartPopover","draft":false,"unlisted":false,"editUrl":"https://github.com/adobe/react-spectrum-charts/tree/main/packages/docs/docs/api/interactivity/ChartPopover.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"ChartTooltip","permalink":"/react-spectrum-charts/PR-621-docs/docs/api/interactivity/ChartTooltip"},"next":{"title":"Developer Docs","permalink":"/react-spectrum-charts/PR-621-docs/docs/developers/DeveloperDocs"}}');var s=r(1085),o=r(1184);const i={},d=void 0,c={},h=[{value:"Props",id:"props",level:3}];function a(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ChartPopover"})," component defines the popover that will appear when the user selects a mark on the chart. ",(0,s.jsx)(t.code,{children:"ChartPopover"})," must be used as a child of ",(0,s.jsx)(t.code,{children:"Area"}),", ",(0,s.jsx)(t.code,{children:"Bar"}),", ",(0,s.jsx)(t.code,{children:"Line"}),", or ",(0,s.jsx)(t.code,{children:"AxisAnnotation"}),". You should only have one popover defined per Chart visualization."]}),"\n",(0,s.jsx)(t.p,{children:"You can add interactive elements like buttons to the popover."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"ChartPopover"})," uses the React Spectrum ",(0,s.jsx)(t.a,{href:"https://react-spectrum.adobe.com/react-spectrum/Dialog.html",children:"Dialog"}),". Follow the React Spectrum ",(0,s.jsx)(t.a,{href:"https://react-spectrum.adobe.com/react-spectrum/Dialog.html#content",children:"documentation"})," to properly setup your dialog content."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"<Chart data={data}>\n  <Bar>\n    <ChartPopover>\n      {(datum, close) => (\n        <Content>\n          <Text>Average: {datum.average}</Text>\n          <ActionButton onPress={close}>Close</ActionButton>\n        </Content>\n      )}\n    </ChartPopover>\n  </Bar>\n</Chart>\n"})}),"\n",(0,s.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"name"}),(0,s.jsx)("th",{children:"type"}),(0,s.jsx)("th",{children:"default"}),(0,s.jsx)("th",{children:"description"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"children*"}),(0,s.jsx)("td",{children:"(datum: Datum, close: () => void) => ReactElement"}),(0,s.jsx)("td",{children:"\u2013"}),(0,s.jsx)("td",{children:"Sets what is displayed by the popover. Supplies the datum for the value(s) that is currently selected and a close event handler. Function should return a ReactElement which will be the content of the popover."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"width"}),(0,s.jsx)("td",{children:"number | 'auto'"}),(0,s.jsx)("td",{children:"\u2014"}),(0,s.jsxs)("td",{children:["Sets the width of the popover. ",(0,s.jsx)(t.code,{children:"auto"})," will fit the contents plus any padding."]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"minWidth"}),(0,s.jsx)("td",{children:"number"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"Sets the minimum width of the popover in pixels."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"maxWidth"}),(0,s.jsx)("td",{children:"number"}),(0,s.jsx)("td",{children:"\u2014"}),(0,s.jsx)("td",{children:"Sets the maximum width of the popover in pixels."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"height"}),(0,s.jsx)("td",{children:"number | 'auto'"}),(0,s.jsx)("td",{children:"'auto'"}),(0,s.jsxs)("td",{children:["Sets the height of the popover. ",(0,s.jsx)(t.code,{children:"auto"})," will fit the contents plus any padding."]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"minHeight"}),(0,s.jsx)("td",{children:"number"}),(0,s.jsx)("td",{children:"\u2014"}),(0,s.jsx)("td",{children:"Sets the minimum height of the popover in pixels."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"maxHeight"}),(0,s.jsx)("td",{children:"number"}),(0,s.jsx)("td",{children:"\u2014"}),(0,s.jsx)("td",{children:"Sets the maximum height of the popover in pixels."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"containerPadding"}),(0,s.jsx)("td",{children:"number"}),(0,s.jsx)("td",{children:"12"}),(0,s.jsxs)("td",{children:["The placement padding that should be applied between the popover and its surrounding container.",(0,s.jsx)("br",{}),"See ",(0,s.jsx)("a",{href:"https://react-spectrum.adobe.com/react-spectrum/DialogTrigger.html#container-padding",children:"React Spectrum docs"})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"onOpenChange"}),(0,s.jsx)("td",{children:"(isOpen: boolean) => void"}),(0,s.jsx)("td",{children:"\u2014"}),(0,s.jsx)("td",{children:"Handler that is called when the popover's open state changes."})]})]})]})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);