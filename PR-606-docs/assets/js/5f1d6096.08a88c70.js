"use strict";(self.webpackChunk_spectrum_charts_docs=self.webpackChunk_spectrum_charts_docs||[]).push([[446],{1184:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var i=t(4041);const s={},r=i.createContext(s);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},6011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"guides/chart-basics","title":"Chart Basics","description":"React Spectrum Charts provides a flexible and powerful way to create data visualizations. This guide will walk you through the fundamental concepts and components needed to create charts.","source":"@site/docs/guides/chart-basics.md","sourceDirName":"guides","slug":"/guides/chart-basics","permalink":"/react-spectrum-charts/PR-606-docs/docs/guides/chart-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/adobe/react-spectrum-charts/tree/main/packages/docs/docs/guides/chart-basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Installation","permalink":"/react-spectrum-charts/PR-606-docs/docs/installation"},"next":{"title":"Troubleshooting","permalink":"/react-spectrum-charts/PR-606-docs/docs/guides/troubleshooting"}}');var s=t(1085),r=t(1184);const c={},o="Chart Basics",a={},l=[{value:"Chart Structure",id:"chart-structure",level:2},{value:"Default Behavior",id:"default-behavior",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Chart Component",id:"chart-component",level:3},{value:"Visualization Components",id:"visualization-components",level:3},{value:"Supporting Components",id:"supporting-components",level:3},{value:"Chart Components",id:"chart-components",level:4},{value:"Interactive Components",id:"interactive-components",level:4},{value:"Analyisis Components",id:"analyisis-components",level:4},{value:"Interactivity",id:"interactivity",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"chart-basics",children:"Chart Basics"})}),"\n",(0,s.jsx)(n.p,{children:"React Spectrum Charts provides a flexible and powerful way to create data visualizations. This guide will walk you through the fundamental concepts and components needed to create charts."}),"\n",(0,s.jsx)(n.h2,{id:"chart-structure",children:"Chart Structure"}),"\n",(0,s.jsxs)(n.p,{children:["Every visualization starts with the ",(0,s.jsx)(n.code,{children:"Chart"})," component, which serves as the container and configuration hub for your chart. Here's a basic example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { Axis, Chart, Line } from \'@adobe/react-spectrum-charts\';\n\nfunction BasicChart() {\n  return (\n    <Chart data={data}>\n      <Line />\n      <Axis position="bottom" />\n      <Axis position="left" />\n    </Chart>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"default-behavior",children:"Default Behavior"}),"\n",(0,s.jsx)(n.p,{children:"Notice that there are very few props in the code example above. This is because React Spectrum Charts sets defaults for the majority of pops so you awesome charts with minimal configuration. However, if you need to control the fine details, you can! React Spectrum Charts has a fully featured declarative API that strikes a great balance between simplicity and control."}),"\n",(0,s.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(n.h3,{id:"chart-component",children:"Chart Component"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Chart"})," component is where you configure chart-wide settings such as:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Size (width, height)"}),"\n",(0,s.jsx)(n.li,{children:"Padding"}),"\n",(0,s.jsx)(n.li,{children:"Color schemes"}),"\n",(0,s.jsx)(n.li,{children:"Scales"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"visualization-components",children:"Visualization Components"}),"\n",(0,s.jsx)(n.p,{children:"Each chart requires at least one core visualization component. These include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Area"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Bar"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Big Number"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Donut"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Line"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Scatter"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"supporting-components",children:"Supporting Components"}),"\n",(0,s.jsx)(n.p,{children:"Charts can be enhanced with various supporting components:"}),"\n",(0,s.jsx)(n.h4,{id:"chart-components",children:"Chart Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Axis"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Legend"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Title"})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"interactive-components",children:"Interactive Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ChartTooltip"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ChartPopover"})}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"analyisis-components",children:"Analyisis Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"Trendline"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"MetricRange"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"interactivity",children:"Interactivity"}),"\n",(0,s.jsx)(n.p,{children:"React Spectrum Charts supports various interactive features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hover effects"}),"\n",(0,s.jsx)(n.li,{children:"Click handlers"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Add interactive components to enable these features:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<Chart data={data} height={400} colorScheme="light">\n  <Line dimension="date" metric="value" color="series">\n    <ChartTooltip>{dialogCallback}</ChartTooltip>\n    <ChartPopover>{dialogCallback}</ChartPopover>\n  </Line>\n  <Axis position="bottom" />\n  <Axis position="left" />\n  <Legend\n    highlight\n    onClick={(series) => {\n      console.log(\'Series clicked:\', series);\n    }}\n  />\n</Chart>\n'})}),"\n",(0,s.jsx)(n.p,{children:"This example demonstrates:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A line chart with multiple series colored by series name"}),"\n",(0,s.jsx)(n.li,{children:"Interactive tooltips that appear on hover"}),"\n",(0,s.jsx)(n.li,{children:"Popovers that appear on click"}),"\n",(0,s.jsx)(n.li,{children:"A legend that highlights series on hover and handles click events"}),"\n",(0,s.jsx)(n.li,{children:"Automatic axis configuration"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For more detailed information about specific chart types and advanced features, check out our other guides in the documentation."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);