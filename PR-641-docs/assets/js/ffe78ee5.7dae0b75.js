"use strict";(self.webpackChunk_spectrum_charts_docs=self.webpackChunk_spectrum_charts_docs||[]).push([[372],{1184:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>n});var s=i(4041);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}},8479:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/interactivity/ChartTooltip","title":"ChartTooltip","description":"The ChartTooltip component is used to setup hover tooltips for data on the chart. ChartTooltip must be used as a child of another component such as Bar, Area, Line or Trendline.","source":"@site/docs/api/interactivity/ChartTooltip.md","sourceDirName":"api/interactivity","slug":"/api/interactivity/ChartTooltip","permalink":"/react-spectrum-charts/docs/docs/api/interactivity/ChartTooltip","draft":false,"unlisted":false,"editUrl":"https://github.com/adobe/react-spectrum-charts/tree/main/packages/docs/docs/api/interactivity/ChartTooltip.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Title","permalink":"/react-spectrum-charts/docs/docs/api/components/Title"},"next":{"title":"ChartPopover","permalink":"/react-spectrum-charts/docs/docs/api/interactivity/ChartPopover"}}');var a=i(1085),o=i(1184);const r={},n=void 0,l={},d=[{value:"Examples",id:"examples",level:2},{value:"Basic",id:"basic",level:3},{value:"Tooltip disabled for some data",id:"tooltip-disabled-for-some-data",level:3},{value:"Props",id:"props",level:2}];function h(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"ChartTooltip"})," component is used to setup hover tooltips for data on the chart. ",(0,a.jsx)(t.code,{children:"ChartTooltip"})," must be used as a child of another component such as ",(0,a.jsx)(t.code,{children:"Bar"}),", ",(0,a.jsx)(t.code,{children:"Area"}),", ",(0,a.jsx)(t.code,{children:"Line"})," or ",(0,a.jsx)(t.code,{children:"Trendline"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Tooltips should only use plain html without any interactive elements. It's not possible to click on any elements of a tooltip. If you need interactive elements like buttons, those should be added to the ",(0,a.jsx)(t.code,{children:"ChartPopover"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(t.h3,{id:"basic",children:"Basic"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"<Chart data={data}>\n    <Bar>\n        <ChartTooltip>\n            {datum => <div>Average: {datum.average}</div>}\n        </ChartTooltip>\n    </Bar>\n</Chart>\n"})}),"\n",(0,a.jsx)(t.h3,{id:"tooltip-disabled-for-some-data",children:"Tooltip disabled for some data"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:"const data = [\n  /* Tooltip will not be shown when disableTooltip is truthy */\n  { value: 10, disableTooltip: true },\n  { value: 20, disableTooltip: 'a string' },\n  /* Tooltip will be shown when disableTooltip is falsy */\n  { value: 30, disableTooltip: false },\n  { value: 40  },\n];\n\n<Chart data={data} >\n    <Bar>\n        <ChartTooltip excludeDataKey=\"disableTooltip\">\n            {datum => <div>Value: {datum.value}</div>}\n        </ChartTooltip>\n    </Bar>\n</Chart>\n"})}),"\n",(0,a.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"name"}),(0,a.jsx)("th",{children:"type"}),(0,a.jsx)("th",{children:"default"}),(0,a.jsx)("th",{children:"description"})]})}),(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"children*"}),(0,a.jsx)("td",{children:"(datum: Datum) => ReactElement"}),(0,a.jsx)("td",{children:"\u2013"}),(0,a.jsx)("td",{children:"Sets what is displayed by the tooltip. Supplies the datum for the value(s) that is currently hovered and expects a ReactElement to be returned."})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"excludeDataKey"}),(0,a.jsx)("td",{children:"string"}),(0,a.jsx)("td",{children:"\u2013"}),(0,a.jsxs)("td",{children:["When present, points in the chart data where the value for ",(0,a.jsx)(t.code,{children:"excludeDataKey"})," is truthy will not be interactable and will not display a tooltip."]})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"highlightBy"}),(0,a.jsx)("td",{children:"'item' | 'dimension' | 'series' | string[]"}),(0,a.jsx)("td",{children:"'item'"}),(0,a.jsxs)("td",{children:["Specifies which marks on the parent should be highlighted on hover. For example if set to ",(0,a.jsx)(t.code,{children:"dimension"}),", when a user hovers a mark, it will highlight all marks with the same dimension value.",(0,a.jsx)("br",{}),"If an array of strings is provided, each of those key will be used to find other marks that match and should be highlighted. For example, if ",(0,a.jsx)(t.code,{children:"highlightBy"})," is set to ",(0,a.jsx)(t.code,{children:"['company', 'quarter']"}),", when a mark is hovered, all marks with the same company and quarter values will be highlighted.",(0,a.jsx)("br",{}),"If ",(0,a.jsx)(t.code,{children:"highlightBy"})," uses ",(0,a.jsx)(t.code,{children:"series"}),", ",(0,a.jsx)(t.code,{children:"dimension"}),", or an array of string, the ",(0,a.jsx)(t.code,{children:"item"})," passed to the tooltip callback will include the ",(0,a.jsx)(t.code,{children:"rscGroupData"})," key. This will have the data for all highlighted marks so that your tooltip can provide info for all the highlighted marks, not just the hovered mark."]})]})]})]})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);